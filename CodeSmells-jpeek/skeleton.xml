<?xml version="1.0" encoding="UTF-8"?>
<skeleton date="2020-03-26T03:03:58.975Z"
          schema="xsd/skeleton.xsd"
          version="0.30.9">
   <app id="C:\Users\suj19\IdeaProjects\cs515-801-s20-Eswaran-pdf">
      <package id="org.pdfsam.ui.log">
         <class id="ErrorLoggedEvent"><!--Package: org.pdfsam.ui.log; name: org.pdfsam.ui.log.ErrorLoggedEvent; file: org.pdfsam.ui.log.ErrorLoggedEvent-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LogAreaVisiblityChangedEvent"><!--Package: org.pdfsam.ui.log; name: org.pdfsam.ui.log.LogAreaVisiblityChangedEvent; file: org.pdfsam.ui.log.LogAreaVisiblityChangedEvent-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LogLevelTest"><!--Package: org.pdfsam.ui.log; name: org.pdfsam.ui.log.LogLevelTest; file: org.pdfsam.ui.log.LogLevelTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="toLogLevel"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.ERROR</op>
                     <op code="call">org.pdfsam.ui.log.LogLevel.toLogLevel</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.WARN</op>
                     <op code="call">org.pdfsam.ui.log.LogLevel.toLogLevel</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.INFO</op>
                     <op code="call">org.pdfsam.ui.log.LogLevel.toLogLevel</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.INFO</op>
                     <op code="call">org.pdfsam.ui.log.LogLevel.toLogLevel</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.INFO</op>
                     <op code="call">org.pdfsam.ui.log.LogLevel.toLogLevel</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LogListView$TextCell"><!--Package: org.pdfsam.ui.log; name: org.pdfsam.ui.log.LogListView$TextCell; file: org.pdfsam.ui.log.LogListView$TextCell-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.ListCell.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/log/LogMessage;Z)V"
                       name="updateItem"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/log/LogMessage">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.ListCell.updateItem</op>
                     <op code="call">org.pdfsam.ui.log.LogLevel.values</op>
                     <op code="call">org.pdfsam.ui.log.LogListView$TextCell.getStyleClass</op>
                     <op code="call">org.pdfsam.ui.log.LogLevel.style</op>
                     <op code="call">javafx.collections.ObservableList.remove</op>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="call">org.pdfsam.ui.log.LogMessage.getMessage</op>
                     <op code="call">org.pdfsam.ui.log.LogListView$TextCell.setText</op>
                     <op code="call">org.pdfsam.ui.log.LogListView$TextCell.getStyleClass</op>
                     <op code="call">org.pdfsam.ui.log.LogMessage.getLevel</op>
                     <op code="call">org.pdfsam.ui.log.LogLevel.style</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.ui.log.LogListView$TextCell.setText</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LogMessageBroadcasterTest$Config"><!--Package: org.pdfsam.ui.log; name: org.pdfsam.ui.log.LogMessageBroadcasterTest$Config; file: org.pdfsam.ui.log.LogMessageBroadcasterTest$Config-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lch/qos/logback/classic/encoder/PatternLayoutEncoder;)Lorg/pdfsam/ui/log/LogMessageBroadcaster;"
                       name="victim"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lch/qos/logback/classic/encoder/PatternLayoutEncoder">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/log/LogMessageBroadcaster</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.log.LogMessageBroadcaster.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lch/qos/logback/classic/encoder/PatternLayoutEncoder;"
                       name="encoder"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lch/qos/logback/classic/encoder/PatternLayoutEncoder</return>
                  <ops>
                     <op code="call">ch.qos.logback.classic.encoder.PatternLayoutEncoder.&lt;init&gt;</op>
                     <op code="call">ch.qos.logback.classic.encoder.PatternLayoutEncoder.setPattern</op>
                     <op code="call">org.mockito.Mockito.spy</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LogListView"><!--Package: org.pdfsam.ui.log; name: org.pdfsam.ui.log.LogListView; file: org.pdfsam.ui.log.LogListView-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/context/UserContext;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.ListView.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.context.UserContext.getNumberOfLogRows</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.setId</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.setItems</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.getSelectionModel</op>
                     <op code="get_static">javafx.scene.control.SelectionMode.MULTIPLE</op>
                     <op code="call">javafx.scene.control.MultipleSelectionModel.setSelectionMode</op>
                     <op code="call">org.pdfsam.ui.log.LogListView$1.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.setCellFactory</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/log/LogMessage;)V"
                       name="onEvent"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/log/LogMessage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.application.Platform.runLater</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="scrollToBottomIfShowing"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.log.LogListView.getItems</op>
                     <op code="call">javafx.collections.ObservableList.isEmpty</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.getScene</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.getItems</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.scrollTo</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LogMessageBroadcaster"><!--Package: org.pdfsam.ui.log; name: org.pdfsam.ui.log.LogMessageBroadcaster; file: org.pdfsam.ui.log.LogMessageBroadcaster-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lch/qos/logback/classic/encoder/PatternLayoutEncoder">encoder</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lch/qos/logback/classic/encoder/PatternLayoutEncoder;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lch/qos/logback/classic/encoder/PatternLayoutEncoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">ch.qos.logback.core.AppenderBase.&lt;init&gt;</op>
                     <op code="put">encoder</op>
                     <op code="call">org.slf4j.LoggerFactory.getILoggerFactory</op>
                     <op code="call">ch.qos.logback.classic.encoder.PatternLayoutEncoder.setContext</op>
                     <op code="call">org.pdfsam.ui.log.LogMessageBroadcaster.setContext</op>
                     <op code="call">ch.qos.logback.classic.encoder.PatternLayoutEncoder.start</op>
                     <op code="call">org.pdfsam.ui.log.LogMessageBroadcaster.getContext</op>
                     <op code="call">ch.qos.logback.classic.LoggerContext.getLogger</op>
                     <op code="call">ch.qos.logback.classic.Logger.addAppender</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lch/qos/logback/classic/spi/ILoggingEvent;)V"
                       name="append"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lch/qos/logback/classic/spi/ILoggingEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.log.LogMessageBroadcaster.isStarted</op>
                     <op code="get">encoder</op>
                     <op code="call">ch.qos.logback.classic.encoder.PatternLayoutEncoder.getLayout</op>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="get">encoder</op>
                     <op code="call">ch.qos.logback.classic.encoder.PatternLayoutEncoder.getLayout</op>
                     <op code="call">ch.qos.logback.core.Layout.doLayout</op>
                     <op code="call">org.pdfsam.ui.log.LogMessageBroadcaster.doAppendMessage</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lch/qos/logback/classic/spi/ILoggingEvent;)V"
                       name="doAppendMessage"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lch/qos/logback/classic/spi/ILoggingEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotBlank</op>
                     <op code="call">java.util.Scanner.&lt;init&gt;</op>
                     <op code="call">java.util.Scanner.hasNextLine</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">java.util.Scanner.nextLine</op>
                     <op code="call">ch.qos.logback.classic.spi.ILoggingEvent.getLevel</op>
                     <op code="call">ch.qos.logback.classic.Level.toInt</op>
                     <op code="call">org.pdfsam.ui.log.LogLevel.toLogLevel</op>
                     <op code="call">org.pdfsam.ui.log.LogMessage.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="call">java.util.Scanner.close</op>
                     <op code="call">java.util.Scanner.close</op>
                     <op code="call">java.lang.Throwable.addSuppressed</op>
                     <op code="call">ch.qos.logback.classic.spi.ILoggingEvent.getLevel</op>
                     <op code="get_static">ch.qos.logback.classic.Level.ERROR</op>
                     <op code="call">ch.qos.logback.classic.Level.isGreaterOrEqual</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.ui.log.ErrorLoggedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lch/qos/logback/classic/encoder/PatternLayoutEncoder;"
                       name="getEncoder"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lch/qos/logback/classic/encoder/PatternLayoutEncoder</return>
                  <ops>
                     <op code="get">encoder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lch/qos/logback/classic/encoder/PatternLayoutEncoder;)V"
                       name="setEncoder"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lch/qos/logback/classic/encoder/PatternLayoutEncoder">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">encoder</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LogMessageTest"><!--Package: org.pdfsam.ui.log; name: org.pdfsam.ui.log.LogMessageTest; file: org.pdfsam.ui.log.LogMessageTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="defaultLevel"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.log.LogMessage.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.INFO</op>
                     <op code="call">org.pdfsam.ui.log.LogMessage.getLevel</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="toStringTest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.WARN</op>
                     <op code="call">org.pdfsam.ui.log.LogMessage.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.log.LogMessage.toString</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LogListViewTest"><!--Package: org.pdfsam.ui.log; name: org.pdfsam.ui.log.LogListViewTest; file: org.pdfsam.ui.log.LogListViewTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeJavaFxThreadRule">javaFxThread</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/UserContext">userContext</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.InitializeJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">userContext</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="append"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.context.UserContext.getNumberOfLogRows</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.WARN</op>
                     <op code="call">org.pdfsam.ui.log.LogMessage.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.onEvent</op>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.INFO</op>
                     <op code="call">org.pdfsam.ui.log.LogMessage.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.onEvent</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Duration.seconds</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Timeout.timeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.WaitFor.waitOrTimeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Duration.seconds</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Timeout.timeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.WaitFor.waitOrTimeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Duration.seconds</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Timeout.timeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.WaitFor.waitOrTimeout</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="appendSizeConstraint"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.context.UserContext.getNumberOfLogRows</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.WARN</op>
                     <op code="call">org.pdfsam.ui.log.LogMessage.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.onEvent</op>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.INFO</op>
                     <op code="call">org.pdfsam.ui.log.LogMessage.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.onEvent</op>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.INFO</op>
                     <op code="call">org.pdfsam.ui.log.LogMessage.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.onEvent</op>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.INFO</op>
                     <op code="call">org.pdfsam.ui.log.LogMessage.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.onEvent</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Duration.seconds</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Timeout.timeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.WaitFor.waitOrTimeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Duration.seconds</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Timeout.timeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.WaitFor.waitOrTimeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Duration.seconds</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Timeout.timeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.WaitFor.waitOrTimeout</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="maxNumberOfLogRowsChanged"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.context.UserContext.getNumberOfLogRows</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.WARN</op>
                     <op code="call">org.pdfsam.ui.log.LogMessage.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.onEvent</op>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.INFO</op>
                     <op code="call">org.pdfsam.ui.log.LogMessage.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.onEvent</op>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.INFO</op>
                     <op code="call">org.pdfsam.ui.log.LogMessage.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.onEvent</op>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.INFO</op>
                     <op code="call">org.pdfsam.ui.log.LogMessage.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.onEvent</op>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.INFO</op>
                     <op code="call">org.pdfsam.ui.log.LogMessage.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.onEvent</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Duration.seconds</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Timeout.timeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.WaitFor.waitOrTimeout</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.context.UserContext.getNumberOfLogRows</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.ui.log.MaxLogRowsChangedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Duration.seconds</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Timeout.timeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.WaitFor.waitOrTimeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Duration.seconds</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Timeout.timeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.WaitFor.waitOrTimeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Duration.seconds</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Timeout.timeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.WaitFor.waitOrTimeout</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LogPane"><!--Package: org.pdfsam.ui.log; name: org.pdfsam.ui.log.LogPane; file: org.pdfsam.ui.log.LogPane-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/log/LogListView">logView</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/log/LogListView;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/log/LogListView">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.BorderPane.&lt;init&gt;</op>
                     <op code="put">logView</op>
                     <op code="call">org.pdfsam.ui.log.LogPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get">logView</op>
                     <op code="call">org.pdfsam.ui.log.LogPane.setCenter</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.MenuItem.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setId</op>
                     <op code="get_static">javafx.scene.input.KeyCode.C</op>
                     <op code="get_static">javafx.scene.input.KeyCombination.SHORTCUT_DOWN</op>
                     <op code="call">javafx.scene.input.KeyCodeCombination.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setAccelerator</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">javafx.scene.control.MenuItem.disableProperty</op>
                     <op code="call">org.pdfsam.ui.log.LogPane$1.&lt;init&gt;</op>
                     <op code="call">javafx.beans.property.BooleanProperty.bind</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.MenuItem.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setId</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">javafx.scene.control.MenuItem.disableProperty</op>
                     <op code="call">org.pdfsam.ui.log.LogPane$2.&lt;init&gt;</op>
                     <op code="call">javafx.beans.property.BooleanProperty.bind</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.MenuItem.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setId</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">javafx.scene.control.MenuItem.disableProperty</op>
                     <op code="call">javafx.scene.control.MenuItem.disableProperty</op>
                     <op code="call">javafx.beans.property.BooleanProperty.bind</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.MenuItem.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setId</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">javafx.scene.control.MenuItem.disableProperty</op>
                     <op code="call">javafx.scene.control.MenuItem.disableProperty</op>
                     <op code="call">javafx.beans.property.BooleanProperty.bind</op>
                     <op code="call">javafx.scene.control.SeparatorMenuItem.&lt;init&gt;</op>
                     <op code="get">logView</op>
                     <op code="call">javafx.scene.control.ContextMenu.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.setContextMenu</op>
                     <op code="get">logView</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.focusedProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyBooleanProperty.addListener</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveLog"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">org.pdfsam.support.io.FileType.LOG</op>
                     <op code="call">org.pdfsam.ui.io.FileChoosers.getFileChooser</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.setInitialFileName</op>
                     <op code="call">org.pdfsam.ui.log.LogPane.getScene</op>
                     <op code="call">javafx.scene.Scene.getWindow</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.SAVE</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.showDialog</op>
                     <op code="call">java.io.File.exists</op>
                     <op code="get">logView</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.getItems</op>
                     <op code="call">org.pdfsam.support.io.ObjectCollectionWriter.writeContent</op>
                     <op code="call">org.pdfsam.support.io.OngoingWrite.to</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Collection;)V"
                       name="copyLog"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Collection">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Collection.isEmpty</op>
                     <op code="call">javafx.scene.input.ClipboardContent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.io.ObjectCollectionWriter.writeContent</op>
                     <op code="call">org.pdfsam.support.io.OngoingWrite.to</op>
                     <op code="call">javafx.scene.input.Clipboard.getSystemClipboard</op>
                     <op code="call">javafx.scene.input.Clipboard.setContent</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LogPaneTest"><!--Package: org.pdfsam.ui.log; name: org.pdfsam.ui.log.LogPaneTest; file: org.pdfsam.ui.log.LogPaneTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="true"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/injector/Injector">injector</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.log.LogPaneTest$Config.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.start</op>
                     <op code="put">injector</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.getItems</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.ui.log.LogPaneTest.rightClickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.getItems</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="copy"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.pdfsam.ui.log.LogPaneTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.rightClickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="selectAll"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.log.LogPaneTest.rightClickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.getSelectionModel</op>
                     <op code="call">javafx.scene.control.MultipleSelectionModel.getSelectedItems</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.ui.log.LogPaneTest.clearStudio</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LoggerConfig"><!--Package: org.pdfsam.ui.log; name: org.pdfsam.ui.log.LoggerConfig; file: org.pdfsam.ui.log.LoggerConfig-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MaxLogRowsChangedEvent"><!--Package: org.pdfsam.ui.log; name: org.pdfsam.ui.log.MaxLogRowsChangedEvent; file: org.pdfsam.ui.log.MaxLogRowsChangedEvent-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LogPaneTest$Config"><!--Package: org.pdfsam.ui.log; name: org.pdfsam.ui.log.LogPaneTest$Config; file: org.pdfsam.ui.log.LogPaneTest$Config-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/context/UserContext;"
                       name="context"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Lorg/pdfsam/context/UserContext</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.context.UserContext.getNumberOfLogRows</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/log/LogListView;)Lorg/pdfsam/ui/log/LogPane;"
                       name="pane"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/log/LogListView">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/log/LogPane</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.log.LogPane.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/log/LogListView;"
                       name="view"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/log/LogListView</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.log.LogPaneTest$Config.context</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.INFO</op>
                     <op code="call">org.pdfsam.ui.log.LogMessage.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.onEvent</op>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.ERROR</op>
                     <op code="call">org.pdfsam.ui.log.LogMessage.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.log.LogListView.onEvent</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LogStage"><!--Package: org.pdfsam.ui.log; name: org.pdfsam.ui.log.LogStage; file: org.pdfsam.ui.log.LogStage-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Ljava/lang/String">LOGSTAGE_EVENTSTATION</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/log/LogPane;Lorg/pdfsam/ui/log/LogListView;Ljava/util/List;Lorg/pdfsam/configuration/StylesConfig;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/log/LogPane">?</arg>
                     <arg type="Lorg/pdfsam/ui/log/LogListView">?</arg>
                     <arg type="Ljava/util/List">?</arg>
                     <arg type="Lorg/pdfsam/configuration/StylesConfig">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.stage.Stage.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.BorderPane.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.BorderPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.layout.BorderPane.setCenter</op>
                     <op code="call">org.pdfsam.ui.commons.ClosePane.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.BorderPane.setBottom</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.getStylesheets</op>
                     <op code="call">org.pdfsam.configuration.StylesConfig.styles</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.Scene.setOnKeyReleased</op>
                     <op code="call">org.pdfsam.ui.log.LogStage.setScene</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.log.LogStage.setTitle</op>
                     <op code="call">org.pdfsam.ui.log.LogStage.getIcons</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.log.LogStage.setMaximized</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                     <op code="call">org.pdfsam.ui.log.LogStage.onShowingProperty</op>
                     <op code="call">javafx.beans.property.ObjectProperty.addListener</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/ShowStageRequest;)V"
                       name="requestShow"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/ShowStageRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.log.LogStage.isShowing</op>
                     <op code="call">org.pdfsam.ui.log.LogStage.centerOnScreen</op>
                     <op code="call">org.pdfsam.ui.log.LogStage.show</op>
                     <op code="call">org.pdfsam.ui.log.LogStage.requestFocus</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/HideStageRequest;)V"
                       name="requestHide"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/HideStageRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.log.LogStage.isShowing</op>
                     <op code="call">org.pdfsam.ui.log.LogStage.hide</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="UpToInfoFilter"><!--Package: org.pdfsam.ui.log; name: org.pdfsam.ui.log.UpToInfoFilter; file: org.pdfsam.ui.log.UpToInfoFilter-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">ch.qos.logback.core.filter.AbstractMatcherFilter.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lch/qos/logback/classic/spi/LoggingEvent;)Lch/qos/logback/core/spi/FilterReply;"
                       name="decide"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lch/qos/logback/classic/spi/LoggingEvent">?</arg>
                  </args>
                  <return>Lch/qos/logback/core/spi/FilterReply</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.log.UpToInfoFilter.isStarted</op>
                     <op code="call">ch.qos.logback.classic.spi.LoggingEvent.getLevel</op>
                     <op code="get_static">ch.qos.logback.classic.Level.WARN</op>
                     <op code="call">ch.qos.logback.classic.Level.isGreaterOrEqual</op>
                     <op code="get_static">ch.qos.logback.core.spi.FilterReply.NEUTRAL</op>
                     <op code="get_static">ch.qos.logback.core.spi.FilterReply.DENY</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LogMessage"><!--Package: org.pdfsam.ui.log; name: org.pdfsam.ui.log.LogMessage; file: org.pdfsam.ui.log.LogMessage-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">message</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/log/LogLevel">level</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;Lorg/pdfsam/ui/log/LogLevel;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lorg/pdfsam/ui/log/LogLevel">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="put">message</op>
                     <op code="get_static">org.pdfsam.ui.log.LogLevel.INFO</op>
                     <op code="call">org.apache.commons.lang3.ObjectUtils.defaultIfNull</op>
                     <op code="put">level</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getMessage"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">message</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/log/LogLevel;"
                       name="getLevel"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/log/LogLevel</return>
                  <ops>
                     <op code="get">level</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.log.LogMessage.getMessage</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LogMessageBroadcasterTest"><!--Package: org.pdfsam.ui.log; name: org.pdfsam.ui.log.LogMessageBroadcasterTest; file: org.pdfsam.ui.log.LogMessageBroadcasterTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeJavaFxThreadRule">threadFx</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/injector/Injector">injector</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                     <op code="call">org.pdfsam.test.InitializeJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">threadFx</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.log.LogMessageBroadcasterTest$Config.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.start</op>
                     <op code="put">injector</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="infoLog"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">ch.qos.logback.classic.spi.ILoggingEvent.getLevel</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">ch.qos.logback.classic.Level.INFO</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">ch.qos.logback.classic.spi.ILoggingEvent.getFormattedMessage</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.ui.log.LogMessageBroadcaster.start</op>
                     <op code="call">org.pdfsam.ui.log.LogMessageBroadcaster.append</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="eventOnError"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">ch.qos.logback.classic.spi.ILoggingEvent.getLevel</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">ch.qos.logback.classic.Level.ERROR</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">ch.qos.logback.classic.spi.ILoggingEvent.getFormattedMessage</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.log.LogMessageBroadcaster.start</op>
                     <op code="call">org.pdfsam.ui.log.LogMessageBroadcaster.append</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.test">
         <class id="ClearEventStudioRule"><!--Package: org.pdfsam.test; name: org.pdfsam.test.ClearEventStudioRule; file: org.pdfsam.test.ClearEventStudioRule-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Set">stations</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="([Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.junit.rules.ExternalResource.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.collection.NullSafeSet.&lt;init&gt;</op>
                     <op code="put">stations</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="get">stations</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clearAll"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.clear</op>
                     <op code="get">stations</op>
                     <op code="call">java.util.Set.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="after"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.clearAll</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DefaultPriorityDashboardItem"><!--Package: org.pdfsam.test; name: org.pdfsam.test.DefaultPriorityDashboardItem; file: org.pdfsam.test.DefaultPriorityDashboardItem-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Ljava/lang/String">ID</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="id"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="name"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/Pane;"
                       name="pane"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/layout/Pane</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/Node;"
                       name="graphic"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/Node</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="priority"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
               </method>
            </methods>
         </class>
         <class id="DefaultPriorityTestModule"><!--Package: org.pdfsam.test; name: org.pdfsam.test.DefaultPriorityTestModule; file: org.pdfsam.test.DefaultPriorityTestModule-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Ljava/lang/String">ID</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/ModuleDescriptor">descriptor</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.builder</op>
                     <op code="get_static">org.pdfsam.module.ModuleCategory.MERGE</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.category</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.description</op>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.SINGLE_PDF</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.inputTypes</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.name</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.DEFAULT</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.priority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.supportURL</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.build</op>
                     <op code="put">descriptor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="id"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/ModuleDescriptor;"
                       name="descriptor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/ModuleDescriptor</return>
                  <ops>
                     <op code="get">descriptor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/Pane;"
                       name="modulePanel"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/layout/Pane</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/Node;"
                       name="graphic"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/Node</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="onSaveWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="onLoadWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
               </method>
            </methods>
         </class>
         <class id="HighPriorityTestModule"><!--Package: org.pdfsam.test; name: org.pdfsam.test.HighPriorityTestModule; file: org.pdfsam.test.HighPriorityTestModule-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Ljava/lang/String">ID</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/ModuleDescriptor">descriptor</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.builder</op>
                     <op code="get_static">org.pdfsam.module.ModuleCategory.SECURITY</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.category</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.description</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.name</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.HIGH</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.priority</op>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.MULTIPLE_PDF</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.inputTypes</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.build</op>
                     <op code="put">descriptor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="id"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/ModuleDescriptor;"
                       name="descriptor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/ModuleDescriptor</return>
                  <ops>
                     <op code="get">descriptor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/Pane;"
                       name="modulePanel"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/layout/Pane</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/Node;"
                       name="graphic"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/Node</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="onSaveWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="onLoadWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
               </method>
            </methods>
         </class>
         <class id="HitConsumer"><!--Package: org.pdfsam.test; name: org.pdfsam.test.HitConsumer; file: org.pdfsam.test.HitConsumer-->
            <attributes>
               <attribute final="false" public="false" static="false" type="Z">hit</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">hit</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isHit"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">hit</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)V"
                       name="accept"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">hit</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="HitTestListener"><!--Package: org.pdfsam.test; name: org.pdfsam.test.HitTestListener; file: org.pdfsam.test.HitTestListener-->
            <attributes>
               <attribute final="false" public="false" static="false" type="Z">hit</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">hit</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)V"
                       name="onEvent"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">hit</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isHit"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">hit</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="InitializeAndApplyJavaFxThreadRule"><!--Package: org.pdfsam.test; name: org.pdfsam.test.InitializeAndApplyJavaFxThreadRule; file: org.pdfsam.test.InitializeAndApplyJavaFxThreadRule-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.JavaFXThreadRule.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.JavaFXInitlializer.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.JavaFXInitlializer.init</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="JavaFXInitlializer"><!--Package: org.pdfsam.test; name: org.pdfsam.test.JavaFXInitlializer; file: org.pdfsam.test.JavaFXInitlializer-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/concurrent/locks/ReentrantLock">setupLock</attribute>
               <attribute final="false" public="false" static="false" type="Z">setUp</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">java.util.concurrent.locks.ReentrantLock.&lt;init&gt;</op>
                     <op code="put">setupLock</op>
                     <op code="put">setUp</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="init"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">setUp</op>
                     <op code="get">setupLock</op>
                     <op code="call">java.util.concurrent.locks.ReentrantLock.lock</op>
                     <op code="get">setUp</op>
                     <op code="call">org.pdfsam.test.JavaFXInitlializer.setupJavaFX</op>
                     <op code="put">setUp</op>
                     <op code="get">setupLock</op>
                     <op code="call">java.util.concurrent.locks.ReentrantLock.unlock</op>
                     <op code="call">java.lang.InterruptedException.printStackTrace</op>
                     <op code="get">setupLock</op>
                     <op code="call">java.util.concurrent.locks.ReentrantLock.unlock</op>
                     <op code="get">setupLock</op>
                     <op code="call">java.util.concurrent.locks.ReentrantLock.unlock</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setupJavaFX"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">java.io.PrintStream.println</op>
                     <op code="call">java.util.concurrent.CountDownLatch.&lt;init&gt;</op>
                     <op code="call">javax.swing.SwingUtilities.invokeLater</op>
                     <op code="call">java.util.concurrent.CountDownLatch.await</op>
                     <op code="get_static">java.lang.System.out</op>
                     <op code="call">java.io.PrintStream.println</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="JavaFXThreadRule"><!--Package: org.pdfsam.test; name: org.pdfsam.test.JavaFXThreadRule; file: org.pdfsam.test.JavaFXThreadRule-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/junit/runners/model/Statement;Lorg/junit/runner/Description;)Lorg/junit/runners/model/Statement;"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/junit/runners/model/Statement">?</arg>
                     <arg type="Lorg/junit/runner/Description">?</arg>
                  </args>
                  <return>Lorg/junit/runners/model/Statement</return>
                  <ops>
                     <op code="call">org.pdfsam.test.JavaFXThreadRule$1.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="InitializeJavaFxThreadRule"><!--Package: org.pdfsam.test; name: org.pdfsam.test.InitializeJavaFxThreadRule; file: org.pdfsam.test.InitializeJavaFxThreadRule-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/junit/runners/model/Statement;Lorg/junit/runner/Description;)Lorg/junit/runners/model/Statement;"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/junit/runners/model/Statement">?</arg>
                     <arg type="Lorg/junit/runner/Description">?</arg>
                  </args>
                  <return>Lorg/junit/runners/model/Statement</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.JavaFXInitlializer.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.JavaFXInitlializer.init</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LowPriorityTestModule"><!--Package: org.pdfsam.test; name: org.pdfsam.test.LowPriorityTestModule; file: org.pdfsam.test.LowPriorityTestModule-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Ljava/lang/String">ID</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/ModuleDescriptor">descriptor</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.builder</op>
                     <op code="get_static">org.pdfsam.module.ModuleCategory.SPLIT</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.category</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.description</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.name</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.LOW</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.priority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.build</op>
                     <op code="put">descriptor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="id"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/ModuleDescriptor;"
                       name="descriptor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/ModuleDescriptor</return>
                  <ops>
                     <op code="get">descriptor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/Pane;"
                       name="modulePanel"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/layout/Pane</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/Node;"
                       name="graphic"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/Node</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="onSaveWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="onLoadWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.event">
         <class id="SetActiveDashboardItemRequest"><!--Package: org.pdfsam.ui.event; name: org.pdfsam.ui.event.SetActiveDashboardItemRequest; file: org.pdfsam.ui.event.SetActiveDashboardItemRequest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">id</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="put">id</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getActiveItemId"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">id</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SetTitleEvent"><!--Package: org.pdfsam.ui.event; name: org.pdfsam.ui.event.SetTitleEvent; file: org.pdfsam.ui.event.SetTitleEvent-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">title</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">title</op>
                     <op code="put">title</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">title</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.trim</op>
                     <op code="put">title</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getTitle"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">title</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.selection.multiple">
         <class id="SelectionTableToolbar$MoveUpButton"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.SelectionTableToolbar$MoveUpButton; file: org.pdfsam.ui.selection.multiple.SelectionTableToolbar$MoveUpButton-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.UP</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$BaseMoveSelectedButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Tooltip.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$MoveUpButton.setTooltip</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$MoveUpButton.setText</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SelectionTableToolbar$RemoveButton"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.SelectionTableToolbar$RemoveButton; file: org.pdfsam.ui.selection.multiple.SelectionTableToolbar$RemoveButton-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.ToolbarButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Tooltip.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$RemoveButton.setTooltip</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$RemoveButton.setText</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$RemoveButton.setOnAction</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$RemoveButton.setDisable</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/event/ActionEvent;)V"
                       name="removeSelected"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/event/ActionEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.ui.commons.RemoveSelectedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$RemoveButton.getOwnerModule</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/selection/multiple/SelectionChangedEvent;)V"
                       name="disableIfNoSelection"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/selection/multiple/SelectionChangedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.isClearSelection</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$RemoveButton.setDisable</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SelectionTableToolbar$MoveDownButton"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.SelectionTableToolbar$MoveDownButton; file: org.pdfsam.ui.selection.multiple.SelectionTableToolbar$MoveDownButton-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.DOWN</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$BaseMoveSelectedButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Tooltip.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$MoveDownButton.setTooltip</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$MoveDownButton.setText</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SelectionTableWithoutMoveTest"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.SelectionTableWithoutMoveTest; file: org.pdfsam.ui.selection.multiple.SelectionTableWithoutMoveTest-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.LoadingColumn.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.FileColumn.NAME</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.LongColumn.SIZE</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.IntColumn.PAGES</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.LongColumn.LAST_MODIFIED</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.PageRangesColumn.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.setId</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableWithoutMoveTest.populate</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="tearDown"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">javafx.scene.input.KeyCode.ESCAPE</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableWithoutMoveTest.type</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveDownIsMissing"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.matcher.control.TableViewMatchers.hasTableCell</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableWithoutMoveTest.rightClickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableWithoutMoveTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableWithoutMoveTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveUpIsMissing"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.matcher.control.TableViewMatchers.hasTableCell</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableWithoutMoveTest.rightClickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableWithoutMoveTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableWithoutMoveTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveBottomIsMissing"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.matcher.control.TableViewMatchers.hasTableCell</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableWithoutMoveTest.rightClickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableWithoutMoveTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableWithoutMoveTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveTopIsMissing"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.matcher.control.TableViewMatchers.hasTableCell</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableWithoutMoveTest.rightClickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableWithoutMoveTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableWithoutMoveTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/pdf/PdfDocumentDescriptor;"
                       name="populate"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Lorg/pdfsam/pdf/PdfDocumentDescriptor</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.add</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SelectionTableWithoutDuplicateTest"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.SelectionTableWithoutDuplicateTest; file: org.pdfsam.ui.selection.multiple.SelectionTableWithoutDuplicateTest-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/multiple/SelectionTable">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.LoadingColumn.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.FileColumn.NAME</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.LongColumn.SIZE</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.IntColumn.PAGES</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.LongColumn.LAST_MODIFIED</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.PageRangesColumn.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.setId</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableWithoutDuplicateTest.populate</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="tearDown"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">javafx.scene.input.KeyCode.ESCAPE</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableWithoutDuplicateTest.type</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="duplicateIsMissing"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.matcher.control.TableViewMatchers.hasTableCell</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableWithoutDuplicateTest.rightClickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableWithoutDuplicateTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableWithoutDuplicateTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/pdf/PdfDocumentDescriptor;"
                       name="populate"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Lorg/pdfsam/pdf/PdfDocumentDescriptor</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.add</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SelectionTableToolbar$BaseMoveSelectedButton"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.SelectionTableToolbar$BaseMoveSelectedButton; file: org.pdfsam.ui.selection.multiple.SelectionTableToolbar$BaseMoveSelectedButton-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/multiple/move/MoveType">type</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;Lorg/pdfsam/ui/selection/multiple/move/MoveType;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lorg/pdfsam/ui/selection/multiple/move/MoveType">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.ToolbarButton.&lt;init&gt;</op>
                     <op code="put">type</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$BaseMoveSelectedButton.setDisable</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$BaseMoveSelectedButton.setOnAction</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/event/ActionEvent;)V"
                       name="moveOnClick"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/event/ActionEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">type</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveSelectedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$BaseMoveSelectedButton.getOwnerModule</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/selection/multiple/SelectionChangedEvent;)V"
                       name="disableIfCannotMoveDown"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/selection/multiple/SelectionChangedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">type</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.canMove</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$BaseMoveSelectedButton.setDisable</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SelectionTableToolbar$ClearButton"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.SelectionTableToolbar$ClearButton; file: org.pdfsam.ui.selection.multiple.SelectionTableToolbar$ClearButton-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">ownerModule</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.SplitMenuButton.&lt;init&gt;</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$ClearButton.setId</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$ClearButton.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.BUTTON</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$ClearButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Tooltip.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$ClearButton.setTooltip</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$ClearButton.setText</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$ClearButton.setOnAction</op>
                     <op code="call">javafx.scene.control.MenuItem.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.MenuItem.setText</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$ClearButton.getItems</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/event/ActionEvent;)V"
                       name="clear"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/event/ActionEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.ui.commons.ClearModuleEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$ClearButton.getOwnerModule</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/event/ActionEvent;)V"
                       name="clearAll"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/event/ActionEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.ui.commons.ClearModuleEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$ClearButton.getOwnerModule</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getOwnerModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">ownerModule</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SelectionTableRowDataTest"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.SelectionTableRowDataTest; file: org.pdfsam.ui.selection.multiple.SelectionTableRowDataTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">eventStudioRule</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">eventStudioRule</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="empty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.toPageRangeSet</op>
                     <op code="call">java.util.Set.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.invalidate</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.release</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="duplicate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.&lt;init&gt;</op>
                     <op code="get">reverse</op>
                     <op code="call">javafx.beans.property.SimpleBooleanProperty.get</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">pace</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">pageSelection</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.get</op>
                     <op code="call">org.hamcrest.Matchers.isEmptyString</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                     <op code="get">reverse</op>
                     <op code="call">javafx.beans.property.SimpleBooleanProperty.set</op>
                     <op code="get">pace</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.set</op>
                     <op code="get">pageSelection</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.set</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.duplicate</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.retain</op>
                     <op code="get">reverse</op>
                     <op code="call">javafx.beans.property.SimpleBooleanProperty.get</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">pace</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">pageSelection</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SelectionTableRowData"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.SelectionTableRowData; file: org.pdfsam.ui.selection.multiple.SelectionTableRowData-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">descriptor</attribute>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Ljavafx/beans/property/SimpleStringProperty">pageSelection</attribute>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Ljavafx/beans/property/SimpleStringProperty">pace</attribute>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Ljavafx/beans/property/SimpleBooleanProperty">reverse</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/pdf/PdfDocumentDescriptor;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.&lt;init&gt;</op>
                     <op code="put">pageSelection</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.&lt;init&gt;</op>
                     <op code="put">pace</op>
                     <op code="call">javafx.beans.property.SimpleBooleanProperty.&lt;init&gt;</op>
                     <op code="put">reverse</op>
                     <op code="put">descriptor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/selection/multiple/SelectionTableRowData;"
                       name="duplicate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/selection/multiple/SelectionTableRowData</return>
                  <ops>
                     <op code="get">descriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.retain</op>
                     <op code="get">descriptor</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.&lt;init&gt;</op>
                     <op code="get">pageSelection</op>
                     <op code="get">pageSelection</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.get</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.set</op>
                     <op code="get">reverse</op>
                     <op code="get">reverse</op>
                     <op code="call">javafx.beans.property.SimpleBooleanProperty.get</op>
                     <op code="call">javafx.beans.property.SimpleBooleanProperty.set</op>
                     <op code="get">pace</op>
                     <op code="get">pace</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.get</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.set</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/pdf/PdfDocumentDescriptor;"
                       name="descriptor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/pdf/PdfDocumentDescriptor</return>
                  <ops>
                     <op code="get">descriptor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">descriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.release</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Set;"
                       name="toPageRangeSet"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/Set</return>
                  <ops>
                     <op code="get">pageSelection</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.get</op>
                     <op code="call">org.pdfsam.support.params.ConversionUtils.toPageRangeSet</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SelectionChangedEvent"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.SelectionChangedEvent; file: org.pdfsam.ui.selection.multiple.SelectionChangedEvent-->
            <attributes>
               <attribute final="false" public="false" static="false" type="I">top</attribute>
               <attribute final="false" public="false" static="false" type="I">bottom</attribute>
               <attribute final="false" public="false" static="false" type="I">totalRows</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/Collection;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/Collection">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">top</op>
                     <op code="put">bottom</op>
                     <op code="put">totalRows</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">java.util.Collection.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">top</op>
                     <op code="put">bottom</op>
                     <op code="put">totalRows</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isClearSelection"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">top</op>
                     <op code="get">bottom</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isSingleSelection"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.isClearSelection</op>
                     <op code="get">top</op>
                     <op code="get">bottom</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="getSingleSelection"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.isSingleSelection</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireState</op>
                     <op code="get">top</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/selection/multiple/move/MoveType;)Z"
                       name="canMove"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/selection/multiple/move/MoveType">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.isClearSelection</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.SelectionChangedEvent$1.$SwitchMap$org$pdfsam$ui$selection$multiple$move$MoveType</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveType.ordinal</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.isSingleSelection</op>
                     <op code="get">bottom</op>
                     <op code="get">totalRows</op>
                     <op code="get">bottom</op>
                     <op code="get">totalRows</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.isSingleSelection</op>
                     <op code="get">top</op>
                     <op code="get">top</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="getTotalRows"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">totalRows</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/selection/multiple/SelectionChangedEvent;"
                       name="clearSelectionEvent"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/selection/multiple/SelectionChangedEvent</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Collection;)Lorg/pdfsam/ui/selection/multiple/SelectionChangedEvent;"
                       name="select"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Collection">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/selection/multiple/SelectionChangedEvent</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)Lorg/pdfsam/ui/selection/multiple/SelectionChangedEvent;"
                       name="ofTotalRows"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/selection/multiple/SelectionChangedEvent</return>
                  <ops>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireArg</op>
                     <op code="put">totalRows</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PageRangesColumnTest"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.PageRangesColumnTest; file: org.pdfsam.ui.selection.multiple.PageRangesColumnTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getObservableValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.&lt;init&gt;</op>
                     <op code="get">pageSelection</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.set</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.PageRangesColumn.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.PageRangesColumn.getObservableValue</op>
                     <op code="call">javafx.beans.value.ObservableValue.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getNullTextValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.PageRangesColumn.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.PageRangesColumn.getTextValue</op>
                     <op code="call">org.hamcrest.Matchers.isEmptyString</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="comparator"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.PageRangesColumn.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.PageRangesColumn.comparator</op>
                     <op code="call">java.util.Comparator.compare</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SelectionTableToolbarTest"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.SelectionTableToolbarTest; file: org.pdfsam.ui.selection.multiple.SelectionTableToolbarTest-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/multiple/SelectionTableToolbar">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar.setId</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbarTest.clickOn</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clearAllSettings"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbarTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">javafx.scene.control.SplitMenuButton.getChildrenUnmodifiable</op>
                     <op code="call">javafx.collections.ObservableList.iterator</op>
                     <op code="call">java.util.Iterator.hasNext</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="call">javafx.scene.Node.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.contains</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbarTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="get">clearEverything</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="add"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="remove"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbarTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.query</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbarTest.enableByFiringSelectionChange</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbarTest.clickOn</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbarTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.query</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbarTest.enableByFiringSelectionChange</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbarTest.clickOn</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveDown"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbarTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.query</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbarTest.enableByFiringSelectionChange</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbarTest.clickOn</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/scene/Node;)V"
                       name="enableByFiringSelectionChange"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljavafx/scene/Node">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.Node.isDisabled</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">javafx.scene.Node.isDisabled</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SelectionTableToolbarWithoutMoveTest"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.SelectionTableToolbarWithoutMoveTest; file: org.pdfsam.ui.selection.multiple.SelectionTableToolbarWithoutMoveTest-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/multiple/SelectionTableToolbar">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar.setId</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveDownIsMissing"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbarWithoutMoveTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbarWithoutMoveTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveUpIsMissing"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbarWithoutMoveTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbarWithoutMoveTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PaceColumn"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.PaceColumn; file: org.pdfsam.ui.selection.multiple.PaceColumn-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getColumnTitle"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/selection/multiple/SelectionTableRowData;)Ljavafx/beans/value/ObservableValue;"
                       name="getObservableValue"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/selection/multiple/SelectionTableRowData">?</arg>
                  </args>
                  <return>Ljavafx/beans/value/ObservableValue</return>
                  <ops>
                     <op code="get">pace</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Ljava/lang/String;"
                       name="getTextValue"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Comparator;"
                       name="comparator"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/Comparator</return>
                  <ops>
                     <op code="call">java.util.Comparator.naturalOrder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/control/TableColumn;"
                       name="getTableColumn"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/control/TableColumn</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableColumn.getTableColumn</op>
                     <op code="call">javafx.scene.control.TableColumn.setEditable</op>
                     <op code="call">javafx.scene.control.TableColumn.setOnEditCommit</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/util/Callback;"
                       name="cellFactory"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/util/Callback</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.PaceColumn$1.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PaceColumnTest"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.PaceColumnTest; file: org.pdfsam.ui.selection.multiple.PaceColumnTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getObservableValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.&lt;init&gt;</op>
                     <op code="get">pace</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.set</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.PaceColumn.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.PaceColumn.getObservableValue</op>
                     <op code="call">javafx.beans.value.ObservableValue.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getNullTextValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.PaceColumn.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.PaceColumn.getTextValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="comparator"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.PaceColumn.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.PaceColumn.comparator</op>
                     <op code="call">java.util.Comparator.compare</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ReverseColumn"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.ReverseColumn; file: org.pdfsam.ui.selection.multiple.ReverseColumn-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getColumnTitle"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/control/TableColumn;"
                       name="getTableColumn"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/control/TableColumn</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.ReverseColumn.getColumnTitle</op>
                     <op code="call">javafx.scene.control.TableColumn.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.cell.CheckBoxTableCell.forTableColumn</op>
                     <op code="call">javafx.scene.control.TableColumn.setCellFactory</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.ReverseColumn$1.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.TableColumn.setCellValueFactory</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SelectionTableToolbar"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.SelectionTableToolbar; file: org.pdfsam.ui.selection.multiple.SelectionTableToolbar-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">ownerModule</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;Z)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.ToolBar.&lt;init&gt;</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar.getItems</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$AddButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$ClearButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$RemoveButton.&lt;init&gt;</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar.getItems</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$MoveUpButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$MoveDownButton.&lt;init&gt;</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getOwnerModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">ownerModule</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PageRangesColumn"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.PageRangesColumn; file: org.pdfsam.ui.selection.multiple.PageRangesColumn-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">tooltipMessage</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="put">tooltipMessage</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="put">tooltipMessage</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNoneBlank</op>
                     <op code="put">tooltipMessage</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getColumnTitle"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/selection/multiple/SelectionTableRowData;)Ljavafx/beans/value/ObservableValue;"
                       name="getObservableValue"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/selection/multiple/SelectionTableRowData">?</arg>
                  </args>
                  <return>Ljavafx/beans/value/ObservableValue</return>
                  <ops>
                     <op code="get">pageSelection</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Ljava/lang/String;"
                       name="getTextValue"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Comparator;"
                       name="comparator"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/Comparator</return>
                  <ops>
                     <op code="call">java.util.Comparator.naturalOrder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/control/TableColumn;"
                       name="getTableColumn"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/control/TableColumn</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableColumn.getTableColumn</op>
                     <op code="call">javafx.scene.control.TableColumn.setEditable</op>
                     <op code="call">javafx.scene.control.TableColumn.setOnEditCommit</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/util/Callback;"
                       name="cellFactory"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/util/Callback</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.PageRangesColumn$1.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DuplicateSelectedEvent"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.DuplicateSelectedEvent; file: org.pdfsam.ui.selection.multiple.DuplicateSelectedEvent-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LongColumnTest"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.LongColumnTest; file: org.pdfsam.ui.selection.multiple.LongColumnTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="comparators"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.LongColumn.values</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getNullTextValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.LongColumn.values</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="size"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.LongColumn.SIZE</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.LongColumn.getTextValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="lastModified"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.LongColumn.LAST_MODIFIED</op>
                     <op code="call">java.lang.System.currentTimeMillis</op>
                     <op code="call">java.lang.Long.valueOf</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.LongColumn.getTextValue</op>
                     <op code="call">org.hamcrest.Matchers.any</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getSizeObservableValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.&lt;init&gt;</op>
                     <op code="call">java.io.File.length</op>
                     <op code="call">java.lang.Long.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Long.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">java.lang.Long.valueOf</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.LongColumn.SIZE</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.LongColumn.getObservableValue</op>
                     <op code="call">javafx.beans.value.ObservableValue.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getLastModifiedObservableValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.&lt;init&gt;</op>
                     <op code="call">java.io.File.lastModified</op>
                     <op code="call">java.lang.Long.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Long.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">java.lang.Long.valueOf</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.LongColumn.LAST_MODIFIED</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.LongColumn.getObservableValue</op>
                     <op code="call">javafx.beans.value.ObservableValue.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LoadingColumn$LoadingStatusCell"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.LoadingColumn$LoadingStatusCell; file: org.pdfsam.ui.selection.multiple.LoadingColumn$LoadingStatusCell-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/LoadingStatusIndicatorUpdater">updater</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/multiple/LoadingColumn">this$0</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/selection/multiple/LoadingColumn;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/ui/selection/multiple/LoadingColumn">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">this$0</op>
                     <op code="call">javafx.scene.control.TableCell.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.LoadingColumn$LoadingStatusCell.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get_static">javafx.scene.input.MouseEvent.MOUSE_CLICKED</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.LoadingColumn$LoadingStatusCell.addEventFilter</op>
                     <op code="call">org.pdfsam.ui.selection.LoadingStatusIndicatorUpdater.&lt;init&gt;</op>
                     <op code="put">updater</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/pdf/PdfDescriptorLoadingStatus;Z)V"
                       name="updateItem"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/pdf/PdfDescriptorLoadingStatus">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.TableCell.updateItem</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.LoadingColumn.LOG</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.LoadingColumn$LoadingStatusCell.getTableRow</op>
                     <op code="call">javafx.scene.control.TableRow.getIndex</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="get">updater</op>
                     <op code="call">org.pdfsam.ui.selection.LoadingStatusIndicatorUpdater.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/pdf/PdfDocumentDescriptor;"
                       name="getPdfDocumentDescriptor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/pdf/PdfDocumentDescriptor</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.LoadingColumn$LoadingStatusCell.getTableRow</op>
                     <op code="call">javafx.scene.control.TableRow.getItem</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.descriptor</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MultipleSelectionPane"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.MultipleSelectionPane; file: org.pdfsam.ui.selection.multiple.MultipleSelectionPane-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">ownerModule</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/multiple/SelectionTable">table</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;ZZ[Lorg/pdfsam/ui/selection/multiple/TableColumnProvider;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Z">?</arg>
                     <arg type="Z">?</arg>
                     <arg type="Lorg/pdfsam/ui/selection/multiple/TableColumnProvider">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.BorderPane.&lt;init&gt;</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireArg</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.MultipleSelectionPane.setTop</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.&lt;init&gt;</op>
                     <op code="put">table</op>
                     <op code="get">table</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.MultipleSelectionPane.setCenter</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getOwnerModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">ownerModule</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/selection/multiple/SelectionTable;"
                       name="table"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/selection/multiple/SelectionTable</return>
                  <ops>
                     <op code="get">table</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="saveStateTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">table</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.saveStateTo</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">table</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.restoreStateFrom</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SelectionTableToolbar$AddButton"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.SelectionTableToolbar$AddButton; file: org.pdfsam.ui.selection.multiple.SelectionTableToolbar$AddButton-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">ownerModule</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.SplitMenuButton.&lt;init&gt;</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$AddButton.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.BUTTON</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$AddButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Tooltip.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$AddButton.setTooltip</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$AddButton.setText</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$AddButton.setOnAction</op>
                     <op code="call">javafx.scene.control.MenuItem.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.MenuItem.setText</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$AddButton.getItems</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/event/ActionEvent;)V"
                       name="loadDocuments"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/event/ActionEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">org.pdfsam.support.io.FileType.PDF</op>
                     <op code="call">org.pdfsam.ui.io.FileChoosers.getFileChooser</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$AddButton.getScene</op>
                     <op code="call">javafx.scene.Scene.getWindow</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.showOpenMultipleDialog</op>
                     <op code="call">java.util.List.isEmpty</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$AddButton.getOwnerModule</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.&lt;init&gt;</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$AddButton.getOwnerModule</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/event/ActionEvent;)V"
                       name="loadList"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/event/ActionEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">org.pdfsam.support.io.FileType.CSV</op>
                     <op code="get_static">org.pdfsam.support.io.FileType.TXT</op>
                     <op code="call">org.pdfsam.ui.io.FileChoosers.getFileChooser</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$AddButton.getScene</op>
                     <op code="call">javafx.scene.Scene.getWindow</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.OPEN</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.showDialog</op>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableToolbar$AddButton.getOwnerModule</op>
                     <op code="call">java.io.File.toPath</op>
                     <op code="call">org.pdfsam.pdf.PdfFilesListLoadRequest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getOwnerModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">ownerModule</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LoadingColumnTest"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.LoadingColumnTest; file: org.pdfsam.ui.selection.multiple.LoadingColumnTest-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/multiple/LoadingColumn">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.LoadingColumn.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getObservableValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.INITIAL</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.LoadingColumn.getObservableValue</op>
                     <op code="call">javafx.beans.value.ObservableValue.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.REQUESTED</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.moveStatusTo</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.REQUESTED</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.LoadingColumn.getObservableValue</op>
                     <op code="call">javafx.beans.value.ObservableValue.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getNullTextValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.LoadingColumn.getTextValue</op>
                     <op code="call">org.hamcrest.Matchers.isEmptyString</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getTextValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.pdf.PdfDescriptorLoadingStatus.values</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LoadingColumn"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.LoadingColumn; file: org.pdfsam.ui.selection.multiple.LoadingColumn-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">ownerModule</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="put">ownerModule</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getOwnerModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">ownerModule</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getColumnTitle"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/selection/multiple/SelectionTableRowData;)Ljavafx/beans/value/ObservableValue;"
                       name="getObservableValue"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/selection/multiple/SelectionTableRowData">?</arg>
                  </args>
                  <return>Ljavafx/beans/value/ObservableValue</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.descriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.loadingStatus</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/pdf/PdfDescriptorLoadingStatus;)Ljava/lang/String;"
                       name="getTextValue"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/pdf/PdfDescriptorLoadingStatus">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.pdfsam.pdf.PdfDescriptorLoadingStatus.getIcon</op>
                     <op code="call">org.pdfsam.pdf.PdfDescriptorLoadingStatus.getIcon</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.toString</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/util/Callback;"
                       name="cellFactory"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/util/Callback</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.LoadingColumn$1.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Comparator;"
                       name="comparator"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/Comparator</return>
                  <ops>
                     <op code="call">java.util.Comparator.naturalOrder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/control/TableColumn;"
                       name="getTableColumn"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/control/TableColumn</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.LoadingColumn.getColumnTitle</op>
                     <op code="call">javafx.scene.control.TableColumn.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.LoadingColumn.cellFactory</op>
                     <op code="call">javafx.scene.control.TableColumn.setCellFactory</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.LoadingColumn.cellValueFactory</op>
                     <op code="call">javafx.scene.control.TableColumn.setCellValueFactory</op>
                     <op code="call">javafx.scene.control.TableColumn.setComparator</op>
                     <op code="call">javafx.scene.control.TableColumn.setSortable</op>
                     <op code="call">javafx.scene.control.TableColumn.setMaxWidth</op>
                     <op code="call">javafx.scene.control.TableColumn.setMinWidth</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.ui.selection.multiple.LoadingColumn.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="IndexColumn"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.IndexColumn; file: org.pdfsam.ui.selection.multiple.IndexColumn-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.TableColumn.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.IndexColumn.setComparator</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.IndexColumn.setSortable</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.IndexColumn.setMinWidth</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.IndexColumn.setMaxWidth</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.IndexColumn$1.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.IndexColumn.setCellFactory</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.IndexColumn$2.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.IndexColumn.setCellValueFactory</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="IntegerColumnTest"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.IntegerColumnTest; file: org.pdfsam.ui.selection.multiple.IntegerColumnTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="comparators"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.IntColumn.values</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getNullTextValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.IntColumn.values</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="negativePages"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.IntColumn.PAGES</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.IntColumn.getTextValue</op>
                     <op code="call">org.hamcrest.Matchers.isEmptyString</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="pages"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.IntColumn.PAGES</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.IntColumn.getTextValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getPagesObservableValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.pages</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.IntColumn.PAGES</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.IntColumn.getObservableValue</op>
                     <op code="call">javafx.beans.value.ObservableValue.getValue</op>
                     <op code="call">java.lang.Integer.intValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="FileColumnTest"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.FileColumnTest; file: org.pdfsam.ui.selection.multiple.FileColumnTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getObservableValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.FileColumn.NAME</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.FileColumn.getObservableValue</op>
                     <op code="call">javafx.beans.value.ObservableValue.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getNullTextValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.FileColumn.NAME</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.FileColumn.getTextValue</op>
                     <op code="call">org.hamcrest.Matchers.isEmptyString</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getTextValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">java.io.File.getName</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.FileColumn.NAME</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.FileColumn.getTextValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="comparator"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.FileColumn.NAME</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.FileColumn.comparator</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">java.util.Comparator.compare</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.FileColumn.NAME</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.FileColumn.comparator</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">java.util.Comparator.compare</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.FileColumn.NAME</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.FileColumn.comparator</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">java.util.Comparator.compare</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.FileColumn.NAME</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.FileColumn.comparator</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">java.util.Comparator.compare</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.FileColumn.NAME</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.FileColumn.comparator</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">java.util.Comparator.compare</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.FileColumn.NAME</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.FileColumn.comparator</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">java.util.Comparator.compare</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.FileColumn.NAME</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.FileColumn.comparator</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">java.util.Comparator.compare</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SelectionTable"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.SelectionTable; file: org.pdfsam.ui.selection.multiple.SelectionTable-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljavafx/scene/input/DataFormat">DND_TABLE_SELECTION_MIME_TYPE</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">ownerModule</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">placeHolder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/PasswordFieldPopup">passwordPopup</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">selectionChangedConsumer</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;ZZ[Lorg/pdfsam/ui/selection/multiple/TableColumnProvider;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Z">?</arg>
                     <arg type="Z">?</arg>
                     <arg type="Lorg/pdfsam/ui/selection/multiple/TableColumnProvider">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.TableView.&lt;init&gt;</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="put">placeHolder</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.setEditable</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="get_static">javafx.scene.control.SelectionMode.MULTIPLE</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.setSelectionMode</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getColumns</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.IndexColumn.&lt;init&gt;</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.SelectionTable.CONSTRAINED_RESIZE_POLICY</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.setColumnResizePolicy</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.initDragAndDrop</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.getSelectedIndices</op>
                     <op code="call">javafx.collections.ObservableList.addListener</op>
                     <op code="get">placeHolder</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">placeHolder</op>
                     <op code="call">javafx.scene.control.Label.setDisable</op>
                     <op code="get">placeHolder</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.setPlaceholder</op>
                     <op code="get">ownerModule</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopup.&lt;init&gt;</op>
                     <op code="put">passwordPopup</op>
                     <op code="call">javafx.scene.control.ContextMenu.&lt;init&gt;</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.stream.Stream.anyMatch</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.initTopSectionContextMenu</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.initItemsSectionContextMenu</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.initBottomSectionContextMenu</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.setContextMenu</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/scene/control/ContextMenu;Z)V"
                       name="initTopSectionContextMenu"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljavafx/scene/control/ContextMenu">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.AIRPLANE_LANDING</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.createMenuItem</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="get_static">javafx.scene.input.KeyCode.O</op>
                     <op code="get_static">javafx.scene.input.KeyCombination.ALT_DOWN</op>
                     <op code="call">javafx.scene.input.KeyCodeCombination.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setAccelerator</op>
                     <op code="put">selectionChangedConsumer</op>
                     <op code="call">javafx.scene.control.ContextMenu.getItems</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.FORMAT_INDENT_INCREASE</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.createMenuItem</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="get_static">javafx.scene.input.KeyCode.R</op>
                     <op code="get_static">javafx.scene.input.KeyCombination.CONTROL_DOWN</op>
                     <op code="call">javafx.scene.input.KeyCodeCombination.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setAccelerator</op>
                     <op code="get">selectionChangedConsumer</op>
                     <op code="call">java.util.function.Consumer.andThen</op>
                     <op code="put">selectionChangedConsumer</op>
                     <op code="call">javafx.scene.control.ContextMenu.getItems</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.control.ContextMenu.getItems</op>
                     <op code="call">javafx.scene.control.SeparatorMenuItem.&lt;init&gt;</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/scene/control/ContextMenu;ZZ)V"
                       name="initItemsSectionContextMenu"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljavafx/scene/control/ContextMenu">?</arg>
                     <arg type="Z">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.MINUS</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.createMenuItem</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="get_static">javafx.scene.input.KeyCode.DELETE</op>
                     <op code="call">javafx.scene.input.KeyCodeCombination.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setAccelerator</op>
                     <op code="call">javafx.scene.control.ContextMenu.getItems</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">selectionChangedConsumer</op>
                     <op code="call">java.util.function.Consumer.andThen</op>
                     <op code="put">selectionChangedConsumer</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.CHEVRON_DOUBLE_UP</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.createMenuItem</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.CHEVRON_UP</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.createMenuItem</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.CHEVRON_DOWN</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.createMenuItem</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.CHEVRON_DOUBLE_DOWN</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.createMenuItem</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">javafx.scene.control.ContextMenu.getItems</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get_static">javafx.scene.input.KeyCode.END</op>
                     <op code="get_static">javafx.scene.input.KeyCombination.ALT_DOWN</op>
                     <op code="call">javafx.scene.input.KeyCodeCombination.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setAccelerator</op>
                     <op code="get_static">javafx.scene.input.KeyCode.DOWN</op>
                     <op code="get_static">javafx.scene.input.KeyCombination.ALT_DOWN</op>
                     <op code="call">javafx.scene.input.KeyCodeCombination.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setAccelerator</op>
                     <op code="get_static">javafx.scene.input.KeyCode.UP</op>
                     <op code="get_static">javafx.scene.input.KeyCombination.ALT_DOWN</op>
                     <op code="call">javafx.scene.input.KeyCodeCombination.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setAccelerator</op>
                     <op code="get_static">javafx.scene.input.KeyCode.HOME</op>
                     <op code="get_static">javafx.scene.input.KeyCombination.ALT_DOWN</op>
                     <op code="call">javafx.scene.input.KeyCodeCombination.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setAccelerator</op>
                     <op code="get">selectionChangedConsumer</op>
                     <op code="call">java.util.function.Consumer.andThen</op>
                     <op code="put">selectionChangedConsumer</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.CONTENT_DUPLICATE</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.createMenuItem</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="get_static">javafx.scene.input.KeyCode.DIGIT2</op>
                     <op code="get_static">javafx.scene.input.KeyCombination.ALT_DOWN</op>
                     <op code="call">javafx.scene.input.KeyCodeCombination.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setAccelerator</op>
                     <op code="call">javafx.scene.control.ContextMenu.getItems</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">selectionChangedConsumer</op>
                     <op code="call">java.util.function.Consumer.andThen</op>
                     <op code="put">selectionChangedConsumer</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/scene/control/ContextMenu;)V"
                       name="initBottomSectionContextMenu"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljavafx/scene/control/ContextMenu">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.CONTENT_COPY</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.createMenuItem</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.INFORMATION_OUTLINE</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.createMenuItem</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.FILE_PDF_BOX</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.createMenuItem</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.FOLDER_OUTLINE</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.createMenuItem</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="get_static">javafx.scene.input.KeyCode.C</op>
                     <op code="get_static">javafx.scene.input.KeyCombination.SHORTCUT_DOWN</op>
                     <op code="call">javafx.scene.input.KeyCodeCombination.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setAccelerator</op>
                     <op code="get_static">javafx.scene.input.KeyCode.P</op>
                     <op code="get_static">javafx.scene.input.KeyCombination.ALT_DOWN</op>
                     <op code="call">javafx.scene.input.KeyCodeCombination.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setAccelerator</op>
                     <op code="get_static">javafx.scene.input.KeyCode.O</op>
                     <op code="get_static">javafx.scene.input.KeyCombination.SHORTCUT_DOWN</op>
                     <op code="call">javafx.scene.input.KeyCodeCombination.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setAccelerator</op>
                     <op code="get_static">javafx.scene.input.KeyCode.O</op>
                     <op code="get_static">javafx.scene.input.KeyCombination.SHORTCUT_DOWN</op>
                     <op code="get_static">javafx.scene.input.KeyCombination.ALT_DOWN</op>
                     <op code="call">javafx.scene.input.KeyCodeCombination.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setAccelerator</op>
                     <op code="call">javafx.scene.control.ContextMenu.getItems</op>
                     <op code="call">javafx.scene.control.SeparatorMenuItem.&lt;init&gt;</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get">selectionChangedConsumer</op>
                     <op code="call">java.util.function.Consumer.andThen</op>
                     <op code="put">selectionChangedConsumer</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lde/jensd/fx/glyphs/materialdesignicons/MaterialDesignIcon;)Ljavafx/scene/control/MenuItem;"
                       name="createMenuItem"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lde/jensd/fx/glyphs/materialdesignicons/MaterialDesignIcon">?</arg>
                  </args>
                  <return>Ljavafx/scene/control/MenuItem</return>
                  <ops>
                     <op code="call">javafx.scene.control.MenuItem.&lt;init&gt;</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.get</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.setIcon</op>
                     <op code="call">javafx.scene.control.MenuItem.setDisable</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)V"
                       name="initDragAndDrop"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.setOnDragOver</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.setOnDragEntered</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.setOnDragExited</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.setOnDragDropped</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.setRowFactory</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/scene/input/DragEvent;Ljava/util/function/Consumer;)V"
                       name="dragConsume"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljavafx/scene/input/DragEvent">?</arg>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.input.DragEvent.getDragboard</op>
                     <op code="call">javafx.scene.input.Dragboard.hasFiles</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="call">javafx.scene.input.DragEvent.consume</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/function/Consumer;"
                       name="onDragOverConsumer"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Ljava/util/function/Consumer</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/function/Consumer;"
                       name="onDragEnteredConsumer"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Ljava/util/function/Consumer</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/scene/input/DragEvent;)V"
                       name="onDragExited"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljavafx/scene/input/DragEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">placeHolder</op>
                     <op code="call">javafx.scene.control.Label.setDisable</op>
                     <op code="call">javafx.scene.input.DragEvent.consume</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/function/Consumer;"
                       name="onDragDropped"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Ljava/util/function/Consumer</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getOwnerModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">ownerModule</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/pdf/PdfLoadRequestEvent;)V"
                       name="onLoadDocumentsRequest"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/pdf/PdfLoadRequestEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.getDocuments</op>
                     <op code="call">java.util.Collection.stream</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Collectors.toList</op>
                     <op code="call">java.util.stream.Stream.collect</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.getDocuments</op>
                     <op code="call">java.util.Collection.stream</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/selection/multiple/DuplicateSelectedEvent;)V"
                       name="onDuplicate"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/selection/multiple/DuplicateSelectedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.SelectionTable.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.getSelectedItems</op>
                     <op code="call">javafx.collections.ObservableList.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/ClearModuleEvent;)V"
                       name="onClear"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/ClearModuleEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.forEach</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.clearSelection</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.clear</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/RemoveSelectedEvent;)V"
                       name="onRemoveSelected"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/RemoveSelectedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Collections.reverseOrder</op>
                     <op code="call">java.util.TreeSet.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.getSelectedIndices</op>
                     <op code="call">java.util.SortedSet.addAll</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.SelectionTable.LOG</op>
                     <op code="call">java.util.SortedSet.size</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="call">java.util.SortedSet.forEach</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.requestFocus</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/selection/multiple/move/MoveSelectedEvent;)V"
                       name="onMoveSelected"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/selection/multiple/move/MoveSelectedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSortOrder</op>
                     <op code="call">javafx.collections.ObservableList.clear</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.getSelectedIndices</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">javafx.collections.ObservableList.toArray</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getFocusModel</op>
                     <op code="call">javafx.scene.control.TableView$TableViewFocusModel.getFocusedIndex</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.clearSelection</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveSelectedEvent.getType</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveType.move</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.SelectionAndFocus.NULL</op>
                     <op code="call">java.lang.Object.equals</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.SelectionTable.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.SelectionAndFocus.getRow</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.SelectionAndFocus.getRows</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.selectIndices</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getFocusModel</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.SelectionAndFocus.getFocus</op>
                     <op code="call">javafx.scene.control.TableView$TableViewFocusModel.focus</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.SelectionAndFocus.getFocus</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.scrollTo</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/SetPageRangesRequest;)V"
                       name="onSetPageRanges"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/SetPageRangesRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/selection/ShowPasswordFieldPopupRequest;)V"
                       name="showPasswordFieldPopup"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/selection/ShowPasswordFieldPopupRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getScene</op>
                     <op code="call">javafx.scene.Scene.getWindow</op>
                     <op code="call">javafx.stage.Window.isShowing</op>
                     <op code="call">org.pdfsam.ui.selection.ShowPasswordFieldPopupRequest.getRequestingNode</op>
                     <op code="call">org.pdfsam.ui.selection.ShowPasswordFieldPopupRequest.getRequestingNode</op>
                     <op code="call">javafx.scene.layout.Region.getWidth</op>
                     <op code="call">org.pdfsam.ui.selection.ShowPasswordFieldPopupRequest.getRequestingNode</op>
                     <op code="call">javafx.scene.layout.Region.getHeight</op>
                     <op code="call">javafx.scene.layout.Region.localToScene</op>
                     <op code="call">javafx.stage.Window.getX</op>
                     <op code="call">javafx.scene.Scene.getX</op>
                     <op code="call">javafx.geometry.Point2D.getX</op>
                     <op code="call">java.lang.Math.round</op>
                     <op code="call">javafx.stage.Window.getY</op>
                     <op code="call">javafx.scene.Scene.getY</op>
                     <op code="call">javafx.geometry.Point2D.getY</op>
                     <op code="call">java.lang.Math.round</op>
                     <op code="get">passwordPopup</op>
                     <op code="call">org.pdfsam.ui.selection.ShowPasswordFieldPopupRequest.getPdfDescriptor</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopup.showFor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="copySelectedToClipboard"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.input.ClipboardContent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.getSelectedItems</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Collectors.toList</op>
                     <op code="call">java.util.stream.Stream.collect</op>
                     <op code="call">org.pdfsam.support.io.ObjectCollectionWriter.writeContent</op>
                     <op code="call">org.pdfsam.support.io.OngoingWrite.to</op>
                     <op code="call">javafx.scene.input.Clipboard.getSystemClipboard</op>
                     <op code="call">javafx.scene.input.Clipboard.setContent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="saveStateTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getId</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">java.lang.Integer.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">java.util.stream.IntStream.range</op>
                     <op code="call">java.util.stream.IntStream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.onClear</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getId</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">java.lang.Integer.intValue</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getOwnerModule</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.&lt;init&gt;</op>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="call">java.util.stream.IntStream.range</op>
                     <op code="call">java.util.stream.IntStream.forEach</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.ui.selection.multiple.SelectionTable.LOG</op>
                     <op code="call">javafx.scene.input.DataFormat.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.ui.selection.multiple.SelectionTable.DND_TABLE_SELECTION_MIME_TYPE</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="TooltippedTextFieldTableCell"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.TooltippedTextFieldTableCell; file: org.pdfsam.ui.selection.multiple.TooltippedTextFieldTableCell-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Tooltip">tooltip</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/TextField">textField</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/util/StringConverter">converter</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Z)V"
                       name="updateItem"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.TableCell.updateItem</op>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="get">tooltip</op>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="get">tooltip</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.TooltippedTextFieldTableCell.setTooltip</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.TooltippedTextFieldTableCell.setTooltip</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.TableCell.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Tooltip.&lt;init&gt;</op>
                     <op code="put">tooltip</op>
                     <op code="call">javafx.scene.control.TextField.&lt;init&gt;</op>
                     <op code="put">textField</op>
                     <op code="call">javafx.util.converter.DefaultStringConverter.&lt;init&gt;</op>
                     <op code="put">converter</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="get">tooltip</op>
                     <op code="call">javafx.scene.control.Tooltip.setText</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.TooltippedTextFieldTableCell.itemProperty</op>
                     <op code="call">javafx.beans.property.ObjectProperty.addListener</op>
                     <op code="get">textField</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.TooltippedTextFieldTableCell.setGraphic</op>
                     <op code="get_static">javafx.scene.control.ContentDisplay.TEXT_ONLY</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.TooltippedTextFieldTableCell.setContentDisplay</op>
                     <op code="get">textField</op>
                     <op code="call">javafx.scene.control.TextField.setOnAction</op>
                     <op code="get">textField</op>
                     <op code="call">javafx.scene.control.TextField.focusedProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyBooleanProperty.addListener</op>
                     <op code="get">textField</op>
                     <op code="get_static">javafx.scene.input.KeyEvent.KEY_PRESSED</op>
                     <op code="call">javafx.scene.control.TextField.addEventFilter</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="startEdit"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.TableCell.startEdit</op>
                     <op code="get">textField</op>
                     <op code="get">converter</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.TooltippedTextFieldTableCell.getItem</op>
                     <op code="call">javafx.util.StringConverter.toString</op>
                     <op code="call">javafx.scene.control.TextField.setText</op>
                     <op code="get_static">javafx.scene.control.ContentDisplay.GRAPHIC_ONLY</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.TooltippedTextFieldTableCell.setContentDisplay</op>
                     <op code="get">textField</op>
                     <op code="call">javafx.scene.control.TextField.requestFocus</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="cancelEdit"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.TableCell.cancelEdit</op>
                     <op code="get_static">javafx.scene.control.ContentDisplay.TEXT_ONLY</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.TooltippedTextFieldTableCell.setContentDisplay</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="commitEdit"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.TooltippedTextFieldTableCell.isEditing</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.TooltippedTextFieldTableCell.getItem</op>
                     <op code="call">java.lang.String.equals</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.TooltippedTextFieldTableCell.getTableView</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.TooltippedTextFieldTableCell.getTableColumn</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.TooltippedTextFieldTableCell.getIndex</op>
                     <op code="call">javafx.scene.control.TablePosition.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.TableColumn.editCommitEvent</op>
                     <op code="call">javafx.scene.control.TableColumn$CellEditEvent.&lt;init&gt;</op>
                     <op code="call">javafx.event.Event.fireEvent</op>
                     <op code="call">javafx.scene.control.TableCell.commitEdit</op>
                     <op code="get_static">javafx.scene.control.ContentDisplay.TEXT_ONLY</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.TooltippedTextFieldTableCell.setContentDisplay</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SelectionChangedEventTest"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.SelectionChangedEventTest; file: org.pdfsam.ui.selection.multiple.SelectionChangedEventTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.select</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="negativeTotal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Collections.emptyList</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.select</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.ofTotalRows</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.clearSelectionEvent</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.isClearSelection</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.isSingleSelection</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="single"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.select</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.ofTotalRows</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.isSingleSelection</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.isClearSelection</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.getSingleSelection</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getSingle"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.select</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.ofTotalRows</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.getSingleSelection</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clearCantMove"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.clearSelectionEvent</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveType.values</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="canMoveUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.select</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.ofTotalRows</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.UP</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.canMove</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="cantMoveUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.select</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.ofTotalRows</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.UP</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.canMove</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="cantMoveBottom"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.select</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.ofTotalRows</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.BOTTOM</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.canMove</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.select</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.ofTotalRows</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.BOTTOM</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.canMove</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="canMoveBottom"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.select</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.ofTotalRows</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.BOTTOM</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.canMove</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="cantMoveDown"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.select</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.ofTotalRows</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.DOWN</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.canMove</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="canMoveDown"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.select</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.ofTotalRows</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.DOWN</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.canMove</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="cantMoveTop"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.select</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.ofTotalRows</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.TOP</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.canMove</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.select</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.ofTotalRows</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.TOP</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.canMove</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="canMoveTop"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.select</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.ofTotalRows</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.TOP</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.canMove</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SelectionTableTest"><!--Package: org.pdfsam.ui.selection.multiple; name: org.pdfsam.ui.selection.multiple.SelectionTableTest; file: org.pdfsam.ui.selection.multiple.SelectionTableTest-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/multiple/SelectionTable">victim</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">firstItem</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.LoadingColumn.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.FileColumn.NAME</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.LongColumn.SIZE</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.IntColumn.PAGES</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.LongColumn.LAST_MODIFIED</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.PageRangesColumn.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.setId</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.populate</op>
                     <op code="put">firstItem</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="tearDown"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">javafx.scene.input.KeyCode.ESCAPE</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.type</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="fallbackRequest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest$1.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="select"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest$2.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="multipleSelect"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest$3.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.CONTROL</op>
                     <op code="call">org.testfx.api.FxRobotInterface.press</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.CONTROL</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.release</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="itemsAdded"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onSaveWorkspace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.saveStateTo</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.hamcrest.Matchers.endsWith</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.hamcrest.Matchers.endsWith</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.hamcrest.Matchers.endsWith</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.hamcrest.Matchers.endsWith</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onSaveWorkspaceEmpty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.saveStateTo</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertNull</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onSaveWorkspaceEncryptedPwdStored"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.context.DefaultUserContext.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SAVE_PWD_IN_WORKSPACE</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForFxEvents</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.write</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.testfx.api.FxRobot.clickOn</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.saveStateTo</op>
                     <op code="call">org.pdfsam.support.EncryptionUtils.encrypt</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onSaveWorkspaceEncryptedNoPwdStored"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.context.DefaultUserContext.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SAVE_PWD_IN_WORKSPACE</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForFxEvents</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.write</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.testfx.api.FxRobot.clickOn</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.saveStateTo</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isBlank</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isBlank</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreStateFromPwdBackwardCompatible"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.clear</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.get</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.descriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getPassword</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.clear</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.pdfsam.support.EncryptionUtils.encrypt</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.get</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.descriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getFileName</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.descriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getPassword</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">pageSelection</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">pace</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">reverse</op>
                     <op code="call">javafx.beans.property.SimpleBooleanProperty.get</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.get</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.descriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getFileName</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">pageSelection</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.get</op>
                     <op code="call">org.junit.Assert.assertNull</op>
                     <op code="get">pace</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.get</op>
                     <op code="call">org.junit.Assert.assertNull</op>
                     <op code="get">reverse</op>
                     <op code="call">javafx.beans.property.SimpleBooleanProperty.get</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreStateFromEmpty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreStateFromSizeZero"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="indexColumn"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.testfx.matcher.control.TableViewMatchers.hasTableCell</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                     <op code="get">victim</op>
                     <op code="call">org.testfx.matcher.control.TableViewMatchers.hasTableCell</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                     <op code="get">victim</op>
                     <op code="call">org.testfx.matcher.control.TableViewMatchers.hasTableCell</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                     <op code="get">victim</op>
                     <op code="call">org.testfx.matcher.control.TableViewMatchers.hasTableCell</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                     <op code="get">victim</op>
                     <op code="call">org.testfx.matcher.control.TableViewMatchers.hasTableCell</op>
                     <op code="call">org.hamcrest.Matchers.not</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.getSelectedIndices</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.getSelectedIndices</op>
                     <op code="call">javafx.collections.ObservableList.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="encryptedThrowsRequest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForFxEvents</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.write</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.testfx.api.FxRobot.clickOn</op>
                     <op code="call">org.mockito.Mockito.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clearSelectionByclickOn"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.getSelectedIndices</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get_static">javafx.scene.input.KeyCode.CONTROL</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.press</op>
                     <op code="call">org.testfx.api.FxRobot.clickOn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.getSelectedIndices</op>
                     <op code="call">javafx.collections.ObservableList.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">javafx.scene.input.KeyCode.CONTROL</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.release</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionChangedEvent.isClearSelection</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="removeByContextMenu"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.rightClickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.getSelectedIndices</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="removeMultiple"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.CONTROL</op>
                     <op code="call">org.testfx.api.FxRobotInterface.press</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.CONTROL</op>
                     <op code="call">org.testfx.api.FxRobotInterface.release</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.getSelectedIndices</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="removeRelease"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.descriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.hasReferences</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clearInvalidatesDuplicatedItems"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.rightClickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.descriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.hasReferences</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="duplicate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.rightClickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.count</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveSelected"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveDownByContextMenu"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.rightClickOn</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveBottomByContextMenu"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.rightClickOn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.getSelectedIndex</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.getSelectedIndex</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveUpByContextMenu"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.rightClickOn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.getSelectedIndex</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.getSelectedIndex</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveTopByContextMenu"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.rightClickOn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.getSelectedIndex</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getSelectionModel</op>
                     <op code="call">javafx.scene.control.TableView$TableViewSelectionModel.getSelectedIndex</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="copy"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.rightClickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="pageRangesForAllByContextMenu"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="get">pageSelection</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.set</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.rightClickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setDestinationByContextMenu"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.rightClickOn</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest$4.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="openByContextMenu"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.rightClickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="openFolderByContextMenu"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.rightClickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="infoByContextMenu"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.rightClickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="iconsAreShown"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForFxEvents</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.REQUESTED</op>
                     <op code="call">org.pdfsam.pdf.PdfDescriptorLoadingStatus.getIcon</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.unicode</op>
                     <op code="call">javafx.scene.text.Text.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForFxEvents</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.LOADING</op>
                     <op code="call">org.pdfsam.pdf.PdfDescriptorLoadingStatus.getIcon</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.unicode</op>
                     <op code="call">javafx.scene.text.Text.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clickWithErrorsShowsLogStage"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForFxEvents</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="logEventOnclickOn"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForFxEvents</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.REQUESTED</op>
                     <op code="call">org.pdfsam.pdf.PdfDescriptorLoadingStatus.getIcon</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.unicode</op>
                     <op code="call">javafx.scene.text.Text.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForFxEvents</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.LOADING</op>
                     <op code="call">org.pdfsam.pdf.PdfDescriptorLoadingStatus.getIcon</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.unicode</op>
                     <op code="call">javafx.scene.text.Text.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="editCommitOnFocusLost"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="get">pageSelection</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.set</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForFxEvents</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="get_static">javafx.scene.input.KeyCode.DIGIT5</op>
                     <op code="call">org.testfx.api.FxRobotInterface.type</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableTest.clickOn</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForFxEvents</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="get">pageSelection</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/pdf/PdfDocumentDescriptor;"
                       name="populate"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Lorg/pdfsam/pdf/PdfDocumentDescriptor</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.add</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.add</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.add</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.add</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.prefix">
         <class id="PrefixField$PrefixMenuItem"><!--Package: org.pdfsam.ui.prefix; name: org.pdfsam.ui.prefix.PrefixField$PrefixMenuItem; file: org.pdfsam.ui.prefix.PrefixField$PrefixMenuItem-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/prefix/PrefixField">this$0</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/prefix/PrefixField;Lorg/sejda/model/prefix/Prefix;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/ui/prefix/PrefixField">?</arg>
                     <arg type="Lorg/sejda/model/prefix/Prefix">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.orElseThrow</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField$PrefixMenuItem.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/prefix/PrefixField;Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/ui/prefix/PrefixField">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">this$0</op>
                     <op code="call">javafx.scene.control.MenuItem.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField$PrefixMenuItem.setText</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField$PrefixMenuItem.setOnAction</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField$PrefixMenuItem.setMnemonicParsing</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PrefixField"><!--Package: org.pdfsam.ui.prefix; name: org.pdfsam.ui.prefix.PrefixField; file: org.pdfsam.ui.prefix.PrefixField-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Menu">menu</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.filter</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">javafx.scene.control.TextField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.setPromptText</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Menu.&lt;init&gt;</op>
                     <op code="put">menu</op>
                     <op code="get">menu</op>
                     <op code="call">javafx.scene.control.Menu.setId</op>
                     <op code="get">menu</op>
                     <op code="call">javafx.scene.control.Menu.getItems</op>
                     <op code="get_static">org.sejda.model.prefix.Prefix.TIMESTAMP</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField$PrefixMenuItem.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.prefix.Prefix.BASENAME</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField$PrefixMenuItem.&lt;init&gt;</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get">menu</op>
                     <op code="call">javafx.scene.control.ContextMenu.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.setContextMenu</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.setPrefWidth</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Lorg/sejda/model/prefix/Prefix;)V"
                       name="addMenuItemFor"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/prefix/Prefix">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">menu</op>
                     <op code="call">javafx.scene.control.Menu.getItems</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField$PrefixMenuItem.&lt;init&gt;</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/String;)V"
                       name="addMenuItemFor"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">menu</op>
                     <op code="call">javafx.scene.control.Menu.getItems</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField$PrefixMenuItem.&lt;init&gt;</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="resetView"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.setText</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PrefixFieldTest"><!--Package: org.pdfsam.ui.prefix; name: org.pdfsam.ui.prefix.PrefixFieldTest; file: org.pdfsam.ui.prefix.PrefixFieldTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearEventStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/prefix/PrefixField">victim</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/prefix/PrefixField">secondVictim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearEventStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.&lt;init&gt;</op>
                     <op code="put">secondVictim</op>
                     <op code="get">victim</op>
                     <op code="get">secondVictim</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="defaultValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="placeHolderValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">secondVictim</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="contextMenuAddsText"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixFieldTest.rightClickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="get_static">org.sejda.model.prefix.Prefix.BASENAME</op>
                     <op code="call">org.sejda.model.prefix.Prefix.getFriendlyName</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForFxEvents</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.getText</op>
                     <op code="get_static">org.sejda.model.prefix.Prefix.BASENAME</op>
                     <op code="call">org.sejda.model.prefix.Prefix.getFriendlyName</op>
                     <op code="call">java.lang.String.contains</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="contextMenuReplacesText"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixFieldTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.HOME</op>
                     <op code="call">org.testfx.api.FxRobotInterface.type</op>
                     <op code="get_static">javafx.scene.input.KeyCode.SHIFT</op>
                     <op code="get_static">javafx.scene.input.KeyCode.END</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixFieldTest.rightClickOn</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixFieldTest.moveBy</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixFieldTest.clickOn</op>
                     <op code="get_static">org.sejda.model.prefix.Prefix.BASENAME</op>
                     <op code="call">org.sejda.model.prefix.Prefix.getFriendlyName</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixFieldTest.clickOn</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForFxEvents</op>
                     <op code="get_static">org.sejda.model.prefix.Prefix.BASENAME</op>
                     <op code="call">org.sejda.model.prefix.Prefix.getFriendlyName</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="prefixMenuItemIsAdded"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get_static">org.sejda.model.prefix.Prefix.BOOKMARK</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.addMenuItemFor</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixFieldTest.rightClickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="get_static">org.sejda.model.prefix.Prefix.BOOKMARK</op>
                     <op code="call">org.sejda.model.prefix.Prefix.getFriendlyName</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.getText</op>
                     <op code="get_static">org.sejda.model.prefix.Prefix.BOOKMARK</op>
                     <op code="call">org.sejda.model.prefix.Prefix.getFriendlyName</op>
                     <op code="call">java.lang.String.contains</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="prefixMenuItemIsAddedString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.addMenuItemFor</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixFieldTest.rightClickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.getText</op>
                     <op code="call">java.lang.String.contains</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PrefixPaneTest"><!--Package: org.pdfsam.ui.prefix; name: org.pdfsam.ui.prefix.PrefixPaneTest; file: org.pdfsam.ui.prefix.PrefixPaneTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearEventStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/support/params/MultipleOutputTaskParametersBuilder">builder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">onError</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/prefix/PrefixPane">victim</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/UserContext">userContext</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearEventStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">builder</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">onError</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">userContext</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.setId</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.support.params.MultipleOutputTaskParametersBuilder.prefix</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.saveStateTo</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveFieldValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPaneTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">org.pdfsam.context.UserContext.setDefaultPrefix</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoredFieldValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">org.pdfsam.context.UserContext.getDefaultPrefix</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.restoreStateFrom</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="reset"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPaneTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.resetView</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PrefixPane"><!--Package: org.pdfsam.ui.prefix; name: org.pdfsam.ui.prefix.PrefixPane; file: org.pdfsam.ui.prefix.PrefixPane-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/prefix/PrefixField">field</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">ownerModule</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;Lorg/pdfsam/context/UserContext;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="put">ownerModule</op>
                     <op code="get">ownerModule</op>
                     <op code="call">org.pdfsam.context.UserContext.getDefaultPrefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.&lt;init&gt;</op>
                     <op code="put">field</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.HCONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.getChildren</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.lang.System.lineSeparator</op>
                     <op code="call">javafx.scene.text.Text.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.lang.System.lineSeparator</op>
                     <op code="call">javafx.scene.text.Text.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.text.Text.&lt;init&gt;</op>
                     <op code="call">javafx.scene.text.TextFlow.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Lorg/sejda/model/prefix/Prefix;)V"
                       name="addMenuItemFor"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/prefix/Prefix">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.addMenuItemFor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/String;)V"
                       name="addMenuItemFor"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.addMenuItemFor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getText"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.getText</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="resetView"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.resetView</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getOwnerModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">ownerModule</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/support/params/MultipleOutputTaskParametersBuilder;Ljava/util/function/Consumer;)V"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/support/params/MultipleOutputTaskParametersBuilder">?</arg>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.getText</op>
                     <op code="call">org.pdfsam.support.params.MultipleOutputTaskParametersBuilder.prefix</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="saveStateTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.getId</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.getText</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="call">java.util.Map.put</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.getId</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixField.setText</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.splitbysize">
         <class id="SplitBySizeParametersBuilderTest"><!--Package: org.pdfsam.splitbysize; name: org.pdfsam.splitbysize.SplitBySizeParametersBuilderTest; file: org.pdfsam.splitbysize.SplitBySizeParametersBuilderTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="build"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.compress</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.output</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.existingOutput</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.size</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.prefix</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.discardBookmarks</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.sejda.model.input.PdfFileSource.newInstanceNoPassword</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.source</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.version</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.build</op>
                     <op code="call">org.sejda.model.parameter.SplitBySizeParameters.isCompress</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.sejda.model.parameter.SplitBySizeParameters.discardOutline</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.sejda.model.parameter.SplitBySizeParameters.getExistingOutputPolicy</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.sejda.model.parameter.SplitBySizeParameters.getVersion</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.SplitBySizeParameters.getSizeToSplitAt</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.SplitBySizeParameters.getOutputPrefix</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.SplitBySizeParameters.getOutput</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.SplitBySizeParameters.getSourceList</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitBySizeParametersBuilder"><!--Package: org.pdfsam.splitbysize; name: org.pdfsam.splitbysize.SplitBySizeParametersBuilder; file: org.pdfsam.splitbysize.SplitBySizeParametersBuilder-->
            <attributes>
               <attribute final="false" public="false" static="false" type="J">size</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.SplitParametersBuilder.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(J)V"
                       name="size"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="J">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">size</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/parameter/SplitBySizeParameters;"
                       name="build"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/sejda/model/parameter/SplitBySizeParameters</return>
                  <ops>
                     <op code="get">size</op>
                     <op code="call">org.sejda.model.parameter.SplitBySizeParameters.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.isCompress</op>
                     <op code="call">org.sejda.model.parameter.SplitBySizeParameters.setCompress</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.existingOutput</op>
                     <op code="call">org.sejda.model.parameter.SplitBySizeParameters.setExistingOutputPolicy</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.getVersion</op>
                     <op code="call">org.sejda.model.parameter.SplitBySizeParameters.setVersion</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.getOutput</op>
                     <op code="call">org.sejda.model.parameter.SplitBySizeParameters.setOutput</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.getPrefix</op>
                     <op code="call">org.sejda.model.parameter.SplitBySizeParameters.setOutputPrefix</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.getSource</op>
                     <op code="call">org.sejda.model.parameter.SplitBySizeParameters.addSource</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.getOptimizationPolicy</op>
                     <op code="call">org.sejda.model.parameter.SplitBySizeParameters.setOptimizationPolicy</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.isDiscardBookmarks</op>
                     <op code="call">org.sejda.model.parameter.SplitBySizeParameters.discardOutline</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SizeUnitRadio"><!--Package: org.pdfsam.splitbysize; name: org.pdfsam.splitbysize.SizeUnitRadio; file: org.pdfsam.splitbysize.SizeUnitRadio-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/splitbysize/SizeUnit">unit</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/splitbysize/SizeUnit;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/splitbysize/SizeUnit">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.RadioButton.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">unit</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnit.friendlyName</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnitRadio.setText</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnit.symbol</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnitRadio.setId</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="saveStateTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbysize.SizeUnitRadio.isSelected</op>
                     <op code="get">unit</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnit.toString</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">unit</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnit.toString</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/splitbysize/SizeUnit;"
                       name="unit"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/splitbysize/SizeUnit</return>
                  <ops>
                     <op code="get">unit</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitOptionsPane"><!--Package: org.pdfsam.splitbysize; name: org.pdfsam.splitbysize.SplitOptionsPane; file: org.pdfsam.splitbysize.SplitOptionsPane-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/commons/ValidableTextField">field</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/ToggleGroup">group</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.&lt;init&gt;</op>
                     <op code="put">field</op>
                     <op code="call">javafx.scene.control.ToggleGroup.&lt;init&gt;</op>
                     <op code="put">group</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setOnEnterValidation</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setEnableInvalidStyle</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setPromptText</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.support.validation.Validators.positiveInteger</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setValidator</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setErrorMessage</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setId</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.HCONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPane.getChildren</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="get">field</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnit.values</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="get">group</op>
                     <op code="call">javafx.scene.control.ToggleGroup.getToggles</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/splitbysize/SplitBySizeParametersBuilder;Ljava/util/function/Consumer;)V"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/splitbysize/SplitBySizeParametersBuilder">?</arg>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.validate</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="get">group</op>
                     <op code="call">javafx.scene.control.ToggleGroup.getSelectedToggle</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnitRadio.unit</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.intValue</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnit.toBytes</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.size</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="saveStateTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">group</op>
                     <op code="call">javafx.scene.control.ToggleGroup.getToggles</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                     <op code="get">group</op>
                     <op code="call">javafx.scene.control.ToggleGroup.getToggles</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="resetView"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.clear</op>
                     <op code="get">group</op>
                     <op code="call">javafx.scene.control.ToggleGroup.getToggles</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitOptionsPaneTest"><!--Package: org.pdfsam.splitbysize; name: org.pdfsam.splitbysize.SplitOptionsPaneTest; file: org.pdfsam.splitbysize.SplitOptionsPaneTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clear</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/splitbysize/SplitBySizeParametersBuilder">builder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">onError</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/splitbysize/SplitOptionsPane">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clear</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">builder</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">onError</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPane.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPaneTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get_static">org.pdfsam.splitbysize.SizeUnit.MEGABYTE</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnit.symbol</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPaneTest.clickOn</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.size</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="applyError"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPaneTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyLong</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.size</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPaneTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get_static">org.pdfsam.splitbysize.SizeUnit.KILOBYTE</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnit.symbol</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPaneTest.clickOn</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPane.saveStateTo</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.splitbysize.SizeUnit.MEGABYTE</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnit.toString</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get_static">org.pdfsam.splitbysize.SizeUnit.KILOBYTE</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnit.toString</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.splitbysize.SizeUnit.KILOBYTE</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnit.symbol</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get_static">org.pdfsam.splitbysize.SizeUnit.MEGABYTE</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnit.symbol</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get_static">org.pdfsam.splitbysize.SizeUnit.MEGABYTE</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnit.toString</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPane.restoreStateFrom</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryTextInputControl</op>
                     <op code="call">javafx.scene.control.TextInputControl.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnitRadio.isSelected</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnitRadio.isSelected</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="reset"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.splitbysize.SizeUnit.KILOBYTE</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnit.symbol</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPaneTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get_static">org.pdfsam.splitbysize.SizeUnit.KILOBYTE</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnit.symbol</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPaneTest.clickOn</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryTextInputControl</op>
                     <op code="call">javafx.scene.control.TextInputControl.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnitRadio.isSelected</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">javafx.scene.control.TextInputControl.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnitRadio.isSelected</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SizeUnitRadioTest"><!--Package: org.pdfsam.splitbysize; name: org.pdfsam.splitbysize.SizeUnitRadioTest; file: org.pdfsam.splitbysize.SizeUnitRadioTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">fxThread</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">fxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="requiredSizeUnit"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbysize.SizeUnitRadio.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onSaveState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.splitbysize.SizeUnit.KILOBYTE</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnitRadio.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnitRadio.setSelected</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnitRadio.saveStateTo</op>
                     <op code="get_static">org.pdfsam.splitbysize.SizeUnit.KILOBYTE</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnit.toString</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onSaveStateNotSelected"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.splitbysize.SizeUnit.MEGABYTE</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnitRadio.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnitRadio.setSelected</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnitRadio.saveStateTo</op>
                     <op code="get_static">org.pdfsam.splitbysize.SizeUnit.MEGABYTE</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnit.toString</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onRestoreState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.splitbysize.SizeUnit.MEGABYTE</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnitRadio.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnitRadio.setSelected</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.splitbysize.SizeUnit.MEGABYTE</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnit.toString</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnitRadio.restoreStateFrom</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnitRadio.isSelected</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitBySizeModule$ModuleConfig"><!--Package: org.pdfsam.splitbysize; name: org.pdfsam.splitbysize.SplitBySizeModule$ModuleConfig; file: org.pdfsam.splitbysize.SplitBySizeModule$ModuleConfig-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField;"
                       name="destinationDirectoryField"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.setId</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField;Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/io/PdfDestinationPane;"
                       name="destinationPane"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField">?</arg>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/io/PdfDestinationPane</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.io.PdfDestinationPane$DestinationPanelFields.DISCARD_BOOKMARKS</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.enableSameAsSourceItem</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/module/RunButton;Lorg/pdfsam/ui/module/OpenButton;)Lorg/pdfsam/ui/module/Footer;"
                       name="footer"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/module/RunButton">?</arg>
                     <arg type="Lorg/pdfsam/ui/module/OpenButton">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/module/Footer</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.Footer.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/module/OpenButton;"
                       name="openButton"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/module/OpenButton</return>
                  <ops>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.MULTIPLE_PDF</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/prefix/PrefixPane;"
                       name="prefixPane"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/prefix/PrefixPane</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitBySizeModule"><!--Package: org.pdfsam.splitbysize; name: org.pdfsam.splitbysize.SplitBySizeModule; file: org.pdfsam.splitbysize.SplitBySizeModule-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE_ID</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/single/TaskParametersBuilderSingleSelectionPane">selectionPane</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField">destinationDirectoryField</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/PdfDestinationPane">destinationPane</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/splitbysize/SplitOptionsPane">splitOptions</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/prefix/PrefixPane">prefix</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/ModuleDescriptor">descriptor</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField;Lorg/pdfsam/ui/io/PdfDestinationPane;Lorg/pdfsam/ui/module/Footer;Lorg/pdfsam/ui/prefix/PrefixPane;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField">?</arg>
                     <arg type="Lorg/pdfsam/ui/io/PdfDestinationPane">?</arg>
                     <arg type="Lorg/pdfsam/ui/module/Footer">?</arg>
                     <arg type="Lorg/pdfsam/ui/prefix/PrefixPane">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.BaseTaskExecutionModule.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPane.&lt;init&gt;</op>
                     <op code="put">splitOptions</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.builder</op>
                     <op code="get_static">org.pdfsam.module.ModuleCategory.SPLIT</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.category</op>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.SINGLE_PDF</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.inputTypes</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.name</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.description</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.LOW</op>
                     <op code="call">org.pdfsam.module.ModulePriority.getPriority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.priority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.supportURL</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.build</op>
                     <op code="put">descriptor</op>
                     <op code="put">destinationDirectoryField</op>
                     <op code="put">destinationPane</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeModule.id</op>
                     <op code="call">org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane.&lt;init&gt;</op>
                     <op code="put">selectionPane</op>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane.setPromptText</op>
                     <op code="put">prefix</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeModule.settingPanel</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeModule.initModuleSettingsPanel</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/ModuleDescriptor;"
                       name="descriptor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/ModuleDescriptor</return>
                  <ops>
                     <op code="get">descriptor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="onSaveWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane.saveStateTo</op>
                     <op code="get">splitOptions</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPane.saveStateTo</op>
                     <op code="get">destinationDirectoryField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.saveStateTo</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.saveStateTo</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.saveStateTo</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="onLoadWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane.restoreStateFrom</op>
                     <op code="get">splitOptions</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPane.restoreStateFrom</op>
                     <op code="get">destinationDirectoryField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.restoreStateFrom</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.restoreStateFrom</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.restoreStateFrom</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/function/Consumer;)Lorg/apache/commons/lang3/builder/Builder;"
                       name="getBuilder"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>Lorg/apache/commons/lang3/builder/Builder</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeParametersBuilder.&lt;init&gt;</op>
                     <op code="get">splitOptions</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPane.apply</op>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane.apply</op>
                     <op code="get">destinationDirectoryField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.apply</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.apply</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.apply</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/VBox;"
                       name="settingPanel"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Ljavafx/scene/layout/VBox</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="get_static">javafx.geometry.Pos.TOP_CENTER</op>
                     <op code="call">javafx.scene.layout.VBox.setAlignment</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.support.Views.titledPane</op>
                     <op code="get">prefix</op>
                     <op code="get_static">org.sejda.model.prefix.Prefix.CURRENTPAGE</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.addMenuItemFor</op>
                     <op code="get">prefix</op>
                     <op code="get_static">org.sejda.model.prefix.Prefix.FILENUMBER</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.addMenuItemFor</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.addMenuItemFor</op>
                     <op code="call">javafx.scene.layout.VBox.getChildren</op>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">splitOptions</op>
                     <op code="call">org.pdfsam.ui.support.Views.titledPane</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.support.Views.titledPane</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="id"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/Node;"
                       name="graphic"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/Node</return>
                  <ops>
                     <op code="call">javafx.scene.image.ImageView.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/ClearModuleEvent;)V"
                       name="onClearModule"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/ClearModuleEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">clearEverything</op>
                     <op code="get">splitOptions</op>
                     <op code="call">org.pdfsam.splitbysize.SplitOptionsPane.resetView</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.resetView</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.resetView</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SizeUnitTest"><!--Package: org.pdfsam.splitbysize; name: org.pdfsam.splitbysize.SizeUnitTest; file: org.pdfsam.splitbysize.SizeUnitTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="toBytes"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.splitbysize.SizeUnit.KILOBYTE</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnit.toBytes</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.splitbysize.SizeUnit.MEGABYTE</op>
                     <op code="call">org.pdfsam.splitbysize.SizeUnit.toBytes</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.dashboard">
         <class id="Dashboard"><!--Package: org.pdfsam.ui.dashboard; name: org.pdfsam.ui.dashboard.Dashboard; file: org.pdfsam.ui.dashboard.Dashboard-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Map">items</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/layout/StackPane">center</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/animation/FadeTransition">fade</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/List;Lorg/pdfsam/ui/dashboard/QuickbarDashboardButtonsPane;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                     <arg type="Lorg/pdfsam/ui/dashboard/QuickbarDashboardButtonsPane">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.BorderPane.&lt;init&gt;</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="put">items</op>
                     <op code="call">javafx.scene.layout.StackPane.&lt;init&gt;</op>
                     <op code="put">center</op>
                     <op code="call">javafx.util.Duration.&lt;init&gt;</op>
                     <op code="get">center</op>
                     <op code="call">javafx.animation.FadeTransition.&lt;init&gt;</op>
                     <op code="put">fade</op>
                     <op code="call">org.pdfsam.ui.dashboard.Dashboard.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dashboard.Dashboard.setId</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="get">fade</op>
                     <op code="call">javafx.animation.FadeTransition.setFromValue</op>
                     <op code="get">fade</op>
                     <op code="call">javafx.animation.FadeTransition.setToValue</op>
                     <op code="get">center</op>
                     <op code="call">org.pdfsam.ui.dashboard.Dashboard.setCenter</op>
                     <op code="call">org.pdfsam.ui.quickbar.QuickbarPane.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.Dashboard.setLeft</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/event/SetActiveDashboardItemRequest;)V"
                       name="onSetActiveDashboardItem"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/event/SetActiveDashboardItemRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">items</op>
                     <op code="call">org.pdfsam.ui.event.SetActiveDashboardItemRequest.getActiveItemId</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="get">center</op>
                     <op code="call">javafx.scene.layout.StackPane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.setAll</op>
                     <op code="get">fade</op>
                     <op code="call">javafx.animation.FadeTransition.play</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardItemPane.getItem</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardItem.name</op>
                     <op code="call">org.pdfsam.ui.event.SetTitleEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Z"
                       name="hasItem"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get">items</op>
                     <op code="call">java.util.Map.containsKey</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DashboardButtonTest"><!--Package: org.pdfsam.ui.dashboard; name: org.pdfsam.ui.dashboard.DashboardButtonTest; file: org.pdfsam.ui.dashboard.DashboardButtonTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">cleanStudio</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">cleanStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.DefaultPriorityDashboardItem.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardButton.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onClick"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardButtonTest.clickOn</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.event.SetActiveDashboardItemRequest.getActiveItemId</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="selectIf"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardButton.isSelected</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardButton.selectIf</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardButton.isSelected</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardButton.isSelected</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardButton.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DashboardConfig"><!--Package: org.pdfsam.ui.dashboard; name: org.pdfsam.ui.dashboard.DashboardConfig; file: org.pdfsam.ui.dashboard.DashboardConfig-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="id"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
            </methods>
         </class>
         <class id="QuickbarDashboardButtonsPane"><!--Package: org.pdfsam.ui.dashboard; name: org.pdfsam.ui.dashboard.QuickbarDashboardButtonsPane; file: org.pdfsam.ui.dashboard.QuickbarDashboardButtonsPane-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/List">buttons</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/List;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButtonsPane.&lt;init&gt;</op>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="put">buttons</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.sorted</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/event/SetActiveDashboardItemRequest;)V"
                       name="setCurrentDashboardItem"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/event/SetActiveDashboardItemRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">buttons</op>
                     <op code="call">java.util.List.forEach</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="QuickbarDashboardButtonsPaneTest"><!--Package: org.pdfsam.ui.dashboard; name: org.pdfsam.ui.dashboard.QuickbarDashboardButtonsPaneTest; file: org.pdfsam.ui.dashboard.QuickbarDashboardButtonsPaneTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">javaFxThread</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/dashboard/QuickbarDashboardButtonsPane">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardItem.name</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardItem.id</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardItem.name</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardItem.id</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.ui.dashboard.QuickbarDashboardButtonsPane.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="displayText"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.dashboard.QuickbarDashboardButtonsPane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Stream.noneMatch</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.dashboard.QuickbarDashboardButtonsPane.setDisplayText</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.dashboard.QuickbarDashboardButtonsPane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Stream.allMatch</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="select"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.dashboard.QuickbarDashboardButtonsPane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Stream.noneMatch</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.event.SetActiveDashboardItemRequest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.QuickbarDashboardButtonsPane.setCurrentDashboardItem</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.dashboard.QuickbarDashboardButtonsPane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.count</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferencesDashboardItem"><!--Package: org.pdfsam.ui.dashboard; name: org.pdfsam.ui.dashboard.PreferencesDashboardItem; file: org.pdfsam.ui.dashboard.PreferencesDashboardItem-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Ljava/lang/String">PDFSAM_DISABLE_SETTINGS_DEPRECATED</attribute>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Ljava/lang/String">PDFSAM_DISABLE_SETTINGS</attribute>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Ljava/lang/String">ID</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/dashboard/preference/PreferencePane">pane</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/dashboard/preference/PreferencePane;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferencePane">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">pane</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="id"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="name"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/Pane;"
                       name="pane"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/layout/Pane</return>
                  <ops>
                     <op code="get">pane</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/Node;"
                       name="graphic"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/Node</return>
                  <ops>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.get</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.SETTINGS</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.createIcon</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="priority"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="disabled"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="call">java.lang.Boolean.getBoolean</op>
                     <op code="call">java.lang.Boolean.getBoolean</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DashboardTest$DisabledItem"><!--Package: org.pdfsam.ui.dashboard; name: org.pdfsam.ui.dashboard.DashboardTest$DisabledItem; file: org.pdfsam.ui.dashboard.DashboardTest$DisabledItem-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="priority"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/Pane;"
                       name="pane"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/layout/Pane</return>
                  <ops>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="name"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="id"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/Node;"
                       name="graphic"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/Node</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="disabled"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
               </method>
            </methods>
         </class>
         <class id="DashboardTest"><!--Package: org.pdfsam.ui.dashboard; name: org.pdfsam.ui.dashboard.DashboardTest; file: org.pdfsam.ui.dashboard.DashboardTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="true"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">STUDIO_RULE</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">javaFxThread</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="allItemsArePicked"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardTest$Config.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.addConfig</op>
                     <op code="call">org.pdfsam.injector.Injector.add</op>
                     <op code="call">org.pdfsam.injector.Injector.start</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.dashboard.Dashboard.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.injector.Injector.close</op>
                     <op code="call">org.pdfsam.injector.Injector.close</op>
                     <op code="call">java.lang.Throwable.addSuppressed</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="disabledItemsAreNotPicked"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardTest$EnabledItem.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardTest$DisabledItem.&lt;init&gt;</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.ui.dashboard.QuickbarDashboardButtonsPane.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.Dashboard.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.Dashboard.hasItem</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.dashboard.Dashboard.hasItem</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="wrongModuleDoesntBoom"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardTest$Config.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.start</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.event.SetActiveDashboardItemRequest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.Dashboard.onSetActiveDashboardItem</op>
                     <op code="call">org.pdfsam.injector.Injector.close</op>
                     <op code="call">org.pdfsam.injector.Injector.close</op>
                     <op code="call">java.lang.Throwable.addSuppressed</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="eventIsSent"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardTest$Config.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.start</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.dashboard.Dashboard.getCenter</op>
                     <op code="call">javafx.scene.layout.StackPane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.dashboard.AboutDashboadItem.id</op>
                     <op code="call">org.pdfsam.ui.event.SetActiveDashboardItemRequest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.Dashboard.onSetActiveDashboardItem</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.pdfsam.ui.dashboard.Dashboard.getCenter</op>
                     <op code="call">javafx.scene.layout.StackPane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.isEmpty</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.injector.Injector.close</op>
                     <op code="call">org.pdfsam.injector.Injector.close</op>
                     <op code="call">java.lang.Throwable.addSuppressed</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.ui.dashboard.DashboardTest.STUDIO_RULE</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DashboardTest$Config"><!--Package: org.pdfsam.ui.dashboard; name: org.pdfsam.ui.dashboard.DashboardTest$Config; file: org.pdfsam.ui.dashboard.DashboardTest$Config-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/dashboard/about/AboutDashboardPane;"
                       name="aboutPane"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/dashboard/about/AboutDashboardPane</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.Pdfsam.name</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.VERSION</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.HOME_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.HOME_LABEL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.FEED_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.DOCUMENTATION_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.SUPPORT_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.SCM_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.TRANSLATE_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.TWITTER_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.DONATE_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.FACEBOOK_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.LICENSE_NAME</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.LICENSE_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.TRACKER_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.THANKS_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.setId</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DashboardItemPane"><!--Package: org.pdfsam.ui.dashboard; name: org.pdfsam.ui.dashboard.DashboardItemPane; file: org.pdfsam.ui.dashboard.DashboardItemPane-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/dashboard/DashboardItem">item</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/eventstudio/Listener">enableFooterListener</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/dashboard/DashboardItem;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/ui/dashboard/DashboardItem">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.BorderPane.&lt;init&gt;</op>
                     <op code="put">enableFooterListener</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">item</op>
                     <op code="get">item</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardItem.pane</op>
                     <op code="call">javafx.scene.layout.Pane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.DEAULT_CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get">item</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardItem.pane</op>
                     <op code="call">javafx.scene.layout.Pane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get">item</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardItem.pane</op>
                     <op code="call">javafx.scene.control.ScrollPane.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.ScrollPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.DEAULT_CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.control.ScrollPane.setFitToWidth</op>
                     <op code="get_static">javafx.scene.control.ScrollPane$ScrollBarPolicy.NEVER</op>
                     <op code="call">javafx.scene.control.ScrollPane.setHbarPolicy</op>
                     <op code="get_static">javafx.scene.control.ScrollPane$ScrollBarPolicy.AS_NEEDED</op>
                     <op code="call">javafx.scene.control.ScrollPane.setVbarPolicy</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardItemPane.setCenter</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">enableFooterListener</op>
                     <op code="get_static">org.pdfsam.eventstudio.ReferenceStrength.STRONG</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="unregister"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">enableFooterListener</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.remove</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/HBox;"
                       name="buildFooter"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Ljavafx/scene/layout/HBox</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Button.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.BUTTON</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get_static">javafx.scene.text.TextAlignment.CENTER</op>
                     <op code="call">javafx.scene.control.Button.setTextAlignment</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CLOSE_FOOTER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/dashboard/DashboardItem;"
                       name="getItem"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Lorg/pdfsam/ui/dashboard/DashboardItem</return>
                  <ops>
                     <op code="get">item</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="AboutDashboadItem"><!--Package: org.pdfsam.ui.dashboard; name: org.pdfsam.ui.dashboard.AboutDashboadItem; file: org.pdfsam.ui.dashboard.AboutDashboadItem-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/dashboard/about/AboutDashboardPane">pane</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/dashboard/about/AboutDashboardPane;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/ui/dashboard/about/AboutDashboardPane">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">pane</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="id"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="name"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/Pane;"
                       name="pane"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/layout/Pane</return>
                  <ops>
                     <op code="get">pane</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/Node;"
                       name="graphic"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/Node</return>
                  <ops>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.get</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.INFORMATION</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.createIcon</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="priority"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
               </method>
            </methods>
         </class>
         <class id="ModulesDashboardItem"><!--Package: org.pdfsam.ui.dashboard; name: org.pdfsam.ui.dashboard.ModulesDashboardItem; file: org.pdfsam.ui.dashboard.ModulesDashboardItem-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">ID</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/dashboard/modules/ModulesDashboardPane">pane</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/dashboard/modules/ModulesDashboardPane;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/ui/dashboard/modules/ModulesDashboardPane">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">pane</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="id"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="name"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/Pane;"
                       name="pane"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/layout/Pane</return>
                  <ops>
                     <op code="get">pane</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/Node;"
                       name="graphic"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/Node</return>
                  <ops>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.get</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.VIEW_MODULE</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.createIcon</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="priority"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
               </method>
            </methods>
         </class>
         <class id="DashboardItemPaneTest"><!--Package: org.pdfsam.ui.dashboard; name: org.pdfsam.ui.dashboard.DashboardItemPaneTest; file: org.pdfsam.ui.dashboard.DashboardItemPaneTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">javaFxThread</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">cleanStudio</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">cleanStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="footerIsAdded"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.DefaultPriorityDashboardItem.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardItemPane.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardItemPane.lookup</op>
                     <op code="call">org.junit.Assert.assertNull</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.activeteModule</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardItemPane.lookup</op>
                     <op code="call">org.junit.Assert.assertNotNull</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DashboardButton"><!--Package: org.pdfsam.ui.dashboard; name: org.pdfsam.ui.dashboard.DashboardButton; file: org.pdfsam.ui.dashboard.DashboardButton-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/dashboard/DashboardItem">item</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/dashboard/DashboardItem;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/ui/dashboard/DashboardItem">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">item</op>
                     <op code="get">item</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardItem.graphic</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardButton.setGraphic</op>
                     <op code="get">item</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardItem.name</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardButton.setText</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardButton.setOnAction</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="selectIf"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">item</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardItem.id</op>
                     <op code="call">java.lang.String.equals</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardButton.setSelected</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DashboardTest$EnabledItem"><!--Package: org.pdfsam.ui.dashboard; name: org.pdfsam.ui.dashboard.DashboardTest$EnabledItem; file: org.pdfsam.ui.dashboard.DashboardTest$EnabledItem-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="priority"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/Pane;"
                       name="pane"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/layout/Pane</return>
                  <ops>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="name"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="id"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/Node;"
                       name="graphic"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/Node</return>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.info">
         <class id="BaseInfoTab"><!--Package: org.pdfsam.ui.info; name: org.pdfsam.ui.info.BaseInfoTab; file: org.pdfsam.ui.info.BaseInfoTab-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/layout/GridPane">grid</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.Tab.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.GridPane.&lt;init&gt;</op>
                     <op code="put">grid</op>
                     <op code="call">org.pdfsam.ui.info.BaseInfoTab.setClosable</op>
                     <op code="get">grid</op>
                     <op code="call">javafx.scene.layout.GridPane.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">grid</op>
                     <op code="get_static">javafx.geometry.Pos.TOP_CENTER</op>
                     <op code="call">javafx.scene.layout.GridPane.setAlignment</op>
                     <op code="call">javafx.scene.layout.ColumnConstraints.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.ColumnConstraints.setPercentWidth</op>
                     <op code="call">javafx.scene.layout.ColumnConstraints.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.ColumnConstraints.setPercentWidth</op>
                     <op code="get">grid</op>
                     <op code="call">javafx.scene.layout.GridPane.getColumnConstraints</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get">grid</op>
                     <op code="call">javafx.scene.control.ScrollPane.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.ScrollPane.setFitToHeight</op>
                     <op code="call">javafx.scene.control.ScrollPane.setFitToWidth</op>
                     <op code="call">org.pdfsam.ui.info.BaseInfoTab.setContent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/GridPane;"
                       name="grid"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>Ljavafx/scene/layout/GridPane</return>
                  <ops>
                     <op code="get">grid</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Ljavafx/scene/control/Label;"
                       name="createTitleLabel"
                       static="true"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljavafx/scene/control/Label</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get_static">javafx.geometry.HPos.RIGHT</op>
                     <op code="call">javafx.scene.layout.GridPane.setHalignment</op>
                     <op code="get_static">javafx.geometry.VPos.TOP</op>
                     <op code="call">javafx.scene.layout.GridPane.setValignment</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/control/Label;"
                       name="createValueLabel"
                       static="true"
                       visibility="protected">
                  <args/>
                  <return>Ljavafx/scene/control/Label</return>
                  <ops>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.control.Label.setWrapText</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="KeywordsTabTest"><!--Package: org.pdfsam.ui.info; name: org.pdfsam.ui.info.KeywordsTabTest; file: org.pdfsam.ui.info.KeywordsTabTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">studio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeJavaFxThreadRule">javaFxThread</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">studio</op>
                     <op code="call">org.pdfsam.test.InitializeJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="showRequest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.info.KeywordsTab.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.info.KeywordsTab.getContent</op>
                     <op code="call">javafx.scene.control.ScrollPane.getContent</op>
                     <op code="call">javafx.scene.Node.lookup</op>
                     <op code="call">org.junit.Assert.assertNotNull</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">javafx.scene.control.Labeled.textProperty</op>
                     <op code="call">javafx.beans.property.StringProperty.addListener</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.KEYWORDS</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.putInformation</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">javafx.beans.value.ChangeListener.changed</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onLoad"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.info.KeywordsTab.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.info.KeywordsTab.getContent</op>
                     <op code="call">javafx.scene.control.ScrollPane.getContent</op>
                     <op code="call">javafx.scene.Node.lookup</op>
                     <op code="call">org.junit.Assert.assertNotNull</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">javafx.scene.control.Labeled.textProperty</op>
                     <op code="call">javafx.beans.property.StringProperty.addListener</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.KEYWORDS</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.putInformation</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.REQUESTED</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.moveStatusTo</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.LOADING</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.moveStatusTo</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.LOADED</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.moveStatusTo</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">javafx.beans.value.ChangeListener.changed</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="InfoPane"><!--Package: org.pdfsam.ui.info; name: org.pdfsam.ui.info.InfoPane; file: org.pdfsam.ui.info.InfoPane-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/info/SummaryTab;Lorg/pdfsam/ui/info/KeywordsTab;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/ui/info/SummaryTab">?</arg>
                     <arg type="Lorg/pdfsam/ui/info/KeywordsTab">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.TabPane.&lt;init&gt;</op>
                     <op code="get_static">javafx.geometry.Side.LEFT</op>
                     <op code="call">org.pdfsam.ui.info.InfoPane.setSide</op>
                     <op code="call">org.pdfsam.ui.info.InfoPane.getTabs</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="KeywordsTab"><!--Package: org.pdfsam.ui.info; name: org.pdfsam.ui.info.KeywordsTab; file: org.pdfsam.ui.info.KeywordsTab-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">keywords</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">current</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.Tab.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="put">keywords</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.VBox.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.info.KeywordsTab.setText</op>
                     <op code="call">org.pdfsam.ui.info.KeywordsTab.setClosable</op>
                     <op code="get">keywords</op>
                     <op code="call">javafx.scene.control.Label.setWrapText</op>
                     <op code="get">keywords</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.layout.VBox.getChildren</op>
                     <op code="get">keywords</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.control.ScrollPane.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.ScrollPane.setFitToHeight</op>
                     <op code="call">javafx.scene.control.ScrollPane.setFitToWidth</op>
                     <op code="call">org.pdfsam.ui.info.KeywordsTab.setContent</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/ShowPdfDescriptorRequest;)V"
                       name="requestShow"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/ShowPdfDescriptorRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">current</op>
                     <op code="call">org.pdfsam.ui.commons.ShowPdfDescriptorRequest.getDescriptor</op>
                     <op code="call">org.pdfsam.ui.commons.ShowPdfDescriptorRequest.getDescriptor</op>
                     <op code="put">current</op>
                     <op code="get">current</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.loadingStatus</op>
                     <op code="call">javafx.beans.value.WeakChangeListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.addListener</op>
                     <op code="get">keywords</op>
                     <op code="call">org.pdfsam.ui.commons.ShowPdfDescriptorRequest.getDescriptor</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.KEYWORDS</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getInformation</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/beans/value/ObservableValue;Lorg/pdfsam/pdf/PdfDescriptorLoadingStatus;Lorg/pdfsam/pdf/PdfDescriptorLoadingStatus;)V"
                       name="changed"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/beans/value/ObservableValue">?</arg>
                     <arg type="Lorg/pdfsam/pdf/PdfDescriptorLoadingStatus">?</arg>
                     <arg type="Lorg/pdfsam/pdf/PdfDescriptorLoadingStatus">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.LOADED</op>
                     <op code="get_static">org.pdfsam.ui.info.KeywordsTab.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="call">javafx.application.Platform.runLater</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.ui.info.KeywordsTab.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="InfoStage"><!--Package: org.pdfsam.ui.info; name: org.pdfsam.ui.info.InfoStage; file: org.pdfsam.ui.info.InfoStage-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/info/InfoPane;Ljava/util/List;Lorg/pdfsam/configuration/StylesConfig;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/info/InfoPane">?</arg>
                     <arg type="Ljava/util/List">?</arg>
                     <arg type="Lorg/pdfsam/configuration/StylesConfig">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.stage.Stage.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.BorderPane.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.BorderPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.layout.BorderPane.setCenter</op>
                     <op code="call">org.pdfsam.ui.commons.ClosePane.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.BorderPane.setBottom</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.getStylesheets</op>
                     <op code="call">org.pdfsam.configuration.StylesConfig.styles</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.commons.HideOnEscapeHandler.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.setOnKeyReleased</op>
                     <op code="call">org.pdfsam.ui.info.InfoStage.setScene</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.info.InfoStage.setTitle</op>
                     <op code="call">org.pdfsam.ui.info.InfoStage.getIcons</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.info.InfoStage.setMaximized</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="InfoStageController"><!--Package: org.pdfsam.ui.info; name: org.pdfsam.ui.info.InfoStageController; file: org.pdfsam.ui.info.InfoStageController-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavax/inject/Provider">stageProvider</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljavax/inject/Provider;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljavax/inject/Provider">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">stageProvider</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/ShowPdfDescriptorRequest;)V"
                       name="requestShow"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/ShowPdfDescriptorRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">stageProvider</op>
                     <op code="call">javax.inject.Provider.get</op>
                     <op code="call">org.pdfsam.ui.info.InfoStage.isShowing</op>
                     <op code="call">org.pdfsam.ui.info.InfoStage.centerOnScreen</op>
                     <op code="call">org.pdfsam.ui.info.InfoStage.show</op>
                     <op code="call">org.pdfsam.ui.info.InfoStage.requestFocus</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="InfoStageTest"><!--Package: org.pdfsam.ui.info; name: org.pdfsam.ui.info.InfoStageTest; file: org.pdfsam.ui.info.InfoStageTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/injector/Injector">injector</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.info.InfoStageTest$Config.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.start</op>
                     <op code="put">injector</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.KEYWORDS</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.putInformation</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="show"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.info.InfoStageTest.clickOn</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.info.InfoStage.isShowing</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="InfoStageTest$Config"><!--Package: org.pdfsam.ui.info; name: org.pdfsam.ui.info.InfoStageTest$Config; file: org.pdfsam.ui.info.InfoStageTest$Config-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/configuration/StylesConfig;"
                       name="style"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Lorg/pdfsam/configuration/StylesConfig</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/image/Image;"
                       name="payoff"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/image/Image</return>
                  <ops>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">javafx.scene.image.Image.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SummaryTab"><!--Package: org.pdfsam.ui.info; name: org.pdfsam.ui.info.SummaryTab; file: org.pdfsam.ui.info.SummaryTab-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Lorg/apache/commons/lang3/time/FastDateFormat">FORMATTER</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">fileLabel</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">size</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">version</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">created</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">modified</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">pages</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">title</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">author</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">creator</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">producer</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">subject</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">current</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.info.BaseInfoTab.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createValueLabel</op>
                     <op code="put">fileLabel</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createValueLabel</op>
                     <op code="put">size</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createValueLabel</op>
                     <op code="put">version</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createValueLabel</op>
                     <op code="put">created</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createValueLabel</op>
                     <op code="put">modified</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createValueLabel</op>
                     <op code="put">pages</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createValueLabel</op>
                     <op code="put">title</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createValueLabel</op>
                     <op code="put">author</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createValueLabel</op>
                     <op code="put">creator</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createValueLabel</op>
                     <op code="put">producer</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createValueLabel</op>
                     <op code="put">subject</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.setText</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createTitleLabel</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="get">fileLabel</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createTitleLabel</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="get">size</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createTitleLabel</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="get">created</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createTitleLabel</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="get">modified</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createTitleLabel</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="get">version</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createTitleLabel</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="get">pages</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createTitleLabel</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="get">title</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createTitleLabel</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="get">author</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createTitleLabel</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="get">creator</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createTitleLabel</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="get">producer</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.createTitleLabel</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.grid</op>
                     <op code="get">subject</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/ShowPdfDescriptorRequest;)V"
                       name="requestShow"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/ShowPdfDescriptorRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">current</op>
                     <op code="call">org.pdfsam.ui.commons.ShowPdfDescriptorRequest.getDescriptor</op>
                     <op code="call">org.pdfsam.ui.commons.ShowPdfDescriptorRequest.getDescriptor</op>
                     <op code="put">current</op>
                     <op code="get">current</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.loadingStatus</op>
                     <op code="call">javafx.beans.value.WeakChangeListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.addListener</op>
                     <op code="get">current</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getFile</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.setFileProperties</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.setPdfProperties</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/File;)V"
                       name="setFileProperties"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">fileLabel</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                     <op code="get">size</op>
                     <op code="call">java.io.File.length</op>
                     <op code="call">org.apache.commons.io.FileUtils.byteCountToDisplaySize</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                     <op code="get">modified</op>
                     <op code="get_static">org.pdfsam.ui.info.SummaryTab.FORMATTER</op>
                     <op code="call">java.io.File.lastModified</op>
                     <op code="call">org.apache.commons.lang3.time.FastDateFormat.format</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setPdfProperties"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">version</op>
                     <op code="get">current</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getVersionString</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                     <op code="get">pages</op>
                     <op code="get">current</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.pages</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.getValue</op>
                     <op code="call">java.lang.Integer.intValue</op>
                     <op code="call">java.lang.Integer.toString</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                     <op code="get">created</op>
                     <op code="get">current</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getInformation</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                     <op code="get">title</op>
                     <op code="get">current</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.TITLE</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getInformation</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                     <op code="get">author</op>
                     <op code="get">current</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.AUTHOR</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getInformation</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                     <op code="get">creator</op>
                     <op code="get">current</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.CREATOR</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getInformation</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                     <op code="get">subject</op>
                     <op code="get">current</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.SUBJECT</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getInformation</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                     <op code="get">producer</op>
                     <op code="get">current</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getInformation</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/beans/value/ObservableValue;Lorg/pdfsam/pdf/PdfDescriptorLoadingStatus;Lorg/pdfsam/pdf/PdfDescriptorLoadingStatus;)V"
                       name="changed"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/beans/value/ObservableValue">?</arg>
                     <arg type="Lorg/pdfsam/pdf/PdfDescriptorLoadingStatus">?</arg>
                     <arg type="Lorg/pdfsam/pdf/PdfDescriptorLoadingStatus">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.LOADED</op>
                     <op code="get_static">org.pdfsam.ui.info.SummaryTab.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="call">javafx.application.Platform.runLater</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.ui.info.SummaryTab.LOG</op>
                     <op code="call">org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance</op>
                     <op code="put_static">org.pdfsam.ui.info.SummaryTab.FORMATTER</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SummaryTabTest"><!--Package: org.pdfsam.ui.info; name: org.pdfsam.ui.info.SummaryTabTest; file: org.pdfsam.ui.info.SummaryTabTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Lorg/apache/commons/lang3/time/FastDateFormat">FORMATTER</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">studio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeJavaFxThreadRule">javaFxThread</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">studio</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                     <op code="call">org.pdfsam.test.InitializeJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="showRequest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.getContent</op>
                     <op code="call">javafx.scene.control.ScrollPane.getContent</op>
                     <op code="call">javafx.scene.Node.lookupAll</op>
                     <op code="call">org.junit.Assert.assertNotNull</op>
                     <op code="call">java.util.Set.isEmpty</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTabTest.initListener</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTabTest.fillDescriptor</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTabTest.assertInfoIsDisplayed</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onLoad"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTab.getContent</op>
                     <op code="call">javafx.scene.control.ScrollPane.getContent</op>
                     <op code="call">javafx.scene.Node.lookupAll</op>
                     <op code="call">org.junit.Assert.assertNotNull</op>
                     <op code="call">java.util.Set.isEmpty</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTabTest.initListener</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTabTest.fillDescriptor</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.REQUESTED</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.moveStatusTo</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.LOADING</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.moveStatusTo</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.LOADED</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.moveStatusTo</op>
                     <op code="call">org.pdfsam.ui.info.SummaryTabTest.assertInfoIsDisplayed</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Set;)Ljava/util/List;"
                       name="initListener"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/Set">?</arg>
                  </args>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="call">java.util.Set.stream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/pdf/PdfDocumentDescriptor;)V"
                       name="fillDescriptor"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.TITLE</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.putInformation</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.AUTHOR</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.putInformation</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.CREATOR</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.putInformation</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.SUBJECT</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.putInformation</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.putInformation</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.putInformation</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.pages</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_5</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.setVersion</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/List;Lorg/pdfsam/pdf/PdfDocumentDescriptor;)V"
                       name="assertInfoIsDisplayed"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                     <arg type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getFile</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getVersionString</op>
                     <op code="call">java.io.File.length</op>
                     <op code="call">org.apache.commons.io.FileUtils.byteCountToDisplaySize</op>
                     <op code="get_static">org.pdfsam.ui.info.SummaryTabTest.FORMATTER</op>
                     <op code="call">java.io.File.lastModified</op>
                     <op code="call">org.apache.commons.lang3.time.FastDateFormat.format</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">java.util.List.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance</op>
                     <op code="put_static">org.pdfsam.ui.info.SummaryTabTest.FORMATTER</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.i18n">
         <class id="DefaultI18nContextTest"><!--Package: org.pdfsam.i18n; name: org.pdfsam.i18n.DefaultI18nContextTest; file: org.pdfsam.i18n.DefaultI18nContextTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="tearDown"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.clear</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="refreshSets"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.&lt;init&gt;</op>
                     <op code="get_static">java.util.Locale.UK</op>
                     <op code="call">java.util.Locale.setDefault</op>
                     <op code="get_static">java.util.Locale.ITALIAN</op>
                     <op code="call">java.util.Locale.toLanguageTag</op>
                     <op code="call">org.pdfsam.i18n.SetLocaleEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.refresh</op>
                     <op code="get_static">java.util.Locale.ITALIAN</op>
                     <op code="call">java.util.Locale.getDefault</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="refreshNotExistingDoesntExplode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.&lt;init&gt;</op>
                     <op code="get_static">java.util.Locale.UK</op>
                     <op code="call">java.util.Locale.setDefault</op>
                     <op code="call">org.pdfsam.i18n.SetLocaleEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.refresh</op>
                     <op code="get_static">java.util.Locale.UK</op>
                     <op code="call">java.util.Locale.getDefault</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getBestLocaleNotSupported"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.&lt;init&gt;</op>
                     <op code="get_static">java.util.Locale.CANADA</op>
                     <op code="call">java.util.Locale.setDefault</op>
                     <op code="get_static">java.util.Locale.UK</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getBestLocale</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getBestLocaletSupported"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.&lt;init&gt;</op>
                     <op code="get_static">java.util.Locale.ITALIAN</op>
                     <op code="call">java.util.Locale.setDefault</op>
                     <op code="get_static">java.util.Locale.ITALIAN</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getBestLocale</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getBestLocaletLanguageSupported"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.&lt;init&gt;</op>
                     <op code="get_static">java.util.Locale.CANADA_FRENCH</op>
                     <op code="call">java.util.Locale.setDefault</op>
                     <op code="get_static">java.util.Locale.FRENCH</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getBestLocale</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SetLocaleEventTest"><!--Package: org.pdfsam.i18n; name: org.pdfsam.i18n.SetLocaleEventTest; file: org.pdfsam.i18n.SetLocaleEventTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.SetLocaleEvent.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="blankArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.SetLocaleEvent.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="notNullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.SetLocaleEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.SetLocaleEvent.getLocaleString</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DefaultI18nContext$DefaultI18nContextHolder"><!--Package: org.pdfsam.i18n; name: org.pdfsam.i18n.DefaultI18nContext$DefaultI18nContextHolder; file: org.pdfsam.i18n.DefaultI18nContext$DefaultI18nContextHolder-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/pdfsam/i18n/DefaultI18nContext">CONTEXT</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.i18n.DefaultI18nContext$DefaultI18nContextHolder.CONTEXT</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DefaultI18nContext"><!--Package: org.pdfsam.i18n; name: org.pdfsam.i18n.DefaultI18nContext; file: org.pdfsam.i18n.DefaultI18nContext-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="true" public="true" static="true" type="Ljava/util/Set">SUPPORTED_LOCALES</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/xnap/commons/i18n/I18n">i18n</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getBestLocale</op>
                     <op code="call">java.util.Locale.setDefault</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.refreshBundles</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="refreshBundles"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.i18n.DefaultI18nContext.LOG</op>
                     <op code="call">java.util.Locale.getDefault</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="call">org.xnap.commons.i18n.I18nFactory.getI18n</op>
                     <op code="put">i18n</op>
                     <op code="get_static">org.pdfsam.i18n.DefaultI18nContext.LOG</op>
                     <op code="call">java.util.Locale.getDefault</op>
                     <op code="call">java.util.Locale.getDisplayLanguage</op>
                     <op code="call">org.slf4j.Logger.debug</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/i18n/SetLocaleEvent;)V"
                       name="refresh"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/i18n/SetLocaleEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.SetLocaleEvent.getLocaleString</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotBlank</op>
                     <op code="get_static">org.pdfsam.i18n.DefaultI18nContext.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="call">java.util.Locale.forLanguageTag</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="get_static">org.pdfsam.i18n.DefaultI18nContext.SUPPORTED_LOCALES</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.Optional.filter</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.refreshBundles</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Locale;"
                       name="getBestLocale"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Ljava/util/Locale</return>
                  <ops>
                     <op code="get_static">org.pdfsam.i18n.DefaultI18nContext.SUPPORTED_LOCALES</op>
                     <op code="call">java.util.Locale.getDefault</op>
                     <op code="call">java.util.Set.contains</op>
                     <op code="call">java.util.Locale.getDefault</op>
                     <op code="call">java.util.Locale.getDefault</op>
                     <op code="call">java.util.Locale.getLanguage</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.i18n.DefaultI18nContext.SUPPORTED_LOCALES</op>
                     <op code="call">java.util.Set.contains</op>
                     <op code="get_static">org.pdfsam.i18n.DefaultI18nContext.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="get_static">org.pdfsam.i18n.DefaultI18nContext.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="get_static">java.util.Locale.UK</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/i18n/I18nContext;"
                       name="getInstance"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/i18n/I18nContext</return>
                  <ops>
                     <op code="get_static">org.pdfsam.i18n.DefaultI18nContext$DefaultI18nContextHolder.CONTEXT</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Ljava/lang/String;"
                       name="i18n"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">i18n</op>
                     <op code="call">org.xnap.commons.i18n.I18n.tr</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;"
                       name="i18n"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">i18n</op>
                     <op code="call">org.xnap.commons.i18n.I18n.tr</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;"
                       name="i18n"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">i18n</op>
                     <op code="call">org.xnap.commons.i18n.I18n.tr</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.i18n.DefaultI18nContext.LOG</op>
                     <op code="call">java.util.LinkedHashSet.&lt;init&gt;</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="get_static">java.util.Locale.SIMPLIFIED_CHINESE</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="get_static">java.util.Locale.TRADITIONAL_CHINESE</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="get_static">java.util.Locale.UK</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="get_static">java.util.Locale.FRENCH</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="get_static">java.util.Locale.GERMAN</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="get_static">java.util.Locale.JAPANESE</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="get_static">java.util.Locale.ITALIAN</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Locale.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Collections.unmodifiableSet</op>
                     <op code="put_static">org.pdfsam.i18n.DefaultI18nContext.SUPPORTED_LOCALES</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SetLocaleEvent"><!--Package: org.pdfsam.i18n; name: org.pdfsam.i18n.SetLocaleEvent; file: org.pdfsam.i18n.SetLocaleEvent-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">localeString</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isBlank</op>
                     <op code="call">java.lang.IllegalArgumentException.&lt;init&gt;</op>
                     <op code="put">localeString</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getLocaleString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">localeString</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.support.params">
         <class id="AbstractPdfOutputParametersBuilder"><!--Package: org.pdfsam.support.params; name: org.pdfsam.support.params.AbstractPdfOutputParametersBuilder; file: org.pdfsam.support.params.AbstractPdfOutputParametersBuilder-->
            <attributes>
               <attribute final="false" public="false" static="false" type="Z">compress</attribute>
               <attribute final="false" public="false" static="false" type="Z">discardBookmarks</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/pdf/PdfVersion">version</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.AbstractParametersBuilder.&lt;init&gt;</op>
                     <op code="put">discardBookmarks</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)V"
                       name="compress"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">compress</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isCompress"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">compress</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/pdf/PdfVersion;)V"
                       name="version"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/pdf/PdfVersion">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">version</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/pdf/PdfVersion;"
                       name="getVersion"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>Lorg/sejda/model/pdf/PdfVersion</return>
                  <ops>
                     <op code="get">version</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)V"
                       name="discardBookmarks"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">discardBookmarks</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isDiscardBookmarks"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">discardBookmarks</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ConversionUtils"><!--Package: org.pdfsam.support.params; name: org.pdfsam.support.params.ConversionUtils; file: org.pdfsam.support.params.ConversionUtils-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Ljava/util/Set;"
                       name="toPageRangeSet"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/util/Set</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotBlank</op>
                     <op code="call">org.sejda.commons.collection.NullSafeSet.&lt;init&gt;</op>
                     <op code="call">org.sejda.conversion.AdapterUtils.splitAndTrim</op>
                     <op code="call">org.pdfsam.support.params.ConversionUtils.toPageRange</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getEnd</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getStart</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.toString</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.sejda.conversion.exception.ConversionException.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">java.util.Collections.emptySet</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lorg/sejda/model/pdf/page/PageRange;"
                       name="toPageRange"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lorg/sejda/model/pdf/page/PageRange</return>
                  <ops>
                     <op code="call">org.sejda.conversion.AdapterUtils.splitAndTrim</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.sejda.conversion.exception.ConversionException.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.params.ConversionUtils.parsePageNumber</op>
                     <op code="call">java.lang.String.endsWith</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.&lt;init&gt;</op>
                     <op code="call">java.lang.String.startsWith</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.params.ConversionUtils.parsePageNumber</op>
                     <op code="call">org.pdfsam.support.params.ConversionUtils.parsePageNumber</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)I"
                       name="parsePageNumber"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="call">java.lang.String.trim</op>
                     <op code="call">java.lang.Integer.parseInt</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.sejda.conversion.exception.ConversionException.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="AbstractParametersBuilder"><!--Package: org.pdfsam.support.params; name: org.pdfsam.support.params.AbstractParametersBuilder; file: org.pdfsam.support.params.AbstractParametersBuilder-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Ljava/lang/String">PDFSAM_DISABLE_SPLIT_OPTIMIZATION</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/output/ExistingOutputPolicy">existingOutput</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.FAIL</op>
                     <op code="put">existingOutput</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/output/ExistingOutputPolicy;)V"
                       name="existingOutput"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/output/ExistingOutputPolicy">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">existingOutput</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/output/ExistingOutputPolicy;"
                       name="existingOutput"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>Lorg/sejda/model/output/ExistingOutputPolicy</return>
                  <ops>
                     <op code="get">existingOutput</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ConversionUtilsTest"><!--Package: org.pdfsam.support.params; name: org.pdfsam.support.params.ConversionUtilsTest; file: org.pdfsam.support.params.ConversionUtilsTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.ConversionUtils.toPageRangeSet</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidRange"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.ConversionUtils.toPageRangeSet</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="endLower"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.ConversionUtils.toPageRangeSet</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="singlePage"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.ConversionUtils.toPageRangeSet</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.Set.stream</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getStart</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.Set.stream</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getEnd</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="rangePage"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.ConversionUtils.toPageRangeSet</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.Set.stream</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getStart</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.Set.stream</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getEnd</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="endPage"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.ConversionUtils.toPageRangeSet</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.Set.stream</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getStart</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.Set.stream</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getEnd</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="startPage"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.ConversionUtils.toPageRangeSet</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.Set.stream</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getStart</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.Set.stream</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.isUnbounded</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="multiple"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.ConversionUtils.toPageRangeSet</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.Set.stream</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getStart</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.Set.stream</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getEnd</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.Set.stream</op>
                     <op code="call">java.util.stream.Stream.anyMatch</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MultiplePdfSourceMultipleOutputParametersBuilder"><!--Package: org.pdfsam.support.params; name: org.pdfsam.support.params.MultiplePdfSourceMultipleOutputParametersBuilder; file: org.pdfsam.support.params.MultiplePdfSourceMultipleOutputParametersBuilder-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Set">inputs</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/output/SingleOrMultipleTaskOutput">output</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">prefix</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.AbstractPdfOutputParametersBuilder.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.collection.NullSafeSet.&lt;init&gt;</op>
                     <op code="put">inputs</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/input/PdfFileSource;)V"
                       name="addSource"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/input/PdfFileSource">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">inputs</op>
                     <op code="call">java.util.Set.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="prefix"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">prefix</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/output/SingleOrMultipleTaskOutput;)V"
                       name="output"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/output/SingleOrMultipleTaskOutput">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">output</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/output/SingleOrMultipleTaskOutput;"
                       name="getOutput"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/sejda/model/output/SingleOrMultipleTaskOutput</return>
                  <ops>
                     <op code="get">output</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getPrefix"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">prefix</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Set;"
                       name="getInputs"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/Set</return>
                  <ops>
                     <op code="get">inputs</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="hasInput"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">inputs</op>
                     <op code="call">java.util.Set.isEmpty</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SinglePdfSourceMultipleOutputParametersBuilder"><!--Package: org.pdfsam.support.params; name: org.pdfsam.support.params.SinglePdfSourceMultipleOutputParametersBuilder; file: org.pdfsam.support.params.SinglePdfSourceMultipleOutputParametersBuilder-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/input/PdfFileSource">source</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/output/SingleOrMultipleTaskOutput">output</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">prefix</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.AbstractPdfOutputParametersBuilder.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/input/PdfFileSource;)V"
                       name="source"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/input/PdfFileSource">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">source</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/output/SingleOrMultipleTaskOutput;)V"
                       name="output"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/output/SingleOrMultipleTaskOutput">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">output</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="prefix"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">prefix</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/input/PdfFileSource;"
                       name="getSource"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>Lorg/sejda/model/input/PdfFileSource</return>
                  <ops>
                     <op code="get">source</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/output/SingleOrMultipleTaskOutput;"
                       name="getOutput"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>Lorg/sejda/model/output/SingleOrMultipleTaskOutput</return>
                  <ops>
                     <op code="get">output</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getPrefix"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">prefix</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitParametersBuilder"><!--Package: org.pdfsam.support.params; name: org.pdfsam.support.params.SplitParametersBuilder; file: org.pdfsam.support.params.SplitParametersBuilder-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/optimization/OptimizationPolicy">optimizationPolicy</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.SinglePdfSourceMultipleOutputParametersBuilder.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.optimization.OptimizationPolicy.AUTO</op>
                     <op code="put">optimizationPolicy</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/optimization/OptimizationPolicy;)V"
                       name="optimizationPolicy"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/optimization/OptimizationPolicy">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">optimizationPolicy</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/optimization/OptimizationPolicy;"
                       name="getOptimizationPolicy"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/sejda/model/optimization/OptimizationPolicy</return>
                  <ops>
                     <op code="call">java.lang.Boolean.getBoolean</op>
                     <op code="get">optimizationPolicy</op>
                     <op code="get_static">org.sejda.model.optimization.OptimizationPolicy.NO</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.workspace">
         <class id="SaveWorkspaceEvent"><!--Package: org.pdfsam.ui.workspace; name: org.pdfsam.ui.workspace.SaveWorkspaceEvent; file: org.pdfsam.ui.workspace.SaveWorkspaceEvent-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Map">data</attribute>
               <attribute final="true" public="true" static="false" type="Z">awaitCompletion</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/io/File;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.workspace.BaseWorkspaceEvent.&lt;init&gt;</op>
                     <op code="call">java.util.concurrent.ConcurrentHashMap.&lt;init&gt;</op>
                     <op code="put">data</op>
                     <op code="put">awaitCompletion</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/io/File;Z)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.workspace.BaseWorkspaceEvent.&lt;init&gt;</op>
                     <op code="call">java.util.concurrent.ConcurrentHashMap.&lt;init&gt;</op>
                     <op code="put">data</op>
                     <op code="put">awaitCompletion</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Map;"
                       name="getData"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/Map</return>
                  <ops>
                     <op code="get">data</op>
                     <op code="call">java.util.Collections.unmodifiableMap</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V"
                       name="addValue"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.getDataForModule</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="call">java.util.Map.put</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Ljava/util/Map;"
                       name="getDataForModule"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/util/Map</return>
                  <ops>
                     <op code="get">data</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">data</op>
                     <op code="call">java.util.Map.putIfAbsent</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LoadWorkspaceEvent"><!--Package: org.pdfsam.ui.workspace; name: org.pdfsam.ui.workspace.LoadWorkspaceEvent; file: org.pdfsam.ui.workspace.LoadWorkspaceEvent-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Map">data</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/io/File;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.workspace.BaseWorkspaceEvent.&lt;init&gt;</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="put">data</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="setData"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="get">data</op>
                     <op code="call">java.util.Map.putAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Ljava/util/Map;"
                       name="getData"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/util/Map</return>
                  <ops>
                     <op code="get">data</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.orElseGet</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="WorkspaceLoadedEvent"><!--Package: org.pdfsam.ui.workspace; name: org.pdfsam.ui.workspace.WorkspaceLoadedEvent; file: org.pdfsam.ui.workspace.WorkspaceLoadedEvent-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/io/File;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.workspace.BaseWorkspaceEvent.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LoadWorkspaceEventTest"><!--Package: org.pdfsam.ui.workspace; name: org.pdfsam.ui.workspace.LoadWorkspaceEventTest; file: org.pdfsam.ui.workspace.LoadWorkspaceEventTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullRequiredFile"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.workspace.LoadWorkspaceEvent.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="requiredFile"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.workspace.LoadWorkspaceEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.workspace.LoadWorkspaceEvent.workspace</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setData"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.workspace.LoadWorkspaceEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.workspace.LoadWorkspaceEvent.setData</op>
                     <op code="call">org.pdfsam.ui.workspace.LoadWorkspaceEvent.getData</op>
                     <op code="call">java.util.Map.isEmpty</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getNonExisting"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.workspace.LoadWorkspaceEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.workspace.LoadWorkspaceEvent.setData</op>
                     <op code="call">org.pdfsam.ui.workspace.LoadWorkspaceEvent.getData</op>
                     <op code="call">org.junit.Assert.assertNotNull</op>
                     <op code="call">org.pdfsam.ui.workspace.LoadWorkspaceEvent.getData</op>
                     <op code="call">java.util.Map.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BaseWorkspaceEvent"><!--Package: org.pdfsam.ui.workspace; name: org.pdfsam.ui.workspace.BaseWorkspaceEvent; file: org.pdfsam.ui.workspace.BaseWorkspaceEvent-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/io/File">workspace</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/io/File;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">workspace</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/io/File;"
                       name="workspace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/io/File</return>
                  <ops>
                     <op code="get">workspace</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SaveWorkspaceEventTest"><!--Package: org.pdfsam.ui.workspace; name: org.pdfsam.ui.workspace.SaveWorkspaceEventTest; file: org.pdfsam.ui.workspace.SaveWorkspaceEventTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/workspace/SaveWorkspaceEvent">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="requiredFile"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nonNullKey"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.addValue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.addValue</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.getDataForModule</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="add"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.getData</op>
                     <op code="call">java.util.Map.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.addValue</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.getData</op>
                     <op code="call">java.util.Map.isEmpty</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="addToTheRightModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.addValue</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.getData</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Map.isEmpty</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.getData</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Objects.isNull</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="multipleAdd"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.addValue</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.addValue</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.getDataForModule</op>
                     <op code="call">java.util.Map.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullSafeGet"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.getDataForModule</op>
                     <op code="call">java.util.Map.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="WorkspaceLoadedEventTest"><!--Package: org.pdfsam.ui.workspace; name: org.pdfsam.ui.workspace.WorkspaceLoadedEventTest; file: org.pdfsam.ui.workspace.WorkspaceLoadedEventTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullRequiredFile"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.workspace.WorkspaceLoadedEvent.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="requiredFile"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.workspace.WorkspaceLoadedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.workspace.WorkspaceLoadedEvent.workspace</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.update">
         <class id="UpdateCheckRequest"><!--Package: org.pdfsam.update; name: org.pdfsam.update.UpdateCheckRequest; file: org.pdfsam.update.UpdateCheckRequest-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Lorg/pdfsam/update/UpdateCheckRequest">INSTANCE</attribute>
               <attribute final="true" public="true" static="false" type="Z">nofityNoUpdates</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">nofityNoUpdates</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Z)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">nofityNoUpdates</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.update.UpdateCheckRequest.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.update.UpdateCheckRequest.INSTANCE</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="UpdateServiceConfig"><!--Package: org.pdfsam.update; name: org.pdfsam.update.UpdateServiceConfig; file: org.pdfsam.update.UpdateServiceConfig-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/update/DefaultUpdateService;)Lorg/pdfsam/update/UpdateService;"
                       name="news"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/update/DefaultUpdateService">?</arg>
                  </args>
                  <return>Lorg/pdfsam/update/UpdateService</return>
               </method>
            </methods>
         </class>
         <class id="UpdatesControllerTest"><!--Package: org.pdfsam.update; name: org.pdfsam.update.UpdatesControllerTest; file: org.pdfsam.update.UpdatesControllerTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeJavaFxThreadRule">javaFX</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/update/UpdatesController">victim</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/update/UpdateService">service</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/eventstudio/Listener">listener</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/eventstudio/Listener">noUpdatesListener</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                     <op code="call">org.pdfsam.test.InitializeJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFX</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">service</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">listener</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">noUpdatesListener</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.VERSION</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.update.UpdatesController.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="pasitiveCheckForUpdates"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.update.UpdateService.getLatestVersion</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">listener</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.update.UpdateCheckRequest.INSTANCE</op>
                     <op code="call">org.pdfsam.update.UpdatesController.checkForUpdates</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.update.UpdateService.getLatestVersion</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="pasitiveCheckForUpdatesNotifyNoUpdates"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.update.UpdateService.getLatestVersion</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">listener</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">noUpdatesListener</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.update.UpdateCheckRequest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.update.UpdatesController.checkForUpdates</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.update.UpdateService.getLatestVersion</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">noUpdatesListener</op>
                     <op code="call">org.mockito.Mockito.after</op>
                     <op code="call">org.mockito.verification.VerificationAfterDelay.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="negativeCheckForUpdates"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.update.UpdateService.getLatestVersion</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">listener</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.update.UpdateCheckRequest.INSTANCE</op>
                     <op code="call">org.pdfsam.update.UpdatesController.checkForUpdates</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.update.UpdateService.getLatestVersion</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.after</op>
                     <op code="call">org.mockito.verification.VerificationAfterDelay.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="negativeCheckForUpdatesNotifyNoUpdates"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.update.UpdateService.getLatestVersion</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">listener</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">noUpdatesListener</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.update.UpdateCheckRequest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.update.UpdatesController.checkForUpdates</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.update.UpdateService.getLatestVersion</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.after</op>
                     <op code="call">org.mockito.verification.VerificationAfterDelay.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">noUpdatesListener</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="exceptionalCheckForUpdates"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.update.UpdateService.getLatestVersion</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.RuntimeException.&lt;init&gt;</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenThrow</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">listener</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.update.UpdateCheckRequest.INSTANCE</op>
                     <op code="call">org.pdfsam.update.UpdatesController.checkForUpdates</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.update.UpdateService.getLatestVersion</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.after</op>
                     <op code="call">org.mockito.verification.VerificationAfterDelay.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="UpdateAvailableEvent"><!--Package: org.pdfsam.update; name: org.pdfsam.update.UpdateAvailableEvent; file: org.pdfsam.update.UpdateAvailableEvent-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Ljava/lang/String">availableVersion</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="put">availableVersion</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DefaultUpdateServiceTest"><!--Package: org.pdfsam.update; name: org.pdfsam.update.DefaultUpdateServiceTest; file: org.pdfsam.update.DefaultUpdateServiceTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeJavaFxThreadRule">javaFX</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                     <op code="call">org.pdfsam.test.InitializeJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFX</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="pasitiveCheckForUpdates"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.update.DefaultUpdateService.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.update.DefaultUpdateService.getLatestVersion</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="negativeCheckForUpdates"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.update.DefaultUpdateService.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.update.DefaultUpdateService.getLatestVersion</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="NoUpdateAvailable"><!--Package: org.pdfsam.update; name: org.pdfsam.update.NoUpdateAvailable; file: org.pdfsam.update.NoUpdateAvailable-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="UpdateAvailableEventTest"><!--Package: org.pdfsam.update; name: org.pdfsam.update.UpdateAvailableEventTest; file: org.pdfsam.update.UpdateAvailableEventTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.update.UpdateAvailableEvent.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="blankArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.update.UpdateAvailableEvent.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="notNullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.update.UpdateAvailableEvent.&lt;init&gt;</op>
                     <op code="get">availableVersion</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="UpdatesController"><!--Package: org.pdfsam.update; name: org.pdfsam.update.UpdatesController; file: org.pdfsam.update.UpdatesController-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/Pdfsam">pdfsam</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/update/UpdateService">service</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/update/UpdateService;Lorg/pdfsam/Pdfsam;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/update/UpdateService">?</arg>
                     <arg type="Lorg/pdfsam/Pdfsam">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">service</op>
                     <op code="put">pdfsam</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/update/UpdateCheckRequest;)V"
                       name="checkForUpdates"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/update/UpdateCheckRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.update.UpdatesController.LOG</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.slf4j.Logger.debug</op>
                     <op code="get">service</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.concurrent.CompletableFuture.supplyAsync</op>
                     <op code="call">java.util.concurrent.CompletableFuture.thenAccept</op>
                     <op code="call">java.util.concurrent.CompletableFuture.whenComplete</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.update.UpdatesController.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DefaultUpdateService"><!--Package: org.pdfsam.update; name: org.pdfsam.update.DefaultUpdateService; file: org.pdfsam.update.DefaultUpdateService-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">CURRENT_VERSION_KEY</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/Object">jsonSource</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/Object;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">jsonSource</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getLatestVersion"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">jsonSource</op>
                     <op code="get_static">com.fasterxml.jackson.jr.ob.JSON.std</op>
                     <op code="get">jsonSource</op>
                     <op code="call">org.pdfsam.support.io.NetUtils.urlToStream</op>
                     <op code="call">com.fasterxml.jackson.jr.ob.JSON.mapFrom</op>
                     <op code="call">java.util.Map.getOrDefault</op>
                     <op code="call">java.lang.Object.toString</op>
                     <op code="get_static">com.fasterxml.jackson.jr.ob.JSON.std</op>
                     <op code="get">jsonSource</op>
                     <op code="call">com.fasterxml.jackson.jr.ob.JSON.mapFrom</op>
                     <op code="call">java.util.Map.getOrDefault</op>
                     <op code="call">java.lang.Object.toString</op>
                     <op code="get_static">org.pdfsam.update.DefaultUpdateService.LOG</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.slf4j.Logger.warn</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.update.DefaultUpdateService.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.support.validation">
         <class id="AlwaysInvalidStringTest"><!--Package: org.pdfsam.support.validation; name: org.pdfsam.support.validation.AlwaysInvalidStringTest; file: org.pdfsam.support.validation.AlwaysInvalidStringTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/support/validation/Validator">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.validation.Validators.alwaysFalse</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="negative"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="blank"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="empty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BlankStringDecoratorTest"><!--Package: org.pdfsam.support.validation; name: org.pdfsam.support.validation.BlankStringDecoratorTest; file: org.pdfsam.support.validation.BlankStringDecoratorTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/support/validation/Validator">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.validation.Validators.positiveInteger</op>
                     <op code="call">org.pdfsam.support.validation.Validators.validEmpty</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="negative"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="positive"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="blank"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="empty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ContainedIntegerValidator"><!--Package: org.pdfsam.support.validation; name: org.pdfsam.support.validation.ContainedIntegerValidator; file: org.pdfsam.support.validation.ContainedIntegerValidator-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Set">valid</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/Set;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Set">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">java.util.HashSet.&lt;init&gt;</op>
                     <op code="put">valid</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="get">valid</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.Optional.map</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Z"
                       name="isValid"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get">valid</op>
                     <op code="call">java.lang.Integer.parseInt</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Set.contains</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ContainedIntegerValidatorTest"><!--Package: org.pdfsam.support.validation; name: org.pdfsam.support.validation.ContainedIntegerValidatorTest; file: org.pdfsam.support.validation.ContainedIntegerValidatorTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/support/validation/Validator">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">java.util.HashSet.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.validation.Validators.containedInteger</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testNotContained"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testInvalid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testValid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DirectoryValidatorTest"><!--Package: org.pdfsam.support.validation; name: org.pdfsam.support.validation.DirectoryValidatorTest; file: org.pdfsam.support.validation.DirectoryValidatorTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/support/validation/Validator">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.validation.Validators.existingDirectory</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testNegative"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testPositive"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.nio.file.Files.createTempDirectory</op>
                     <op code="get">victim</op>
                     <op code="call">java.nio.file.Path.toAbsolutePath</op>
                     <op code="call">java.nio.file.Path.toString</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.nio.file.Files.delete</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testAllowBlank"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validators.validEmpty</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="FileTypeValidator"><!--Package: org.pdfsam.support.validation; name: org.pdfsam.support.validation.FileTypeValidator; file: org.pdfsam.support.validation.FileTypeValidator-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/support/io/FileType">type</attribute>
               <attribute final="false" public="false" static="false" type="Z">mustExist</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/support/io/FileType;Z)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/support/io/FileType">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.validation.FileValidator.&lt;init&gt;</op>
                     <op code="put">mustExist</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">type</op>
                     <op code="put">mustExist</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Z"
                       name="isValid"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get">mustExist</op>
                     <op code="call">org.pdfsam.support.validation.FileValidator.isValid</op>
                     <op code="get">type</op>
                     <op code="call">org.pdfsam.support.io.FileType.matches</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PositiveIntegerValidator"><!--Package: org.pdfsam.support.validation; name: org.pdfsam.support.validation.PositiveIntegerValidator; file: org.pdfsam.support.validation.PositiveIntegerValidator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Integer;)Z"
                       name="isValid"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Integer">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="call">java.lang.Integer.intValue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PositiveIntRangeStringValidator"><!--Package: org.pdfsam.support.validation; name: org.pdfsam.support.validation.PositiveIntRangeStringValidator; file: org.pdfsam.support.validation.PositiveIntRangeStringValidator-->
            <attributes>
               <attribute final="false" public="false" static="false" type="I">upper</attribute>
               <attribute final="false" public="false" static="false" type="I">lower</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(II)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.validation.PositiveIntegerStringValidator.&lt;init&gt;</op>
                     <op code="put">upper</op>
                     <op code="put">lower</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireArg</op>
                     <op code="put">upper</op>
                     <op code="put">lower</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Z"
                       name="isValid"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">org.pdfsam.support.validation.PositiveIntegerStringValidator.isValid</op>
                     <op code="call">java.lang.Integer.parseInt</op>
                     <op code="get">lower</op>
                     <op code="get">upper</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="FileValidatorTest"><!--Package: org.pdfsam.support.validation; name: org.pdfsam.support.validation.FileValidatorTest; file: org.pdfsam.support.validation.FileValidatorTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/support/validation/Validator">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.validation.Validators.existingFile</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testNegative"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testPositive"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.nio.file.Files.createTempFile</op>
                     <op code="get">victim</op>
                     <op code="call">java.nio.file.Path.toAbsolutePath</op>
                     <op code="call">java.nio.file.Path.toString</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.nio.file.Files.delete</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testAllowBlank"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validators.validEmpty</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RegexValidator"><!--Package: org.pdfsam.support.validation; name: org.pdfsam.support.validation.RegexValidator; file: org.pdfsam.support.validation.RegexValidator-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/regex/Pattern">pattern</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="call">java.util.regex.Pattern.compile</op>
                     <op code="put">pattern</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Z"
                       name="isValid"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotBlank</op>
                     <op code="get">pattern</op>
                     <op code="call">java.util.regex.Pattern.matcher</op>
                     <op code="call">java.util.regex.Matcher.matches</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="NonBlankStringValidatorTest"><!--Package: org.pdfsam.support.validation; name: org.pdfsam.support.validation.NonBlankStringValidatorTest; file: org.pdfsam.support.validation.NonBlankStringValidatorTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/support/validation/Validator">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.validation.Validators.nonBlank</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testNegative"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testPositive"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RegexValidatorTest"><!--Package: org.pdfsam.support.validation; name: org.pdfsam.support.validation.RegexValidatorTest; file: org.pdfsam.support.validation.RegexValidatorTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/support/validation/Validator">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.validation.Validators.regexMatching</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testNegative"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testPositive"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testAllowBlank"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validators.validEmpty</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="IntRangeStringValidatorTest"><!--Package: org.pdfsam.support.validation; name: org.pdfsam.support.validation.IntRangeStringValidatorTest; file: org.pdfsam.support.validation.IntRangeStringValidatorTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/support/validation/Validator">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.validation.Validators.positiveIntRange</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="negative"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidLower"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.validation.Validators.positiveIntRange</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidUpper"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.validation.Validators.positiveIntRange</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="valid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="allowBlank"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validators.validEmpty</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PositiveIntegerStringValidator"><!--Package: org.pdfsam.support.validation; name: org.pdfsam.support.validation.PositiveIntegerStringValidator; file: org.pdfsam.support.validation.PositiveIntegerStringValidator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Z"
                       name="isValid"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">java.lang.Integer.parseInt</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ValidatorsTest"><!--Package: org.pdfsam.support.validation; name: org.pdfsam.support.validation.ValidatorsTest; file: org.pdfsam.support.validation.ValidatorsTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="negateValidator"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.validation.Validators.nonBlank</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.support.validation.Validators.not</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.support.validation.Validators.not</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="andValidator"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.validation.Validators.nonBlank</op>
                     <op code="call">org.pdfsam.support.validation.Validators.positiveInteger</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.support.validation.Validators.and</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.support.validation.Validators.and</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.support.validation.Validators.and</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.support.validation.Validators.and</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="FileTypeValidatorTest"><!--Package: org.pdfsam.support.validation; name: org.pdfsam.support.validation.FileTypeValidatorTest; file: org.pdfsam.support.validation.FileTypeValidatorTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="notExisting"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.support.io.FileType.ALL</op>
                     <op code="call">org.pdfsam.support.validation.Validators.existingFileType</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="existingAll"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.support.io.FileType.ALL</op>
                     <op code="call">org.pdfsam.support.validation.Validators.existingFileType</op>
                     <op code="call">java.nio.file.Files.createTempFile</op>
                     <op code="call">java.nio.file.Path.toAbsolutePath</op>
                     <op code="call">java.nio.file.Path.toString</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.nio.file.Files.delete</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="existingAllNoExtension"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.support.io.FileType.ALL</op>
                     <op code="call">org.pdfsam.support.validation.Validators.existingFileType</op>
                     <op code="call">java.nio.file.Files.createTempFile</op>
                     <op code="call">java.nio.file.Path.toAbsolutePath</op>
                     <op code="call">java.nio.file.Path.toString</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.nio.file.Files.delete</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="existingHtml"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.support.io.FileType.HTML</op>
                     <op code="call">org.pdfsam.support.validation.Validators.existingFileType</op>
                     <op code="call">java.nio.file.Files.createTempFile</op>
                     <op code="call">java.nio.file.Path.toAbsolutePath</op>
                     <op code="call">java.nio.file.Path.toString</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.nio.file.Files.delete</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="existingPdfInsensitive"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.support.io.FileType.PDF</op>
                     <op code="call">org.pdfsam.support.validation.Validators.existingFileType</op>
                     <op code="call">java.nio.file.Files.createTempFile</op>
                     <op code="call">java.nio.file.Path.toAbsolutePath</op>
                     <op code="call">java.nio.file.Path.toString</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.nio.file.Files.delete</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="allowBlank"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.support.io.FileType.HTML</op>
                     <op code="call">org.pdfsam.support.validation.Validators.existingFileType</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.support.validation.Validators.validEmpty</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="notExistingValid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.support.io.FileType.ALL</op>
                     <op code="call">org.pdfsam.support.validation.Validators.fileType</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="IntegerStringValidatorTest"><!--Package: org.pdfsam.support.validation; name: org.pdfsam.support.validation.IntegerStringValidatorTest; file: org.pdfsam.support.validation.IntegerStringValidatorTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/support/validation/Validator">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.validation.Validators.positiveInteger</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testNegative"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testInvalid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testZero"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testValid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testAllowBlank"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validators.validEmpty</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="FileValidator"><!--Package: org.pdfsam.support.validation; name: org.pdfsam.support.validation.FileValidator; file: org.pdfsam.support.validation.FileValidator-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Z"
                       name="isValid"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotBlank</op>
                     <op code="call">java.nio.file.Paths.get</op>
                     <op code="call">java.nio.file.Files.exists</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Validators"><!--Package: org.pdfsam.support.validation; name: org.pdfsam.support.validation.Validators; file: org.pdfsam.support.validation.Validators-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/support/validation/Validator;"
                       name="alwaysFalse"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/support/validation/Validator</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/support/validation/Validator;"
                       name="nonBlank"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/support/validation/Validator</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/support/validation/Validator;"
                       name="positiveInteger"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/support/validation/Validator</return>
                  <ops>
                     <op code="call">org.pdfsam.support.validation.PositiveIntegerStringValidator.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(II)Lorg/pdfsam/support/validation/Validator;"
                       name="positiveIntRange"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lorg/pdfsam/support/validation/Validator</return>
                  <ops>
                     <op code="call">org.pdfsam.support.validation.PositiveIntRangeStringValidator.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Set;)Lorg/pdfsam/support/validation/Validator;"
                       name="containedInteger"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Set">?</arg>
                  </args>
                  <return>Lorg/pdfsam/support/validation/Validator</return>
                  <ops>
                     <op code="call">org.pdfsam.support.validation.ContainedIntegerValidator.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/support/validation/Validator;"
                       name="existingFile"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/support/validation/Validator</return>
                  <ops>
                     <op code="call">org.pdfsam.support.validation.FileValidator.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/support/io/FileType;)Lorg/pdfsam/support/validation/Validator;"
                       name="existingFileType"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/support/io/FileType">?</arg>
                  </args>
                  <return>Lorg/pdfsam/support/validation/Validator</return>
                  <ops>
                     <op code="call">org.pdfsam.support.validation.FileTypeValidator.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/support/io/FileType;Z)Lorg/pdfsam/support/validation/Validator;"
                       name="fileType"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/support/io/FileType">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>Lorg/pdfsam/support/validation/Validator</return>
                  <ops>
                     <op code="call">org.pdfsam.support.validation.FileTypeValidator.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/support/validation/Validator;"
                       name="existingDirectory"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/support/validation/Validator</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lorg/pdfsam/support/validation/Validator;"
                       name="regexMatching"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lorg/pdfsam/support/validation/Validator</return>
                  <ops>
                     <op code="call">org.pdfsam.support.validation.RegexValidator.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/support/validation/Validator;)Lorg/pdfsam/support/validation/Validator;"
                       name="validEmpty"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/support/validation/Validator">?</arg>
                  </args>
                  <return>Lorg/pdfsam/support/validation/Validator</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/support/validation/Validator;)Lorg/pdfsam/support/validation/Validator;"
                       name="not"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/support/validation/Validator">?</arg>
                  </args>
                  <return>Lorg/pdfsam/support/validation/Validator</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Lorg/pdfsam/support/validation/Validator;)Lorg/pdfsam/support/validation/Validator;"
                       name="and"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/support/validation/Validator">?</arg>
                  </args>
                  <return>Lorg/pdfsam/support/validation/Validator</return>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.support">
         <class id="FXValidationSupportTest"><!--Package: org.pdfsam.ui.support; name: org.pdfsam.ui.support.FXValidationSupportTest; file: org.pdfsam.ui.support.FXValidationSupportTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="startingState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.validation.Validators.nonBlank</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.setValidator</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validationStateProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validationStateProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.addListener</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validate</op>
                     <op code="call">org.mockito.Mockito.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="call">org.mockito.Matchers.eq</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="call">org.mockito.Matchers.eq</op>
                     <op code="call">javafx.beans.value.ChangeListener.changed</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validationStateProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="behaviour"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.validation.Validators.nonBlank</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.setValidator</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validationStateProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.addListener</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validate</op>
                     <op code="call">org.mockito.Mockito.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="call">org.mockito.Matchers.eq</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="call">org.mockito.Matchers.eq</op>
                     <op code="call">javafx.beans.value.ChangeListener.changed</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validationStateProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validate</op>
                     <op code="call">org.mockito.Mockito.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="call">org.mockito.Matchers.eq</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.INVALID</op>
                     <op code="call">org.mockito.Matchers.eq</op>
                     <op code="call">javafx.beans.value.ChangeListener.changed</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.INVALID</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validationStateProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="alwaysValid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validate</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validationStateProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validate</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validationStateProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Views"><!--Package: org.pdfsam.ui.support; name: org.pdfsam.ui.support.Views; file: org.pdfsam.ui.support.Views-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljavafx/scene/Node;)Ljavafx/scene/control/TitledPane;"
                       name="titledPane"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljavafx/scene/Node">?</arg>
                  </args>
                  <return>Ljavafx/scene/control/TitledPane</return>
                  <ops>
                     <op code="call">javafx.scene.control.TitledPane.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.TitledPane.setMinHeight</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CircularObservableListTest"><!--Package: org.pdfsam.ui.support; name: org.pdfsam.ui.support.CircularObservableListTest; file: org.pdfsam.ui.support.CircularObservableListTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="wrongCapacity"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="add"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.&lt;init&gt;</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.add</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.add</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.add</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.contains</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="addAll"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.&lt;init&gt;</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.contains</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="addAllIndex"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.&lt;init&gt;</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.add</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.add</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.add</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.add</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.contains</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.contains</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.contains</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="addIndex"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.&lt;init&gt;</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.add</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.add</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.add</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.add</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.contains</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CircularObservableList"><!--Package: org.pdfsam.ui.support; name: org.pdfsam.ui.support.CircularObservableList; file: org.pdfsam.ui.support.CircularObservableList-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/LinkedList">wrapped</attribute>
               <attribute final="false" public="false" static="false" type="I">maxCapacity</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(I)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.collections.ModifiableObservableListBase.&lt;init&gt;</op>
                     <op code="call">java.util.LinkedList.&lt;init&gt;</op>
                     <op code="put">wrapped</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.setMaxCapacity</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)V"
                       name="setMaxCapacity"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireArg</op>
                     <op code="put">maxCapacity</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.houseKeep</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="getMaxCapacity"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">maxCapacity</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="houseKeep"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.size</op>
                     <op code="get">maxCapacity</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.remove</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(ILjava/util/Collection;)Z"
                       name="addAll"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                     <arg type="Ljava/util/Collection">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.beginChange</op>
                     <op code="get">wrapped</op>
                     <op code="call">java.util.LinkedList.addAll</op>
                     <op code="call">java.util.Collection.size</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.nextAdd</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.houseKeep</op>
                     <op code="get">modCount</op>
                     <op code="put">modCount</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.endChange</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.endChange</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)Ljava/lang/Object;"
                       name="get"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">wrapped</op>
                     <op code="call">java.util.LinkedList.get</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="size"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">wrapped</op>
                     <op code="call">java.util.LinkedList.size</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(ILjava/lang/Object;)V"
                       name="doAdd"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="I">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">wrapped</op>
                     <op code="call">java.util.LinkedList.add</op>
                     <op code="call">org.pdfsam.ui.support.CircularObservableList.houseKeep</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(ILjava/lang/Object;)Ljava/lang/Object;"
                       name="doSet"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="I">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">wrapped</op>
                     <op code="call">java.util.LinkedList.set</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)Ljava/lang/Object;"
                       name="doRemove"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">wrapped</op>
                     <op code="call">java.util.LinkedList.remove</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="FXValidationSupport"><!--Package: org.pdfsam.ui.support; name: org.pdfsam.ui.support.FXValidationSupport; file: org.pdfsam.ui.support.FXValidationSupport-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/beans/property/ReadOnlyObjectWrapper">validationState</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/support/validation/Validator">validator</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectWrapper.&lt;init&gt;</op>
                     <op code="put">validationState</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport$1.&lt;init&gt;</op>
                     <op code="put">validator</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)V"
                       name="validate"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="get">validator</op>
                     <op code="call">org.pdfsam.support.validation.Validator.isValid</op>
                     <op code="get">validationState</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectWrapper.set</op>
                     <op code="get">validationState</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.INVALID</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectWrapper.set</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/support/validation/Validator;)V"
                       name="setValidator"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/support/validation/Validator">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">validator</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.makeNotValidated</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="makeNotValidated"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport.LOG</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="get">validationState</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectWrapper.set</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/beans/property/ReadOnlyObjectProperty;"
                       name="validationStateProperty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/beans/property/ReadOnlyObjectProperty</return>
                  <ops>
                     <op code="get">validationState</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectWrapper.getReadOnlyProperty</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.ui.support.FXValidationSupport.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.banner">
         <class id="NewsButtonTest"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.NewsButtonTest; file: org.pdfsam.ui.banner.NewsButtonTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/banner/NewsButton">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.NewsButton.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onClick"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.banner.NewsButtonTest.clickOn</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.pdfsam.news.ShowNewsPanelRequest.INSTANCE</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.pdfsam.ui.banner.NewsButtonTest.clickOn</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.pdfsam.news.HideNewsPanelRequest.INSTANCE</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUpToDate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.banner.NewsButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.contains</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.banner.NewsButton.setUpToDate</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.banner.NewsButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.contains</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.banner.NewsButton.setUpToDate</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.banner.NewsButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.contains</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="WorkspaceMenuTest"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.WorkspaceMenuTest; file: org.pdfsam.ui.banner.WorkspaceMenuTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/injector/Injector">injector</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.MenuConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.start</op>
                     <op code="put">injector</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onRecentWorkspace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.banner.WorkspaceMenuTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.moveTo</op>
                     <op code="call">org.testfx.api.FxRobotInterface.moveTo</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="recentIsUpdated"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.RecentWorkspacesService.getRecentlyUsedWorkspaces</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.workspace.WorkspaceLoadedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="call">org.pdfsam.ui.banner.WorkspaceMenuTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.moveTo</op>
                     <op code="call">org.testfx.api.FxRobotInterface.moveTo</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="recentIsUpdatedAndMnemonicAreNotParsed"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.RecentWorkspacesService.getRecentlyUsedWorkspaces</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.workspace.WorkspaceLoadedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="call">org.pdfsam.ui.banner.WorkspaceMenuTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.moveTo</op>
                     <op code="call">org.testfx.api.FxRobotInterface.moveTo</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="recentIsCleared"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.RecentWorkspacesService.getRecentlyUsedWorkspaces</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.workspace.WorkspaceLoadedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="call">org.pdfsam.ui.banner.WorkspaceMenuTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.moveTo</op>
                     <op code="call">org.testfx.api.FxRobotInterface.moveTo</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.banner.WorkspaceMenuTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.moveTo</op>
                     <op code="call">org.testfx.api.FxRobotInterface.moveTo</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.pdfsam.ui.banner.WorkspaceMenuTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.moveTo</op>
                     <op code="call">org.testfx.api.FxRobotInterface.moveTo</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LogButton"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.LogButton; file: org.pdfsam.ui.banner.LogButton-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">HAS_ERRORS_CSS_CLASS</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/animation/Timeline">anim</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/Object">action</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.COMMENT_ALERT_OUTLINE</op>
                     <op code="call">org.pdfsam.ui.banner.BannerButton.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.commons.ShowStageRequest.INSTANCE</op>
                     <op code="put">action</op>
                     <op code="call">org.pdfsam.ui.banner.LogButton.setOnAction</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Tooltip.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.banner.LogButton.setTooltip</op>
                     <op code="call">org.pdfsam.ui.commons.Animations.shake</op>
                     <op code="put">anim</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/log/ErrorLoggedEvent;)V"
                       name="onLogMessage"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/log/ErrorLoggedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.LogButton.hasUnseenErrors</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/log/LogAreaVisiblityChangedEvent;)V"
                       name="onViewedLogArea"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/log/LogAreaVisiblityChangedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.LogButton.hasUnseenErrors</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/HideStageRequest;)V"
                       name="onHideStage"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/HideStageRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.commons.ShowStageRequest.INSTANCE</op>
                     <op code="put">action</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/ShowStageRequest;)V"
                       name="onShowStage"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/ShowStageRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.LogButton.hasUnseenErrors</op>
                     <op code="get_static">org.pdfsam.ui.commons.HideStageRequest.INSTANCE</op>
                     <op code="put">action</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)V"
                       name="hasUnseenErrors"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">anim</op>
                     <op code="call">javafx.animation.Timeline.getStatus</op>
                     <op code="get_static">javafx.animation.Animation$Status.RUNNING</op>
                     <op code="get">anim</op>
                     <op code="call">javafx.animation.Timeline.play</op>
                     <op code="call">org.pdfsam.ui.banner.LogButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.contains</op>
                     <op code="call">org.pdfsam.ui.banner.LogButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.ui.banner.LogButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.remove</op>
                     <op code="get">anim</op>
                     <op code="call">javafx.animation.Timeline.stop</op>
                     <op code="call">org.pdfsam.ui.banner.LogButton.setRotate</op>
                     <op code="call">org.pdfsam.ui.banner.LogButton.setScaleY</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MenuButton"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.MenuButton; file: org.pdfsam.ui.banner.MenuButton-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/banner/AppContextMenu;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/ui/banner/AppContextMenu">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.MENU</op>
                     <op code="call">org.pdfsam.ui.banner.BannerButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.banner.MenuButton.setOnAction</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="WorkspaceMenu"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.WorkspaceMenu; file: org.pdfsam.ui.banner.WorkspaceMenu-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/RecentWorkspacesService">service</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Menu">recent</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Optional">latestWorkspace</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/RecentWorkspacesService;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/RecentWorkspacesService">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Menu.&lt;init&gt;</op>
                     <op code="call">java.util.Optional.empty</op>
                     <op code="put">latestWorkspace</op>
                     <op code="put">service</op>
                     <op code="call">org.pdfsam.ui.banner.WorkspaceMenu.setId</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.MenuItem.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setId</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.MenuItem.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">javafx.scene.control.MenuItem.setId</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Menu.&lt;init&gt;</op>
                     <op code="put">recent</op>
                     <op code="get">recent</op>
                     <op code="call">javafx.scene.control.Menu.setId</op>
                     <op code="call">org.pdfsam.ui.RecentWorkspacesService.getRecentlyUsedWorkspaces</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="get">recent</op>
                     <op code="call">javafx.scene.control.Menu.getItems</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.MenuItem.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">javafx.scene.control.MenuItem.setId</op>
                     <op code="call">org.pdfsam.ui.banner.WorkspaceMenu.getItems</op>
                     <op code="call">javafx.scene.control.SeparatorMenuItem.&lt;init&gt;</op>
                     <op code="get">recent</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveWorkspace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">org.pdfsam.support.io.FileType.JSON</op>
                     <op code="call">org.pdfsam.ui.io.FileChoosers.getFileChooser</op>
                     <op code="get">latestWorkspace</op>
                     <op code="call">java.util.Optional.ifPresentOrElse</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.SAVE</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.showDialog</op>
                     <op code="call">java.util.Optional.of</op>
                     <op code="put">latestWorkspace</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="loadWorkspace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">org.pdfsam.support.io.FileType.JSON</op>
                     <op code="call">org.pdfsam.ui.io.FileChoosers.getFileChooser</op>
                     <op code="get">latestWorkspace</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.OPEN</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.showDialog</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.ui.workspace.LoadWorkspaceEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clearWorkspaces"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.ui.RecentWorkspacesService.clear</op>
                     <op code="get">recent</op>
                     <op code="call">javafx.scene.control.Menu.getItems</op>
                     <op code="call">javafx.collections.ObservableList.clear</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/workspace/WorkspaceLoadedEvent;)V"
                       name="onWorkspaceLoaded"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/workspace/WorkspaceLoadedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">recent</op>
                     <op code="call">javafx.scene.control.Menu.getItems</op>
                     <op code="call">javafx.collections.ObservableList.clear</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.ui.RecentWorkspacesService.getRecentlyUsedWorkspaces</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="get">recent</op>
                     <op code="call">javafx.scene.control.Menu.getItems</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="call">org.pdfsam.ui.workspace.WorkspaceLoadedEvent.workspace</op>
                     <op code="call">java.util.Optional.of</op>
                     <op code="put">latestWorkspace</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BannerPane"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.BannerPane; file: org.pdfsam.ui.banner.BannerPane-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">current</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/banner/BannerButtons;Ljavafx/scene/image/ImageView;Ljavafx/scene/image/Image;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/banner/BannerButtons">?</arg>
                     <arg type="Ljavafx/scene/image/ImageView">?</arg>
                     <arg type="Ljavafx/scene/image/Image">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="put">current</op>
                     <op code="call">org.pdfsam.ui.banner.BannerPane.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">current</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get_static">javafx.scene.layout.Priority.ALWAYS</op>
                     <op code="call">javafx.scene.layout.HBox.setHgrow</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.layout.HBox.getChildren</op>
                     <op code="call">javafx.scene.image.ImageView.&lt;init&gt;</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.banner.BannerPane.getChildren</op>
                     <op code="get">current</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/event/SetTitleEvent;)V"
                       name="onChangeTitle"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/ui/event/SetTitleEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.event.SetTitleEvent.getTitle</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotBlank</op>
                     <op code="get">current</op>
                     <op code="call">org.pdfsam.ui.event.SetTitleEvent.getTitle</op>
                     <op code="call">java.lang.String.format</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                     <op code="get">current</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BannerButton"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.BannerButton; file: org.pdfsam.ui.banner.BannerButton-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lde/jensd/fx/glyphs/materialdesignicons/MaterialDesignIcon;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lde/jensd/fx/glyphs/materialdesignicons/MaterialDesignIcon">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.banner.BannerButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.get</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.createIcon</op>
                     <op code="call">org.pdfsam.ui.banner.BannerButton.setGraphic</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="NewsButton"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.NewsButton; file: org.pdfsam.ui.banner.NewsButton-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">UP_TO_DATE_CSS_CLASS</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/animation/Timeline">anim</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/Object">action</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.NEWSPAPER</op>
                     <op code="call">org.pdfsam.ui.banner.BannerButton.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.news.ShowNewsPanelRequest.INSTANCE</op>
                     <op code="put">action</op>
                     <op code="call">org.pdfsam.ui.banner.NewsButton.setOnAction</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Tooltip.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.banner.NewsButton.setTooltip</op>
                     <op code="call">org.pdfsam.ui.commons.Animations.shake</op>
                     <op code="put">anim</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="switchAction"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">action</op>
                     <op code="get_static">org.pdfsam.news.HideNewsPanelRequest.INSTANCE</op>
                     <op code="get_static">org.pdfsam.news.ShowNewsPanelRequest.INSTANCE</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)V"
                       name="setUpToDate"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.NewsButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.remove</op>
                     <op code="get">anim</op>
                     <op code="call">javafx.animation.Timeline.stop</op>
                     <op code="call">org.pdfsam.ui.banner.NewsButton.setRotate</op>
                     <op code="call">org.pdfsam.ui.banner.NewsButton.setScaleY</op>
                     <op code="call">org.pdfsam.ui.banner.NewsButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">anim</op>
                     <op code="call">javafx.animation.Timeline.play</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/news/ShowNewsPanelRequest;)V"
                       name="onShowNewsPanel"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/news/ShowNewsPanelRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.NewsButton.setUpToDate</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MenuConfig"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.MenuConfig; file: org.pdfsam.ui.banner.MenuConfig-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/banner/AppContextMenu;)Lorg/pdfsam/ui/banner/MenuButton;"
                       name="menuButton"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/banner/AppContextMenu">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/banner/MenuButton</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.MenuButton.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/banner/WorkspaceMenu;Lorg/pdfsam/ui/banner/ModulesMenu;)Lorg/pdfsam/ui/banner/AppContextMenu;"
                       name="menu"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/banner/WorkspaceMenu">?</arg>
                     <arg type="Lorg/pdfsam/ui/banner/ModulesMenu">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/banner/AppContextMenu</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.AppContextMenu.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.spy</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/RecentWorkspacesService;)Lorg/pdfsam/ui/banner/WorkspaceMenu;"
                       name="workspaceMenu"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/RecentWorkspacesService">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/banner/WorkspaceMenu</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.WorkspaceMenu.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/banner/ModulesMenu;"
                       name="modulesMenu"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/banner/ModulesMenu</return>
                  <ops>
                     <op code="call">org.pdfsam.test.DefaultPriorityTestModule.&lt;init&gt;</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.ui.banner.ModulesMenu.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/test/DefaultPriorityTestModule;"
                       name="module"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/test/DefaultPriorityTestModule</return>
                  <ops>
                     <op code="call">org.pdfsam.test.DefaultPriorityTestModule.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/RecentWorkspacesService;"
                       name="service"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/RecentWorkspacesService</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.RecentWorkspacesService.getRecentlyUsedWorkspaces</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MenuButtonTest"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.MenuButtonTest; file: org.pdfsam.ui.banner.MenuButtonTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/injector/Injector">injector</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.MenuConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.start</op>
                     <op code="put">injector</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onClick"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.banner.MenuButtonTest.clickOn</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="get_static">javafx.geometry.Side.BOTTOM</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">org.pdfsam.ui.banner.AppContextMenu.show</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ModulesMenuTest"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.ModulesMenuTest; file: org.pdfsam.ui.banner.ModulesMenuTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/injector/Injector">injector</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.MenuConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.start</op>
                     <op code="put">injector</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onSaveClick"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.pdfsam.ui.banner.ModulesMenuTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.pdfsam.test.DefaultPriorityTestModule.descriptor</op>
                     <op code="get">category</op>
                     <op code="call">org.pdfsam.module.ModuleCategory.getDescription</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.pdfsam.test.DefaultPriorityTestModule.descriptor</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.getName</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.pdfsam.test.DefaultPriorityTestModule.id</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.getActiveModuleId</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="WorkspaceMenuItem"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.WorkspaceMenuItem; file: org.pdfsam.ui.banner.WorkspaceMenuItem-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.MenuItem.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="call">java.lang.String.length</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.abbreviate</op>
                     <op code="call">org.pdfsam.ui.banner.WorkspaceMenuItem.setText</op>
                     <op code="call">org.pdfsam.ui.banner.WorkspaceMenuItem.setOnAction</op>
                     <op code="call">org.pdfsam.ui.banner.WorkspaceMenuItem.setMnemonicParsing</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DashboardButton"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.DashboardButton; file: org.pdfsam.ui.banner.DashboardButton-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.HOME</op>
                     <op code="call">org.pdfsam.ui.banner.BannerButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.banner.DashboardButton.setOnAction</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Tooltip.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.banner.DashboardButton.setTooltip</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DashboardButtonTest"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.DashboardButtonTest; file: org.pdfsam.ui.banner.DashboardButtonTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.DashboardButton.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testClick"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.banner.DashboardButtonTest.clickOn</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.event.SetActiveDashboardItemRequest.getActiveItemId</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SettingsMenuTest"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.SettingsMenuTest; file: org.pdfsam.ui.banner.SettingsMenuTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/injector/Injector">injector</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.MenuConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.start</op>
                     <op code="put">injector</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onSettingsClick"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.pdfsam.ui.banner.SettingsMenuTest.clickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.event.SetActiveDashboardItemRequest.getActiveItemId</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BannerPaneTest$Config"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.BannerPaneTest$Config; file: org.pdfsam.ui.banner.BannerPaneTest$Config-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/banner/BannerButtons;Ljavafx/scene/image/Image;Ljavafx/scene/image/ImageView;)Lorg/pdfsam/ui/banner/BannerPane;"
                       name="victim"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/banner/BannerButtons">?</arg>
                     <arg type="Ljavafx/scene/image/Image">?</arg>
                     <arg type="Ljavafx/scene/image/ImageView">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/banner/BannerPane</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.BannerPane.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/image/ImageView;"
                       name="payoff"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/image/ImageView</return>
                  <ops>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResource</op>
                     <op code="call">java.net.URL.toURI</op>
                     <op code="call">java.net.URI.toString</op>
                     <op code="call">javafx.scene.image.ImageView.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/image/Image;"
                       name="logo32"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/image/Image</return>
                  <ops>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">javafx.scene.image.Image.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/banner/LogButton;Lorg/pdfsam/ui/banner/DashboardButton;Lorg/pdfsam/ui/banner/NewsButton;Lorg/pdfsam/ui/banner/MenuButton;)Lorg/pdfsam/ui/banner/BannerButtons;"
                       name="buttons"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/banner/LogButton">?</arg>
                     <arg type="Lorg/pdfsam/ui/banner/DashboardButton">?</arg>
                     <arg type="Lorg/pdfsam/ui/banner/NewsButton">?</arg>
                     <arg type="Lorg/pdfsam/ui/banner/MenuButton">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/banner/BannerButtons</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.BannerButtons.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/banner/DashboardButton;"
                       name="dashboardButton"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/banner/DashboardButton</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.DashboardButton.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/banner/NewsButton;"
                       name="newsButton"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/banner/NewsButton</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.NewsButton.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ModulesMenu"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.ModulesMenu; file: org.pdfsam.ui.banner.ModulesMenu-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/List;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Menu.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.banner.ModulesMenu.setId</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.List.iterator</op>
                     <op code="call">java.util.Iterator.hasNext</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="call">org.pdfsam.module.Module.descriptor</op>
                     <op code="get">category</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.pdfsam.module.ModuleCategory.getDescription</op>
                     <op code="call">javafx.scene.control.Menu.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.pdfsam.module.Module.descriptor</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.getName</op>
                     <op code="call">javafx.scene.control.MenuItem.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">javafx.scene.control.Menu.getItems</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.ui.banner.ModulesMenu.getItems</op>
                     <op code="call">java.util.Map.values</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LogButtonTest"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.LogButtonTest; file: org.pdfsam.ui.banner.LogButtonTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/banner/LogButton">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.LogButton.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onClick"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.banner.LogButtonTest.clickOn</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.ui.banner.LogButtonTest.clickOn</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUpToDate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.banner.LogButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.contains</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.banner.LogButton.hasUnseenErrors</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.banner.LogButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.contains</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.banner.LogButton.hasUnseenErrors</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.banner.LogButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.contains</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BannerButtonTest"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.BannerButtonTest; file: org.pdfsam.ui.banner.BannerButtonTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.ACCESS_POINT</op>
                     <op code="call">org.pdfsam.ui.banner.BannerButton.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="exists"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.BannerButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.ACCESS_POINT</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.unicode</op>
                     <op code="call">javafx.scene.text.Text.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BannerPaneTest"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.BannerPaneTest; file: org.pdfsam.ui.banner.BannerPaneTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">cleanStudio</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">cleanStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.banner.MenuConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.banner.BannerPaneTest$Config.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.start</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="title"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.pdfsam.ui.banner.BannerPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BannerButtons"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.BannerButtons; file: org.pdfsam.ui.banner.BannerButtons-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/banner/LogButton;Lorg/pdfsam/ui/banner/DashboardButton;Lorg/pdfsam/ui/banner/NewsButton;Lorg/pdfsam/ui/banner/MenuButton;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/ui/banner/LogButton">?</arg>
                     <arg type="Lorg/pdfsam/ui/banner/DashboardButton">?</arg>
                     <arg type="Lorg/pdfsam/ui/banner/NewsButton">?</arg>
                     <arg type="Lorg/pdfsam/ui/banner/MenuButton">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.banner.BannerButtons.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.banner.NewsButton.setDisable</op>
                     <op code="call">org.pdfsam.ui.banner.BannerButtons.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">org.pdfsam.eventstudio.ReferenceStrength.STRONG</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="AppContextMenu"><!--Package: org.pdfsam.ui.banner; name: org.pdfsam.ui.banner.AppContextMenu; file: org.pdfsam.ui.banner.AppContextMenu-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/banner/WorkspaceMenu;Lorg/pdfsam/ui/banner/ModulesMenu;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/ui/banner/WorkspaceMenu">?</arg>
                     <arg type="Lorg/pdfsam/ui/banner/ModulesMenu">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.ContextMenu.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.MenuItem.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="get_static">javafx.scene.input.KeyCode.Q</op>
                     <op code="get_static">javafx.scene.input.KeyCombination.SHORTCUT_DOWN</op>
                     <op code="call">javafx.scene.input.KeyCodeCombination.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setAccelerator</op>
                     <op code="call">org.pdfsam.ui.banner.AppContextMenu.getItems</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">java.lang.Boolean.getBoolean</op>
                     <op code="call">java.lang.Boolean.getBoolean</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.MenuItem.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">org.pdfsam.ui.banner.AppContextMenu.getItems</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.ui.banner.AppContextMenu.getItems</op>
                     <op code="call">javafx.scene.control.SeparatorMenuItem.&lt;init&gt;</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.dashboard.modules">
         <class id="ModulesDashboardPane"><!--Package: org.pdfsam.ui.dashboard.modules; name: org.pdfsam.ui.dashboard.modules.ModulesDashboardPane; file: org.pdfsam.ui.dashboard.modules.ModulesDashboardPane-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/List;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.FlowPane.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.modules.ModulesDashboardPane.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.layout.FlowPane.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.sorted</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">javafx.scene.layout.FlowPane.getChildren</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="call">org.pdfsam.ui.dashboard.modules.ModulesDashboardPane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/premium/PremiumModulesEvent;)V"
                       name="onPremiumModules"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/premium/PremiumModulesEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">premiumModules</op>
                     <op code="call">java.util.List.isEmpty</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.layout.FlowPane.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.FlowPane.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">premiumModules</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.sorted</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">javafx.scene.layout.FlowPane.getChildren</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="call">javafx.application.Platform.runLater</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ModulesDashboardTile"><!--Package: org.pdfsam.ui.dashboard.modules; name: org.pdfsam.ui.dashboard.modules.ModulesDashboardTile; file: org.pdfsam.ui.dashboard.modules.ModulesDashboardTile-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/layout/VBox">toolButtons</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">id</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/module/Module;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/module/Module">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.module.Module.descriptor</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.getName</op>
                     <op code="call">org.pdfsam.module.Module.descriptor</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.getDescription</op>
                     <op code="call">org.pdfsam.module.Module.graphic</op>
                     <op code="call">org.pdfsam.ui.dashboard.modules.DashboardTile.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="put">toolButtons</op>
                     <op code="call">org.pdfsam.module.Module.id</op>
                     <op code="put">id</op>
                     <op code="call">org.pdfsam.ui.dashboard.modules.ModulesDashboardTile.setOnAction</op>
                     <op code="call">org.pdfsam.module.Module.descriptor</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.getSupportURL</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                     <op code="call">org.pdfsam.ui.dashboard.modules.ModulesDashboardTile.setOnDragOver</op>
                     <op code="call">org.pdfsam.module.Module.descriptor</op>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.MULTIPLE_PDF</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.hasInputType</op>
                     <op code="call">org.pdfsam.ui.dashboard.modules.ModulesDashboardTile.setOnDragDropped</op>
                     <op code="call">org.pdfsam.module.Module.descriptor</op>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.SINGLE_PDF</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.hasInputType</op>
                     <op code="call">org.pdfsam.ui.dashboard.modules.ModulesDashboardTile.setOnDragDropped</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/scene/input/DragEvent;Ljava/util/function/Consumer;)V"
                       name="dragConsume"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljavafx/scene/input/DragEvent">?</arg>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.input.DragEvent.getDragboard</op>
                     <op code="call">javafx.scene.input.Dragboard.hasFiles</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="call">javafx.scene.input.DragEvent.consume</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/function/Consumer;"
                       name="onDragOverConsumer"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Ljava/util/function/Consumer</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/function/Function;)Ljava/util/function/Consumer;"
                       name="onDragDropped"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/function/Function">?</arg>
                  </args>
                  <return>Ljava/util/function/Consumer</return>
               </method>
            </methods>
         </class>
         <class id="ModulesDashboardTileTest"><!--Package: org.pdfsam.ui.dashboard.modules; name: org.pdfsam.ui.dashboard.modules.ModulesDashboardTileTest; file: org.pdfsam.ui.dashboard.modules.ModulesDashboardTileTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearRule</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearRule</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.DefaultPriorityTestModule.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.modules.ModulesDashboardTile.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="activateOnClick"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.dashboard.modules.ModulesDashboardTileTest.moveTo</op>
                     <op code="get_static">javafx.scene.input.MouseButton.PRIMARY</op>
                     <op code="call">org.testfx.api.FxRobotInterface.press</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                     <op code="get_static">javafx.scene.input.MouseButton.PRIMARY</op>
                     <op code="call">org.pdfsam.ui.dashboard.modules.ModulesDashboardTileTest.release</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.getActiveModuleId</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="supportVideoClick"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.HELP_CIRCLE</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.unicode</op>
                     <op code="call">org.pdfsam.ui.dashboard.modules.ModulesDashboardTileTest.clickOn</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.commons.OpenUrlRequest.getUrl</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PremiumModuleTile"><!--Package: org.pdfsam.ui.dashboard.modules; name: org.pdfsam.ui.dashboard.modules.PremiumModuleTile; file: org.pdfsam.ui.dashboard.modules.PremiumModuleTile-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/premium/PremiumModule;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/premium/PremiumModule">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.premium.PremiumModule.getName</op>
                     <op code="call">org.pdfsam.premium.PremiumModule.getDescription</op>
                     <op code="call">org.pdfsam.premium.PremiumModule.getProduct</op>
                     <op code="call">org.pdfsam.premium.PremiumProduct.graphic</op>
                     <op code="call">org.pdfsam.ui.dashboard.modules.DashboardTile.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.modules.PremiumModuleTile.setOnAction</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DashboardTile"><!--Package: org.pdfsam.ui.dashboard.modules; name: org.pdfsam.ui.dashboard.modules.DashboardTile; file: org.pdfsam.ui.dashboard.modules.DashboardTile-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljavafx/css/PseudoClass">ARMED_PSEUDOCLASS_STATE</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Button">button</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/beans/property/ReadOnlyBooleanWrapper">armed</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;Ljava/lang/String;Ljavafx/scene/Node;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljavafx/scene/Node">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="put">button</op>
                     <op code="call">org.pdfsam.ui.dashboard.modules.DashboardTile$1.&lt;init&gt;</op>
                     <op code="put">armed</op>
                     <op code="call">org.pdfsam.ui.dashboard.modules.DashboardTile.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="call">javafx.scene.control.Label.setGraphic</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.control.Label.setMinHeight</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.VBox.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.control.Button.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.control.Button.setMaxSize</op>
                     <op code="get">armed</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.control.Button.armedProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyBooleanWrapper.bind</op>
                     <op code="call">org.pdfsam.ui.dashboard.modules.DashboardTile.getChildren</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.layout.StackPane.&lt;init&gt;</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dashboard.modules.DashboardTile.setMaxHeight</op>
                     <op code="call">org.pdfsam.ui.dashboard.modules.DashboardTile.setMinHeight</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/beans/property/ReadOnlyBooleanProperty;"
                       name="armedProperty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/beans/property/ReadOnlyBooleanProperty</return>
                  <ops>
                     <op code="get">armed</op>
                     <op code="call">javafx.beans.property.ReadOnlyBooleanWrapper.getReadOnlyProperty</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isArmed"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">armed</op>
                     <op code="call">javafx.beans.property.ReadOnlyBooleanWrapper.get</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/event/EventHandler;)V"
                       name="setOnAction"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/event/EventHandler">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/scene/layout/Region;)V"
                       name="addBottomPanel"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljavafx/scene/layout/Region">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.modules.DashboardTile.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.css.PseudoClass.getPseudoClass</op>
                     <op code="put_static">org.pdfsam.ui.dashboard.modules.DashboardTile.ARMED_PSEUDOCLASS_STATE</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ModulesDashboardPaneTest"><!--Package: org.pdfsam.ui.dashboard.modules; name: org.pdfsam.ui.dashboard.modules.ModulesDashboardPaneTest; file: org.pdfsam.ui.dashboard.modules.ModulesDashboardPaneTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">javaFxRule</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxRule</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="priorityOrder"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.LowPriorityTestModule.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.HighPriorityTestModule.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.DefaultPriorityTestModule.&lt;init&gt;</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.ui.dashboard.modules.ModulesDashboardPane.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.modules.ModulesDashboardPane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.orElseThrow</op>
                     <op code="call">javafx.scene.Node.lookup</op>
                     <op code="call">javafx.scene.control.Labeled.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.rotate">
         <class id="RotateParametersBuilder"><!--Package: org.pdfsam.rotate; name: org.pdfsam.rotate.RotateParametersBuilder; file: org.pdfsam.rotate.RotateParametersBuilder-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/output/SingleOrMultipleTaskOutput">output</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">prefix</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Set">Inputs</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/rotation/Rotation">rotate</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/pdf/page/PredefinedSetOfPages">predefinedRotationType</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.AbstractPdfOutputParametersBuilder.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.collection.NullSafeSet.&lt;init&gt;</op>
                     <op code="put">Inputs</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/input/PdfSource;Ljava/util/Set;)V"
                       name="addInput"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/sejda/model/input/PdfSource">?</arg>
                     <arg type="Ljava/util/Set">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Objects.isNull</op>
                     <op code="call">java.util.Set.isEmpty</op>
                     <op code="get">Inputs</op>
                     <op code="get">rotate</op>
                     <op code="get">predefinedRotationType</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">org.sejda.commons.collection.NullSafeSet.&lt;init&gt;</op>
                     <op code="call">java.util.Set.iterator</op>
                     <op code="call">java.util.Iterator.hasNext</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="get_static">org.pdfsam.rotate.RotateParametersBuilder$1.$SwitchMap$org$sejda$model$pdf$page$PredefinedSetOfPages</op>
                     <op code="get">predefinedRotationType</op>
                     <op code="call">org.sejda.model.pdf.page.PredefinedSetOfPages.ordinal</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getStart</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getStart</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getStart</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getEnd</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getEnd</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getEnd</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getStart</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getStart</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getStart</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getEnd</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getEnd</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.getEnd</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="get">Inputs</op>
                     <op code="get">rotate</op>
                     <op code="call">java.util.Set.stream</op>
                     <op code="call">java.util.stream.Stream.toArray</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                     <op code="get">Inputs</op>
                     <op code="get">rotate</op>
                     <op code="call">java.util.Set.stream</op>
                     <op code="call">java.util.stream.Stream.toArray</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.&lt;init&gt;</op>
                     <op code="call">java.util.Set.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="hasInput"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">Inputs</op>
                     <op code="call">java.util.Set.isEmpty</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/output/SingleOrMultipleTaskOutput;)V"
                       name="output"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/output/SingleOrMultipleTaskOutput">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">output</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="prefix"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">prefix</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/output/SingleOrMultipleTaskOutput;"
                       name="getOutput"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>Lorg/sejda/model/output/SingleOrMultipleTaskOutput</return>
                  <ops>
                     <op code="get">output</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getPrefix"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">prefix</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/rotation/Rotation;)V"
                       name="rotation"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/rotation/Rotation">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">rotate</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/pdf/page/PredefinedSetOfPages;)V"
                       name="rotationType"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/pdf/page/PredefinedSetOfPages">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">predefinedRotationType</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/task/BulkRotateParameters;"
                       name="build"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/task/BulkRotateParameters</return>
                  <ops>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.isCompress</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.setCompress</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.existingOutput</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.setExistingOutputPolicy</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.getVersion</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.setVersion</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.getOutput</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.setOutput</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.getPrefix</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.setOutputPrefix</op>
                     <op code="get">Inputs</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.Set.forEach</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RotateSelectionPane"><!--Package: org.pdfsam.rotate; name: org.pdfsam.rotate.RotateSelectionPane; file: org.pdfsam.rotate.RotateSelectionPane-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.LoadingColumn.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.FileColumn.NAME</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.LongColumn.SIZE</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.IntColumn.PAGES</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.LongColumn.LAST_MODIFIED</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.PageRangesColumn.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.MultipleSelectionPane.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/rotate/RotateParametersBuilder;Ljava/util/function/Consumer;)V"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/rotate/RotateParametersBuilder">?</arg>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.rotate.RotateSelectionPane.table</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.hasInput</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="get_static">org.pdfsam.rotate.RotateSelectionPane.LOG</op>
                     <op code="call">org.sejda.conversion.exception.ConversionException.getMessage</op>
                     <op code="call">org.slf4j.Logger.error</op>
                     <op code="call">org.sejda.conversion.exception.ConversionException.getMessage</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.rotate.RotateSelectionPane.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RotateModule$ModuleConfig"><!--Package: org.pdfsam.rotate; name: org.pdfsam.rotate.RotateModule$ModuleConfig; file: org.pdfsam.rotate.RotateModule$ModuleConfig-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField;"
                       name="destinationDirectoryField"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField;Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/io/PdfDestinationPane;"
                       name="destinationPane"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField">?</arg>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/io/PdfDestinationPane</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/module/RunButton;Lorg/pdfsam/ui/module/OpenButton;)Lorg/pdfsam/ui/module/Footer;"
                       name="footer"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/module/RunButton">?</arg>
                     <arg type="Lorg/pdfsam/ui/module/OpenButton">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/module/Footer</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.Footer.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/module/OpenButton;"
                       name="openButton"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/module/OpenButton</return>
                  <ops>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.MULTIPLE_PDF</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/prefix/PrefixPane;"
                       name="prefixPane"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/prefix/PrefixPane</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RotateParametersBuilderTest"><!--Package: org.pdfsam.rotate; name: org.pdfsam.rotate.RotateParametersBuilderTest; file: org.pdfsam.rotate.RotateParametersBuilderTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/rotate/RotateParametersBuilder">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.compress</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.existingOutput</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_180</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.rotation</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.ODD_PAGES</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.rotationType</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.prefix</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="buildDefaultSelection"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.output</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.sejda.model.input.PdfFileSource.newInstanceNoPassword</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.addInput</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.version</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.build</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.isCompress</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.getExistingOutputPolicy</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.getVersion</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.getInputSet</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.Set.iterator</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_180</op>
                     <op code="get">rotation</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">source</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.getOutput</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.getPages</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.getOutputPrefix</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="buildRanges"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.output</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.sejda.model.input.PdfFileSource.newInstanceNoPassword</op>
                     <op code="get">victim</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.&lt;init&gt;</op>
                     <op code="call">java.util.Collections.singleton</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.addInput</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.version</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.build</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.getInputSet</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.Set.iterator</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_180</op>
                     <op code="get">rotation</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.getPages</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="buildMultiple"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.output</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.sejda.model.input.PdfFileSource.newInstanceNoPassword</op>
                     <op code="get">victim</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.&lt;init&gt;</op>
                     <op code="call">java.util.Collections.singleton</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.addInput</op>
                     <op code="get">victim</op>
                     <op code="call">org.sejda.model.input.PdfFileSource.newInstanceNoPassword</op>
                     <op code="call">java.util.Collections.emptySet</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.addInput</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.build</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.getInputSet</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RotateModule"><!--Package: org.pdfsam.rotate; name: org.pdfsam.rotate.RotateModule; file: org.pdfsam.rotate.RotateModule-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE_ID</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/rotate/RotateSelectionPane">selectionPane</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/rotate/RotateOptionsPane">rotateOptions</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField">destinationDirectoryField</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/PdfDestinationPane">destinationPane</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/prefix/PrefixPane">prefix</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/ModuleDescriptor">descriptor</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField;Lorg/pdfsam/ui/io/PdfDestinationPane;Lorg/pdfsam/ui/module/Footer;Lorg/pdfsam/ui/prefix/PrefixPane;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField">?</arg>
                     <arg type="Lorg/pdfsam/ui/io/PdfDestinationPane">?</arg>
                     <arg type="Lorg/pdfsam/ui/module/Footer">?</arg>
                     <arg type="Lorg/pdfsam/ui/prefix/PrefixPane">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.BaseTaskExecutionModule.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.rotate.RotateSelectionPane.&lt;init&gt;</op>
                     <op code="put">selectionPane</op>
                     <op code="call">org.pdfsam.rotate.RotateOptionsPane.&lt;init&gt;</op>
                     <op code="put">rotateOptions</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.builder</op>
                     <op code="get_static">org.pdfsam.module.ModuleCategory.OTHER</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.category</op>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.MULTIPLE_PDF</op>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.SINGLE_PDF</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.inputTypes</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.name</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.description</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.DEFAULT</op>
                     <op code="call">org.pdfsam.module.ModulePriority.getPriority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.priority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.supportURL</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.build</op>
                     <op code="put">descriptor</op>
                     <op code="put">destinationDirectoryField</op>
                     <op code="put">destinationPane</op>
                     <op code="put">prefix</op>
                     <op code="call">org.pdfsam.rotate.RotateModule.settingPanel</op>
                     <op code="call">org.pdfsam.rotate.RotateModule.initModuleSettingsPanel</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/ModuleDescriptor;"
                       name="descriptor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/ModuleDescriptor</return>
                  <ops>
                     <op code="get">descriptor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/function/Consumer;)Lorg/pdfsam/rotate/RotateParametersBuilder;"
                       name="getBuilder"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>Lorg/pdfsam/rotate/RotateParametersBuilder</return>
                  <ops>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.&lt;init&gt;</op>
                     <op code="get">rotateOptions</op>
                     <op code="call">org.pdfsam.rotate.RotateOptionsPane.apply</op>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.rotate.RotateSelectionPane.apply</op>
                     <op code="get">destinationDirectoryField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.apply</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.apply</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.apply</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="onSaveWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.rotate.RotateSelectionPane.saveStateTo</op>
                     <op code="get">rotateOptions</op>
                     <op code="call">org.pdfsam.rotate.RotateOptionsPane.saveStateTo</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.saveStateTo</op>
                     <op code="get">destinationDirectoryField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.saveStateTo</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.saveStateTo</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="onLoadWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.rotate.RotateSelectionPane.restoreStateFrom</op>
                     <op code="get">rotateOptions</op>
                     <op code="call">org.pdfsam.rotate.RotateOptionsPane.restoreStateFrom</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.restoreStateFrom</op>
                     <op code="get">destinationDirectoryField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.restoreStateFrom</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.restoreStateFrom</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/VBox;"
                       name="settingPanel"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Ljavafx/scene/layout/VBox</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="get_static">javafx.geometry.Pos.TOP_CENTER</op>
                     <op code="call">javafx.scene.layout.VBox.setAlignment</op>
                     <op code="get">selectionPane</op>
                     <op code="get_static">javafx.scene.layout.Priority.ALWAYS</op>
                     <op code="call">javafx.scene.layout.VBox.setVgrow</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.support.Views.titledPane</op>
                     <op code="get">prefix</op>
                     <op code="get_static">org.sejda.model.prefix.Prefix.FILENUMBER</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.addMenuItemFor</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.addMenuItemFor</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">rotateOptions</op>
                     <op code="call">org.pdfsam.ui.support.Views.titledPane</op>
                     <op code="call">javafx.scene.layout.VBox.getChildren</op>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.support.Views.titledPane</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="id"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/ClearModuleEvent;)V"
                       name="onClearModule"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/ClearModuleEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">clearEverything</op>
                     <op code="get">rotateOptions</op>
                     <op code="call">org.pdfsam.rotate.RotateOptionsPane.resetView</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.resetView</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.resetView</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/Node;"
                       name="graphic"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/Node</return>
                  <ops>
                     <op code="call">javafx.scene.image.ImageView.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RotateOptionsPane"><!--Package: org.pdfsam.rotate; name: org.pdfsam.rotate.RotateOptionsPane; file: org.pdfsam.rotate.RotateOptionsPane-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/ComboBox">rotationType</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/ComboBox">rotation</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.ComboBox.&lt;init&gt;</op>
                     <op code="put">rotationType</op>
                     <op code="call">javafx.scene.control.ComboBox.&lt;init&gt;</op>
                     <op code="put">rotation</op>
                     <op code="get">rotationType</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.ALL_PAGES</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">rotationType</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.EVEN_PAGES</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">rotationType</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.ODD_PAGES</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">rotationType</op>
                     <op code="call">javafx.scene.control.ComboBox.setId</op>
                     <op code="get">rotation</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_90</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">rotation</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_180</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">rotation</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_270</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">rotation</op>
                     <op code="call">javafx.scene.control.ComboBox.setId</op>
                     <op code="call">org.pdfsam.rotate.RotateOptionsPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.HCONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.rotate.RotateOptionsPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.rotate.RotateOptionsPane.resetView</op>
                     <op code="call">org.pdfsam.rotate.RotateOptionsPane.getChildren</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="get">rotationType</op>
                     <op code="get">rotation</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="resetView"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">rotationType</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.selectFirst</op>
                     <op code="get">rotation</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.selectFirst</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/rotate/RotateParametersBuilder;Ljava/util/function/Consumer;)V"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/rotate/RotateParametersBuilder">?</arg>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">rotation</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.rotation</op>
                     <op code="get">rotationType</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.rotationType</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="saveStateTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">rotation</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">rotationType</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">java.util.Map.put</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RotateOptionsPaneTest"><!--Package: org.pdfsam.rotate; name: org.pdfsam.rotate.RotateOptionsPaneTest; file: org.pdfsam.rotate.RotateOptionsPaneTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="true"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">CLEAR_STUDIO</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/rotate/RotateOptionsPane">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.rotate.RotateOptionsPane.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validSteps"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.rotate.RotateOptionsPane.apply</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_90</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.rotation</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.ALL_PAGES</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.rotationType</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onSaveWorkspace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.rotate.RotateOptionsPane.saveStateTo</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_90</op>
                     <op code="call">org.sejda.model.rotation.Rotation.toString</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.ALL_PAGES</op>
                     <op code="call">org.sejda.model.pdf.page.PredefinedSetOfPages.toString</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.rotate.RotateOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryComboBox</op>
                     <op code="call">org.pdfsam.rotate.RotateOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryComboBox</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_270</op>
                     <op code="call">org.sejda.model.rotation.Rotation.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.EVEN_PAGES</op>
                     <op code="call">org.sejda.model.pdf.page.PredefinedSetOfPages.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_270</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.EVEN_PAGES</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="reset"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.rotate.RotateOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryComboBox</op>
                     <op code="call">org.pdfsam.rotate.RotateOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryComboBox</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_270</op>
                     <op code="call">org.sejda.model.rotation.Rotation.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.EVEN_PAGES</op>
                     <op code="call">org.sejda.model.pdf.page.PredefinedSetOfPages.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_270</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.EVEN_PAGES</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_90</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.ALL_PAGES</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.rotate.RotateOptionsPaneTest.CLEAR_STUDIO</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RotateSelectionPaneTest"><!--Package: org.pdfsam.rotate; name: org.pdfsam.rotate.RotateSelectionPaneTest; file: org.pdfsam.rotate.RotateSelectionPaneTest-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clear</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">javaFxThread</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/rotate/RotateParametersBuilder">builder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">onError</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/rotate/RotateSelectionPane">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clear</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">builder</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">onError</op>
                     <op code="call">org.pdfsam.rotate.RotateSelectionPane.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="empty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.rotate.RotateSelectionPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.addInput</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="emptyPageSelection"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.rotate.RotateSelectionPaneTest.populate</op>
                     <op code="get">builder</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.hasInput</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.rotate.RotateSelectionPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.addInput</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">java.util.Set.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="notEmptyPageSelection"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.rotate.RotateSelectionPaneTest.populate</op>
                     <op code="get">builder</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.hasInput</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.rotate.RotateSelectionPane.table</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.get</op>
                     <op code="get">pageSelection</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.set</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.rotate.RotateSelectionPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.addInput</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="converstionException"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.rotate.RotateSelectionPaneTest.populate</op>
                     <op code="call">org.sejda.conversion.exception.ConversionException.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.doThrow</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.stubbing.Stubber.when</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.addInput</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.rotate.RotateSelectionPane.apply</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.addInput</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="emptyByZeroPagesSelected"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.rotate.RotateSelectionPaneTest.populate</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.rotate.RotateSelectionPane.table</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.get</op>
                     <op code="get">pageSelection</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.set</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.rotate.RotateSelectionPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.rotate.RotateParametersBuilder.addInput</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="populate"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.add</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.configuration">
         <class id="StylesConfig"><!--Package: org.pdfsam.configuration; name: org.pdfsam.configuration.StylesConfig; file: org.pdfsam.configuration.StylesConfig-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/List">styles</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/Theme;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/Theme">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="put">styles</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="get_static">org.pdfsam.configuration.StylesConfig.LOG</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.ui.Theme.friendlyName</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.slf4j.Logger.debug</op>
                     <op code="call">org.pdfsam.ui.Theme.styleSheets</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="get">styles</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="get_static">javafx.application.ConditionalFeature.TRANSPARENT_WINDOW</op>
                     <op code="call">javafx.application.Platform.isSupported</op>
                     <op code="get">styles</op>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResource</op>
                     <op code="call">java.net.URL.toExternalForm</op>
                     <op code="call">java.util.List.add</op>
                     <op code="get_static">org.pdfsam.configuration.StylesConfig.LOG</op>
                     <op code="call">org.slf4j.Logger.info</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/List;"
                       name="styles"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="get">styles</op>
                     <op code="call">java.util.Collections.unmodifiableList</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.configuration.StylesConfig.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="StylesConfigTest"><!--Package: org.pdfsam.configuration; name: org.pdfsam.configuration.StylesConfigTest; file: org.pdfsam.configuration.StylesConfigTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">initFx</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">initFx</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.configuration.StylesConfig.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nonNullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.Theme.ROUNDISH</op>
                     <op code="call">org.pdfsam.configuration.StylesConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.configuration.StylesConfig.styles</op>
                     <op code="call">java.util.List.isEmpty</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.selection.multiple.move">
         <class id="SingleSelectionAndFocus"><!--Package: org.pdfsam.ui.selection.multiple.move; name: org.pdfsam.ui.selection.multiple.move.SingleSelectionAndFocus; file: org.pdfsam.ui.selection.multiple.move.SingleSelectionAndFocus-->
            <attributes>
               <attribute final="false" public="false" static="false" type="I">row</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(I)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNegative</op>
                     <op code="put">row</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="getFocus"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">row</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="getRow"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">row</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()[I"
                       name="getRows"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
               </method>
            </methods>
         </class>
         <class id="MoveSelectedEvent"><!--Package: org.pdfsam.ui.selection.multiple.move; name: org.pdfsam.ui.selection.multiple.move.MoveSelectedEvent; file: org.pdfsam.ui.selection.multiple.move.MoveSelectedEvent-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/multiple/move/MoveType">type</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/selection/multiple/move/MoveType;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/selection/multiple/move/MoveType">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">type</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/selection/multiple/move/MoveType;"
                       name="getType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/selection/multiple/move/MoveType</return>
                  <ops>
                     <op code="get">type</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SingleSelectionAndFocusTest"><!--Package: org.pdfsam.ui.selection.multiple.move; name: org.pdfsam.ui.selection.multiple.move.SingleSelectionAndFocusTest; file: org.pdfsam.ui.selection.multiple.move.SingleSelectionAndFocusTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="negative"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.SingleSelectionAndFocus.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="positive"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.SingleSelectionAndFocus.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.SingleSelectionAndFocus.getFocus</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.SingleSelectionAndFocus.getRow</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.SingleSelectionAndFocus.getRows</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MultipleSelectionAndFocusTest"><!--Package: org.pdfsam.ui.selection.multiple.move; name: org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocusTest; file: org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocusTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.moveUp</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.moveUp</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.getFocus</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.getRow</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.getRows</op>
                     <op code="call">org.junit.Assert.assertArrayEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveUpWithFocus"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.moveUp</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.moveUp</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.getFocus</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveDown"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.moveDown</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.moveDown</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.getFocus</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.getRow</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.getRows</op>
                     <op code="call">org.junit.Assert.assertArrayEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveDownWithFocus"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.moveDown</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.moveDown</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.getFocus</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MoveSelectedEventTest"><!--Package: org.pdfsam.ui.selection.multiple.move; name: org.pdfsam.ui.selection.multiple.move.MoveSelectedEventTest; file: org.pdfsam.ui.selection.multiple.move.MoveSelectedEventTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveSelectedEvent.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="positive"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.DOWN</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveSelectedEvent.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.DOWN</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveSelectedEvent.getType</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MultipleSelectionAndFocus"><!--Package: org.pdfsam.ui.selection.multiple.move; name: org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus; file: org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus-->
            <attributes>
               <attribute final="false" public="false" static="false" type="I">focus</attribute>
               <attribute final="false" public="false" static="false" type="I">originalFocus</attribute>
               <attribute final="false" public="false" static="false" type="I">row</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Set">rows</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(I)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">focus</op>
                     <op code="put">originalFocus</op>
                     <op code="put">row</op>
                     <op code="call">java.util.HashSet.&lt;init&gt;</op>
                     <op code="put">rows</op>
                     <op code="put">originalFocus</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(II)V"
                       name="move"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="I">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">focus</op>
                     <op code="get">originalFocus</op>
                     <op code="put">focus</op>
                     <op code="get">row</op>
                     <op code="put">row</op>
                     <op code="get">rows</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Set.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)V"
                       name="moveUp"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.move</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)V"
                       name="moveDown"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MultipleSelectionAndFocus.move</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="getFocus"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">focus</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="getRow"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">row</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()[I"
                       name="getRows"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">rows</op>
                     <op code="get">rows</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="call">java.util.Set.toArray</op>
                     <op code="call">org.apache.commons.lang3.ArrayUtils.toPrimitive</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MoveTypeTest"><!--Package: org.pdfsam.ui.selection.multiple.move; name: org.pdfsam.ui.selection.multiple.move.MoveTypeTest; file: org.pdfsam.ui.selection.multiple.move.MoveTypeTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">first</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">second</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">third</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">fourth</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/collections/ObservableList">items</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">first</op>
                     <op code="get">second</op>
                     <op code="get">third</op>
                     <op code="get">fourth</op>
                     <op code="call">javafx.collections.FXCollections.observableArrayList</op>
                     <op code="put">items</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveTopFirst"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.SelectionAndFocus.NULL</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.TOP</op>
                     <op code="get">items</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveType.move</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveTopMultipleSelection"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.SelectionAndFocus.NULL</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.TOP</op>
                     <op code="get">items</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveType.move</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveTop"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.TOP</op>
                     <op code="get">items</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveType.move</op>
                     <op code="get">second</op>
                     <op code="get">items</op>
                     <op code="call">javafx.collections.ObservableList.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveBottomLast"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.SelectionAndFocus.NULL</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.BOTTOM</op>
                     <op code="get">items</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveType.move</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveBottomMultipleSelection"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.SelectionAndFocus.NULL</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.BOTTOM</op>
                     <op code="get">items</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveType.move</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveBottom"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.BOTTOM</op>
                     <op code="get">items</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveType.move</op>
                     <op code="get">second</op>
                     <op code="get">items</op>
                     <op code="call">javafx.collections.ObservableList.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveFullSelection"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.SelectionAndFocus.NULL</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.UP</op>
                     <op code="get">items</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveType.move</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.SelectionAndFocus.NULL</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.DOWN</op>
                     <op code="get">items</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveType.move</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveUpFirst"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.SelectionAndFocus.NULL</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.UP</op>
                     <op code="get">items</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveType.move</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveUpContinuosMultipleSelection"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.UP</op>
                     <op code="get">items</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveType.move</op>
                     <op code="get">items</op>
                     <op code="get">second</op>
                     <op code="get">third</op>
                     <op code="get">first</op>
                     <op code="get">fourth</op>
                     <op code="call">org.hamcrest.Matchers.contains</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveUpMultipleSelection"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.UP</op>
                     <op code="get">items</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveType.move</op>
                     <op code="get">items</op>
                     <op code="get">second</op>
                     <op code="get">first</op>
                     <op code="get">fourth</op>
                     <op code="get">third</op>
                     <op code="call">org.hamcrest.Matchers.contains</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveUpSingleSelection"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.UP</op>
                     <op code="get">items</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveType.move</op>
                     <op code="get">items</op>
                     <op code="get">first</op>
                     <op code="get">third</op>
                     <op code="get">second</op>
                     <op code="get">fourth</op>
                     <op code="call">org.hamcrest.Matchers.contains</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveDownLast"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.SelectionAndFocus.NULL</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.DOWN</op>
                     <op code="get">items</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveType.move</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveDownContinuosMultipleSelection"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.DOWN</op>
                     <op code="get">items</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveType.move</op>
                     <op code="get">items</op>
                     <op code="get">first</op>
                     <op code="get">fourth</op>
                     <op code="get">second</op>
                     <op code="get">third</op>
                     <op code="call">org.hamcrest.Matchers.contains</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveDownMultipleSelection"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.DOWN</op>
                     <op code="get">items</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveType.move</op>
                     <op code="get">items</op>
                     <op code="get">second</op>
                     <op code="get">first</op>
                     <op code="get">fourth</op>
                     <op code="get">third</op>
                     <op code="call">org.hamcrest.Matchers.contains</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveDownSingleSelection"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.move.MoveType.DOWN</op>
                     <op code="get">items</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.move.MoveType.move</op>
                     <op code="get">items</op>
                     <op code="get">first</op>
                     <op code="get">third</op>
                     <op code="get">second</op>
                     <op code="get">fourth</op>
                     <op code="call">org.hamcrest.Matchers.contains</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.dialog">
         <class id="CreateOutputDirectoryConfirmationDialog"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.CreateOutputDirectoryConfirmationDialog; file: org.pdfsam.ui.dialog.CreateOutputDirectoryConfirmationDialog-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/configuration/StylesConfig;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/configuration/StylesConfig">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.dialog.DialogStyle.QUESTION</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.CreateOutputDirectoryConfirmationDialog.title</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.messageTitle</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.messageContent</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LenientExecutionConfirmationDialogTest"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.LenientExecutionConfirmationDialogTest; file: org.pdfsam.ui.dialog.LenientExecutionConfirmationDialogTest-->
            <attributes>
               <attribute final="false" public="false" static="false" type="Z">confirm</attribute>
               <attribute final="false"
                          public="true"
                          static="true"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">CLEAR_STUDIO</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="put">confirm</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">java.util.Locale.UK</op>
                     <op code="call">java.util.Locale.toLanguageTag</op>
                     <op code="call">org.pdfsam.i18n.SetLocaleEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.dialog.LenientExecutionConfirmationDialog.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="contentIsShown"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dialog.LenientExecutionConfirmationDialogTest.clickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.LenientExecutionConfirmationDialogTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.LenientExecutionConfirmationDialogTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.LenientExecutionConfirmationDialogTest.clickOn</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="no"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="put">confirm</op>
                     <op code="call">org.pdfsam.ui.dialog.LenientExecutionConfirmationDialogTest.clickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.LenientExecutionConfirmationDialogTest.clickOn</op>
                     <op code="get">confirm</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="yes"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="put">confirm</op>
                     <op code="call">org.pdfsam.ui.dialog.LenientExecutionConfirmationDialogTest.clickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.LenientExecutionConfirmationDialogTest.clickOn</op>
                     <op code="get">confirm</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.ui.dialog.LenientExecutionConfirmationDialogTest.CLEAR_STUDIO</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OpenWithDialogTest"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.OpenWithDialogTest; file: org.pdfsam.ui.dialog.OpenWithDialogTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/Module">module</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearEventStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Button">button</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                     <op code="call">org.pdfsam.test.DefaultPriorityTestModule.&lt;init&gt;</op>
                     <op code="put">module</op>
                     <op code="get">module</op>
                     <op code="call">org.pdfsam.module.Module.id</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearEventStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="get">module</op>
                     <op code="call">java.util.List.add</op>
                     <op code="call">org.pdfsam.ui.dialog.OpenWithDialog.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dialog.OpenWithDialogController.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="put">button</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="singleArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">module</op>
                     <op code="call">org.pdfsam.module.Module.id</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">module</op>
                     <op code="call">org.pdfsam.module.Module.id</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.InputPdfArgumentsLoadRequest.&lt;init&gt;</op>
                     <op code="get">pdfs</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">java.nio.file.Paths.get</op>
                     <op code="call">java.util.List.add</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">org.pdfsam.ui.dialog.OpenWithDialogTest.clickOn</op>
                     <op code="get">module</op>
                     <op code="call">org.pdfsam.module.Module.descriptor</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.getName</op>
                     <op code="call">org.pdfsam.ui.dialog.OpenWithDialogTest.clickOn</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OverwriteDialogControllerTest$Config"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.OverwriteDialogControllerTest$Config; file: org.pdfsam.ui.dialog.OverwriteDialogControllerTest$Config-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/dialog/OverwriteConfirmationDialog;"
                       name="dialog"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Lorg/pdfsam/ui/dialog/OverwriteConfirmationDialog</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/configuration/StylesConfig;"
                       name="style"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Lorg/pdfsam/configuration/StylesConfig</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OverwriteDialogControllerUITest"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.OverwriteDialogControllerUITest; file: org.pdfsam.ui.dialog.OverwriteDialogControllerUITest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearEventStudio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Button">button</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearEventStudio</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">java.util.Locale.UK</op>
                     <op code="call">java.util.Locale.toLanguageTag</op>
                     <op code="call">org.pdfsam.i18n.SetLocaleEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteDialogControllerUITest$Config.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.start</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="put">button</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="cancelOnFileExists"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.model.parameter.MergeParameters.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.FAIL</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.setExistingOutputPolicy</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.sejda.model.output.FileTaskOutput.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.setOutput</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="get">button</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteDialogControllerUITest.clickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteDialogControllerUITest.clickOn</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.FAIL</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.getExistingOutputPolicy</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="overwriteOnFileExists"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.model.parameter.MergeParameters.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.FAIL</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.setExistingOutputPolicy</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.sejda.model.output.FileTaskOutput.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.setOutput</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="get">button</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteDialogControllerUITest.clickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteDialogControllerUITest.clickOn</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.getExistingOutputPolicy</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="cancelOnNotEmptyDir"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.ALL_PAGES</op>
                     <op code="call">org.sejda.model.parameter.SimpleSplitParameters.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.FAIL</op>
                     <op code="call">org.sejda.model.parameter.SimpleSplitParameters.setExistingOutputPolicy</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.getRoot</op>
                     <op code="call">org.sejda.model.output.FileOrDirectoryTaskOutput.directory</op>
                     <op code="call">org.sejda.model.parameter.SimpleSplitParameters.setOutput</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="get">button</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteDialogControllerUITest.clickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteDialogControllerUITest.clickOn</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.FAIL</op>
                     <op code="call">org.sejda.model.parameter.SimpleSplitParameters.getExistingOutputPolicy</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="overwriteOnNotEmptyDir"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.ALL_PAGES</op>
                     <op code="call">org.sejda.model.parameter.SimpleSplitParameters.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.FAIL</op>
                     <op code="call">org.sejda.model.parameter.SimpleSplitParameters.setExistingOutputPolicy</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.getRoot</op>
                     <op code="call">org.sejda.model.output.FileOrDirectoryTaskOutput.directory</op>
                     <op code="call">org.sejda.model.parameter.SimpleSplitParameters.setOutput</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="get">button</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteDialogControllerUITest.clickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteDialogControllerUITest.clickOn</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.sejda.model.parameter.SimpleSplitParameters.getExistingOutputPolicy</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LenientTaskExecutionDialogController"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.LenientTaskExecutionDialogController; file: org.pdfsam.ui.dialog.LenientTaskExecutionDialogController-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/TaskExecutionRequestEvent">latest</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavax/inject/Provider">dialog</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljavax/inject/Provider;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavax/inject/Provider">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">dialog</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/module/TaskExecutionRequestEvent;)V"
                       name="request"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/module/TaskExecutionRequestEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">latest</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/notification/event/TaskExecutionFailedEvent;)V"
                       name="failed"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/notification/event/TaskExecutionFailedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionFailedEvent.getFailingCause</op>
                     <op code="get">latest</op>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="get">dialog</op>
                     <op code="call">javax.inject.Provider.get</op>
                     <op code="call">org.pdfsam.ui.dialog.LenientExecutionConfirmationDialog.response</op>
                     <op code="get">latest</op>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.getParameters</op>
                     <op code="call">org.sejda.model.parameter.base.AbstractParameters.setLenient</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">latest</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get_static">org.pdfsam.ui.dialog.LenientTaskExecutionDialogController.LOG</op>
                     <op code="call">org.slf4j.Logger.info</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.ui.dialog.LenientTaskExecutionDialogController.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CreateOutputDirectoryDialogController"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.CreateOutputDirectoryDialogController; file: org.pdfsam.ui.dialog.CreateOutputDirectoryDialogController-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavax/inject/Provider">dialog</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljavax/inject/Provider;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavax/inject/Provider">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">dialog</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/NonExistingOutputDirectoryEvent;)V"
                       name="request"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/NonExistingOutputDirectoryEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">dialog</op>
                     <op code="call">javax.inject.Provider.get</op>
                     <op code="call">org.pdfsam.ui.dialog.CreateOutputDirectoryConfirmationDialog.response</op>
                     <op code="get">outputDirectory</op>
                     <op code="call">java.nio.file.Files.createDirectories</op>
                     <op code="get_static">org.pdfsam.ui.dialog.CreateOutputDirectoryDialogController.LOG</op>
                     <op code="get">outputDirectory</op>
                     <op code="call">org.slf4j.Logger.debug</op>
                     <op code="get_static">org.pdfsam.ui.dialog.CreateOutputDirectoryDialogController.LOG</op>
                     <op code="call">org.slf4j.Logger.warn</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.ui.dialog.CreateOutputDirectoryDialogController.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ConfirmationDialogContentTest"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.ConfirmationDialogContentTest; file: org.pdfsam.ui.dialog.ConfirmationDialogContentTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.ACCOUNT</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialogContent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialogContent.messageTitle</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialogContent.messageContent</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="contentIsShown"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialogContentTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialogContentTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OverwriteDialogControllerUITest$Config"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.OverwriteDialogControllerUITest$Config; file: org.pdfsam.ui.dialog.OverwriteDialogControllerUITest$Config-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/configuration/StylesConfig;"
                       name="style"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Lorg/pdfsam/configuration/StylesConfig</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OverwriteConfirmationDialog"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.OverwriteConfirmationDialog; file: org.pdfsam.ui.dialog.OverwriteConfirmationDialog-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/configuration/StylesConfig;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/configuration/StylesConfig">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.dialog.DialogStyle.WARNING</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CreateOutputDirectoryDialogControllerTest$Config"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.CreateOutputDirectoryDialogControllerTest$Config; file: org.pdfsam.ui.dialog.CreateOutputDirectoryDialogControllerTest$Config-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/configuration/StylesConfig;"
                       name="style"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Lorg/pdfsam/configuration/StylesConfig</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="AddSubdirectoriesConfirmationDialog"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.AddSubdirectoriesConfirmationDialog; file: org.pdfsam.ui.dialog.AddSubdirectoriesConfirmationDialog-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/configuration/StylesConfig;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/configuration/StylesConfig">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.dialog.DialogStyle.QUESTION</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.AddSubdirectoriesConfirmationDialog.title</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.messageTitle</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.messageContent</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LenientTaskExecutionDialogControllerTest$Config"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.LenientTaskExecutionDialogControllerTest$Config; file: org.pdfsam.ui.dialog.LenientTaskExecutionDialogControllerTest$Config-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/configuration/StylesConfig;"
                       name="style"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Lorg/pdfsam/configuration/StylesConfig</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LenientTaskExecutionDialogControllerTest"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.LenientTaskExecutionDialogControllerTest; file: org.pdfsam.ui.dialog.LenientTaskExecutionDialogControllerTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearEventStudio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Button">button</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearEventStudio</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">java.util.Locale.UK</op>
                     <op code="call">java.util.Locale.toLanguageTag</op>
                     <op code="call">org.pdfsam.i18n.SetLocaleEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dialog.LenientTaskExecutionDialogControllerTest$Config.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.start</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="put">button</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="negativeWrongFailureCauseTest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="call">java.io.IOException.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionFailedEvent.&lt;init&gt;</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">org.pdfsam.ui.dialog.LenientTaskExecutionDialogControllerTest.clickOn</op>
                     <op code="call">org.pdfsam.ui.dialog.LenientTaskExecutionDialogControllerTest.robotContext</op>
                     <op code="call">org.testfx.api.FxRobotContext.getWindowFinder</op>
                     <op code="call">org.testfx.service.finder.WindowFinder.listWindows</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="negativeNoLatestTest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.io.IOException.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.exception.TaskNonLenientExecutionException.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionFailedEvent.&lt;init&gt;</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">org.pdfsam.ui.dialog.LenientTaskExecutionDialogControllerTest.clickOn</op>
                     <op code="call">org.pdfsam.ui.dialog.LenientTaskExecutionDialogControllerTest.robotContext</op>
                     <op code="call">org.testfx.api.FxRobotContext.getWindowFinder</op>
                     <op code="call">org.testfx.service.finder.WindowFinder.listWindows</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="negativeNoTest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">java.io.IOException.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.exception.TaskNonLenientExecutionException.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionFailedEvent.&lt;init&gt;</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">org.pdfsam.ui.dialog.LenientTaskExecutionDialogControllerTest.clickOn</op>
                     <op code="call">org.pdfsam.ui.dialog.LenientTaskExecutionDialogControllerTest.robotContext</op>
                     <op code="call">org.testfx.api.FxRobotContext.getWindowFinder</op>
                     <op code="call">org.testfx.service.finder.WindowFinder.listWindows</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.LenientTaskExecutionDialogControllerTest.clickOn</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyBoolean</op>
                     <op code="call">org.sejda.model.parameter.base.AbstractParameters.setLenient</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="positiveTest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">java.io.IOException.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.exception.TaskNonLenientExecutionException.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionFailedEvent.&lt;init&gt;</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">org.pdfsam.ui.dialog.LenientTaskExecutionDialogControllerTest.clickOn</op>
                     <op code="call">org.pdfsam.ui.dialog.LenientTaskExecutionDialogControllerTest.robotContext</op>
                     <op code="call">org.testfx.api.FxRobotContext.getWindowFinder</op>
                     <op code="call">org.testfx.service.finder.WindowFinder.listWindows</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.LenientTaskExecutionDialogControllerTest.clickOn</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.sejda.model.parameter.base.AbstractParameters.setLenient</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OverwriteConfirmationDialogTest"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.OverwriteConfirmationDialogTest; file: org.pdfsam.ui.dialog.OverwriteConfirmationDialogTest-->
            <attributes>
               <attribute final="false" public="false" static="false" type="Z">overwrite</attribute>
               <attribute final="false"
                          public="true"
                          static="true"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">CLEAR_STUDIO</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="put">overwrite</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">java.util.Locale.UK</op>
                     <op code="call">java.util.Locale.toLanguageTag</op>
                     <op code="call">org.pdfsam.i18n.SetLocaleEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialog.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="contentIsShown"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialogTest.clickOn</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialogTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialogTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialogTest.clickOn</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="cancel"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="put">overwrite</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialogTest.clickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialogTest.clickOn</op>
                     <op code="get">overwrite</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="overwrite"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="put">overwrite</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialogTest.clickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialogTest.clickOn</op>
                     <op code="get">overwrite</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="esc"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="put">overwrite</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialogTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ESCAPE</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialogTest.push</op>
                     <op code="get">overwrite</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.ui.dialog.OverwriteConfirmationDialogTest.CLEAR_STUDIO</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LenientExecutionConfirmationDialog"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.LenientExecutionConfirmationDialog; file: org.pdfsam.ui.dialog.LenientExecutionConfirmationDialog-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/configuration/StylesConfig;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/configuration/StylesConfig">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.dialog.DialogStyle.QUESTION</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.LenientExecutionConfirmationDialog.title</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.messageTitle</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.messageContent</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OpenWithDialogController"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.OpenWithDialogController; file: org.pdfsam.ui.dialog.OpenWithDialogController-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/dialog/OpenWithDialog">dialog</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/dialog/OpenWithDialog;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/dialog/OpenWithDialog">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">dialog</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/InputPdfArgumentsLoadRequest;)V"
                       name="on"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/InputPdfArgumentsLoadRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="get">dialog</op>
                     <op code="call">org.pdfsam.ui.dialog.OpenWithDialog.initFor</op>
                     <op code="call">org.pdfsam.ui.dialog.OpenWithDialog.showAndWait</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ConfirmationDialogContent"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.ConfirmationDialogContent; file: org.pdfsam.ui.dialog.ConfirmationDialogContent-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">messageTitle</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">messageContent</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lde/jensd/fx/glyphs/materialdesignicons/MaterialDesignIcon;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lde/jensd/fx/glyphs/materialdesignicons/MaterialDesignIcon">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="put">messageTitle</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="put">messageContent</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialogContent.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get">messageTitle</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">messageContent</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">messageTitle</op>
                     <op code="get">messageContent</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.VBox.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialogContent.getChildren</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.get</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.createIcon</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialogContent.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="messageTitle"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">messageTitle</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="messageContent"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">messageContent</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OverwriteDialogController"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.OverwriteDialogController; file: org.pdfsam.ui.dialog.OverwriteDialogController-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavax/inject/Provider">dialog</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljavax/inject/Provider;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavax/inject/Provider">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">dialog</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/module/TaskExecutionRequestEvent;)V"
                       name="request"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/module/TaskExecutionRequestEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.getParameters</op>
                     <op code="call">org.sejda.model.parameter.base.AbstractParameters.getExistingOutputPolicy</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.getParameters</op>
                     <op code="call">org.sejda.model.parameter.base.AbstractParameters.getOutput</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteDialogController$1.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.output.TaskOutput.accept</op>
                     <op code="get_static">org.pdfsam.ui.dialog.OverwriteDialogController.LOG</op>
                     <op code="call">org.slf4j.Logger.warn</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/parameter/base/AbstractParameters;Ljava/io/File;)V"
                       name="onDirectory"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/sejda/model/parameter/base/AbstractParameters">?</arg>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.io.File.listFiles</op>
                     <op code="call">org.apache.commons.lang3.ArrayUtils.isNotEmpty</op>
                     <op code="get">dialog</op>
                     <op code="call">javax.inject.Provider.get</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialog.title</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.messageTitle</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.messageContent</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.response</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.eventstudio.exception.BroadcastInterruptionException.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.dialog.OverwriteDialogController.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.sejda.model.parameter.base.AbstractParameters.setExistingOutputPolicy</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/parameter/base/AbstractParameters;Ljava/io/File;)V"
                       name="onFile"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/sejda/model/parameter/base/AbstractParameters">?</arg>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.io.File.exists</op>
                     <op code="get">dialog</op>
                     <op code="call">javax.inject.Provider.get</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialog.title</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.messageTitle</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.messageContent</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.response</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.eventstudio.exception.BroadcastInterruptionException.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.dialog.OverwriteDialogController.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.sejda.model.parameter.base.AbstractParameters.setExistingOutputPolicy</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.ui.dialog.OverwriteDialogController.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OverwriteDialogControllerTest"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.OverwriteDialogControllerTest; file: org.pdfsam.ui.dialog.OverwriteDialogControllerTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearEventStudio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">javaFxThread</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/injector/Injector">injector</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearEventStudio</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteDialogControllerTest$Config.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.start</op>
                     <op code="put">injector</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="isOverwrite"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.model.parameter.MergeParameters.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.setExistingOutputPolicy</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.setOutput</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteDialogController.request</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.sejda.model.output.FileTaskOutput.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="fileDoesntExists"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.model.parameter.MergeParameters.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.FAIL</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.setExistingOutputPolicy</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">java.io.File.exists</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.FALSE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.sejda.model.output.FileTaskOutput.getDestination</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.setOutput</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteDialogController.request</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialog.title</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialog.messageContent</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialog.messageTitle</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialog.response</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="directoryIsEmpty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.ALL_PAGES</op>
                     <op code="call">org.sejda.model.parameter.SimpleSplitParameters.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.FAIL</op>
                     <op code="call">org.sejda.model.parameter.SimpleSplitParameters.setExistingOutputPolicy</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">java.io.File.listFiles</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.sejda.model.output.FileOrDirectoryTaskOutput.getDestination</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.sejda.model.parameter.SimpleSplitParameters.setOutput</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteDialogController.request</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialog.title</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialog.messageContent</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialog.messageTitle</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.ui.dialog.OverwriteConfirmationDialog.response</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OpenWithDialog"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.OpenWithDialog; file: org.pdfsam.ui.dialog.OpenWithDialog-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">messageTitle</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/layout/HBox">buttons</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/ListView">filesList</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/List">modules</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/configuration/StylesConfig;Ljava/util/List;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/configuration/StylesConfig">?</arg>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.stage.Stage.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="put">messageTitle</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="put">buttons</op>
                     <op code="call">javafx.scene.control.ListView.&lt;init&gt;</op>
                     <op code="put">filesList</op>
                     <op code="get_static">javafx.stage.Modality.WINDOW_MODAL</op>
                     <op code="call">org.pdfsam.ui.dialog.OpenWithDialog.initModality</op>
                     <op code="get_static">javafx.stage.StageStyle.UTILITY</op>
                     <op code="call">org.pdfsam.ui.dialog.OpenWithDialog.initStyle</op>
                     <op code="call">org.pdfsam.ui.dialog.OpenWithDialog.setResizable</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.OpenWithDialog.setTitle</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.Comparator.comparing</op>
                     <op code="call">java.util.stream.Stream.sorted</op>
                     <op code="call">java.util.stream.Collectors.toList</op>
                     <op code="call">java.util.stream.Stream.collect</op>
                     <op code="put">modules</op>
                     <op code="get">messageTitle</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.layout.BorderPane.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.BorderPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.layout.BorderPane.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get">messageTitle</op>
                     <op code="call">javafx.scene.layout.BorderPane.setTop</op>
                     <op code="get">messageTitle</op>
                     <op code="get_static">javafx.geometry.Pos.TOP_CENTER</op>
                     <op code="call">javafx.scene.layout.BorderPane.setAlignment</op>
                     <op code="get">filesList</op>
                     <op code="call">javafx.scene.control.ListView.setPrefHeight</op>
                     <op code="get">filesList</op>
                     <op code="call">javafx.scene.layout.BorderPane.setCenter</op>
                     <op code="get">buttons</op>
                     <op code="call">javafx.scene.layout.HBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get">buttons</op>
                     <op code="call">javafx.scene.layout.BorderPane.setBottom</op>
                     <op code="get">buttons</op>
                     <op code="get_static">javafx.geometry.Pos.CENTER</op>
                     <op code="call">javafx.scene.layout.BorderPane.setAlignment</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.getStylesheets</op>
                     <op code="call">org.pdfsam.configuration.StylesConfig.styles</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.commons.HideOnEscapeHandler.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.setOnKeyReleased</op>
                     <op code="call">org.pdfsam.ui.dialog.OpenWithDialog.setScene</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Window;)V"
                       name="setOwner"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Window">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dialog.OpenWithDialog.initOwner</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/InputPdfArgumentsLoadRequest;)Lorg/pdfsam/ui/dialog/OpenWithDialog;"
                       name="initFor"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/ui/InputPdfArgumentsLoadRequest">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/dialog/OpenWithDialog</return>
                  <ops>
                     <op code="get">messageTitle</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                     <op code="get">filesList</op>
                     <op code="get">pdfs</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Collectors.toList</op>
                     <op code="call">java.util.stream.Stream.collect</op>
                     <op code="call">javafx.collections.FXCollections.observableArrayList</op>
                     <op code="call">javafx.scene.control.ListView.setItems</op>
                     <op code="get">modules</op>
                     <op code="call">java.util.List.forEach</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OpenWithDialogControllerTest"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.OpenWithDialogControllerTest; file: org.pdfsam.ui.dialog.OpenWithDialogControllerTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/Module">module1</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/Module">module2</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearEventStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Button">button</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                     <op code="call">org.pdfsam.test.HighPriorityTestModule.&lt;init&gt;</op>
                     <op code="put">module1</op>
                     <op code="call">org.pdfsam.test.DefaultPriorityTestModule.&lt;init&gt;</op>
                     <op code="put">module2</op>
                     <op code="get">module1</op>
                     <op code="call">org.pdfsam.module.Module.id</op>
                     <op code="get">module2</op>
                     <op code="call">org.pdfsam.module.Module.id</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearEventStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="get">module1</op>
                     <op code="call">java.util.List.add</op>
                     <op code="get">module2</op>
                     <op code="call">java.util.List.add</op>
                     <op code="call">org.pdfsam.ui.dialog.OpenWithDialog.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dialog.OpenWithDialogController.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="put">button</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="singleArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.InputPdfArgumentsLoadRequest.&lt;init&gt;</op>
                     <op code="get">pdfs</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">java.nio.file.Paths.get</op>
                     <op code="call">java.util.List.add</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">org.pdfsam.ui.dialog.OpenWithDialogControllerTest.clickOn</op>
                     <op code="get">module2</op>
                     <op code="call">org.pdfsam.module.Module.descriptor</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.getName</op>
                     <op code="call">org.pdfsam.ui.dialog.OpenWithDialogControllerTest.clickOn</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="multipleArgs"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.InputPdfArgumentsLoadRequest.&lt;init&gt;</op>
                     <op code="get">pdfs</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">java.nio.file.Paths.get</op>
                     <op code="call">java.util.List.add</op>
                     <op code="get">pdfs</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">java.nio.file.Paths.get</op>
                     <op code="call">java.util.List.add</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">org.pdfsam.ui.dialog.OpenWithDialogControllerTest.clickOn</op>
                     <op code="get">module1</op>
                     <op code="call">org.pdfsam.module.Module.descriptor</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.getName</op>
                     <op code="call">org.pdfsam.ui.dialog.OpenWithDialogControllerTest.clickOn</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CreateOutputDirectoryConfirmationDialogTest"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.CreateOutputDirectoryConfirmationDialogTest; file: org.pdfsam.ui.dialog.CreateOutputDirectoryConfirmationDialogTest-->
            <attributes>
               <attribute final="false" public="false" static="false" type="Z">confirm</attribute>
               <attribute final="false"
                          public="true"
                          static="true"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">CLEAR_STUDIO</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Button">button</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="put">confirm</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">java.util.Locale.UK</op>
                     <op code="call">java.util.Locale.toLanguageTag</op>
                     <op code="call">org.pdfsam.i18n.SetLocaleEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.dialog.CreateOutputDirectoryConfirmationDialog.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="put">button</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="contentIsShown"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">button</op>
                     <op code="call">org.pdfsam.ui.dialog.CreateOutputDirectoryConfirmationDialogTest.clickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.CreateOutputDirectoryConfirmationDialogTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.CreateOutputDirectoryConfirmationDialogTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.CreateOutputDirectoryConfirmationDialogTest.clickOn</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="cancel"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="put">confirm</op>
                     <op code="get">button</op>
                     <op code="call">org.pdfsam.ui.dialog.CreateOutputDirectoryConfirmationDialogTest.clickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.CreateOutputDirectoryConfirmationDialogTest.clickOn</op>
                     <op code="get">confirm</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="overwrite"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="put">confirm</op>
                     <op code="get">button</op>
                     <op code="call">org.pdfsam.ui.dialog.CreateOutputDirectoryConfirmationDialogTest.clickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.CreateOutputDirectoryConfirmationDialogTest.clickOn</op>
                     <op code="get">confirm</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.ui.dialog.CreateOutputDirectoryConfirmationDialogTest.CLEAR_STUDIO</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CreateOutputDirectoryDialogControllerTest"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.CreateOutputDirectoryDialogControllerTest; file: org.pdfsam.ui.dialog.CreateOutputDirectoryDialogControllerTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearEventStudio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Button">button</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearEventStudio</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">java.util.Locale.UK</op>
                     <op code="call">java.util.Locale.toLanguageTag</op>
                     <op code="call">org.pdfsam.i18n.SetLocaleEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dialog.CreateOutputDirectoryDialogControllerTest$Config.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.start</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="put">button</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="negativeTest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFolder</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">java.nio.file.Paths.get</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.delete</op>
                     <op code="call">org.pdfsam.ui.dialog.CreateOutputDirectoryDialogControllerTest.clickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.CreateOutputDirectoryDialogControllerTest.clickOn</op>
                     <op code="call">java.nio.file.Files.exists</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="positiveTest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFolder</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">java.nio.file.Paths.get</op>
                     <op code="get">button</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.delete</op>
                     <op code="call">org.pdfsam.ui.dialog.CreateOutputDirectoryDialogControllerTest.clickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dialog.CreateOutputDirectoryDialogControllerTest.clickOn</op>
                     <op code="call">java.nio.file.Files.exists</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ConfirmationDialog"><!--Package: org.pdfsam.ui.dialog; name: org.pdfsam.ui.dialog.ConfirmationDialog; file: org.pdfsam.ui.dialog.ConfirmationDialog-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/dialog/ConfirmationDialogContent">dialogContent</attribute>
               <attribute final="false" public="false" static="false" type="Z">response</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/configuration/StylesConfig;Lorg/pdfsam/ui/dialog/DialogStyle;Ljava/lang/String;Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/configuration/StylesConfig">?</arg>
                     <arg type="Lorg/pdfsam/ui/dialog/DialogStyle">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.stage.Stage.&lt;init&gt;</op>
                     <op code="put">response</op>
                     <op code="get_static">javafx.stage.Modality.WINDOW_MODAL</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.initModality</op>
                     <op code="get_static">javafx.stage.StageStyle.UTILITY</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.initStyle</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.setResizable</op>
                     <op code="get">icon</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialogContent.&lt;init&gt;</op>
                     <op code="put">dialogContent</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.VBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.layout.VBox.getStyleClass</op>
                     <op code="get">style</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.buildPositiveButton</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.buildCancelButton</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.layout.VBox.getChildren</op>
                     <op code="get">dialogContent</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.getStylesheets</op>
                     <op code="call">org.pdfsam.configuration.StylesConfig.styles</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.setScene</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Window;)V"
                       name="setOwner"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Window">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.initOwner</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lorg/pdfsam/ui/dialog/ConfirmationDialog;"
                       name="title"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/dialog/ConfirmationDialog</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.setTitle</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lorg/pdfsam/ui/dialog/ConfirmationDialog;"
                       name="messageTitle"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/dialog/ConfirmationDialog</return>
                  <ops>
                     <op code="get">dialogContent</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialogContent.messageTitle</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lorg/pdfsam/ui/dialog/ConfirmationDialog;"
                       name="messageContent"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/dialog/ConfirmationDialog</return>
                  <ops>
                     <op code="get">dialogContent</op>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialogContent.messageContent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="response"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.showAndWait</op>
                     <op code="get">response</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Z)Ljavafx/scene/control/Button;"
                       name="buildButton"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>Ljavafx/scene/control/Button</return>
                  <ops>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Button.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.BUTTON</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Z)Ljavafx/scene/control/Button;"
                       name="buildPositiveButton"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>Ljavafx/scene/control/Button</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.buildButton</op>
                     <op code="call">javafx.scene.control.Button.setDefaultButton</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Z)Ljavafx/scene/control/Button;"
                       name="buildCancelButton"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>Ljavafx/scene/control/Button</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dialog.ConfirmationDialog.buildButton</op>
                     <op code="call">javafx.scene.control.Button.setCancelButton</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.notification">
         <class id="AddNotificationRequestEvent"><!--Package: org.pdfsam.ui.notification; name: org.pdfsam.ui.notification.AddNotificationRequestEvent; file: org.pdfsam.ui.notification.AddNotificationRequestEvent-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/ui/notification/NotificationType">type</attribute>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Ljava/lang/String">message</attribute>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Ljava/lang/String">title</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/notification/NotificationType;Ljava/lang/String;Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/notification/NotificationType">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="put">type</op>
                     <op code="put">message</op>
                     <op code="put">title</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="AddNotificationRequestEventTest"><!--Package: org.pdfsam.ui.notification; name: org.pdfsam.ui.notification.AddNotificationRequestEventTest; file: org.pdfsam.ui.notification.AddNotificationRequestEventTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullType"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.notification.AddNotificationRequestEvent.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullMessage"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.notification.NotificationType.INFO</op>
                     <op code="call">org.pdfsam.ui.notification.AddNotificationRequestEvent.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="blankMessage"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.notification.NotificationType.INFO</op>
                     <op code="call">org.pdfsam.ui.notification.AddNotificationRequestEvent.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="positive"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.notification.NotificationType.INFO</op>
                     <op code="call">org.pdfsam.ui.notification.AddNotificationRequestEvent.&lt;init&gt;</op>
                     <op code="get">message</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">title</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.ui.notification.NotificationType.INFO</op>
                     <op code="get">type</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="NotificationsContainerTest"><!--Package: org.pdfsam.ui.notification; name: org.pdfsam.ui.notification.NotificationsContainerTest; file: org.pdfsam.ui.notification.NotificationsContainerTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeJavaFxThreadRule">javaFxThread</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.InitializeJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="addNotification"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.setId</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.addNotification</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="addStickyNotification"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Label.setId</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.addStickyNotification</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="NotificationsContainer"><!--Package: org.pdfsam.ui.notification; name: org.pdfsam.ui.notification.NotificationsContainer; file: org.pdfsam.ui.notification.NotificationsContainer-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.setMaxHeight</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljavafx/scene/Node;)V"
                       name="addNotification"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljavafx/scene/Node">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.application.Platform.runLater</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljavafx/scene/Node;)V"
                       name="addStickyNotification"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljavafx/scene/Node">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.application.Platform.runLater</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljavafx/scene/Node;)Lorg/pdfsam/ui/notification/Notification;"
                       name="doAddNotification"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljavafx/scene/Node">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/notification/Notification</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.notification.Notification.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.notification.Notification.onFade</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/notification/Notification;Ljavafx/event/EventHandler;)V"
                       name="fadeIn"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/ui/notification/Notification">?</arg>
                     <arg type="Ljavafx/event/EventHandler">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.util.Duration.millis</op>
                     <op code="call">javafx.animation.FadeTransition.&lt;init&gt;</op>
                     <op code="call">javafx.animation.FadeTransition.setFromValue</op>
                     <op code="call">javafx.animation.FadeTransition.setToValue</op>
                     <op code="call">javafx.animation.FadeTransition.setOnFinished</op>
                     <op code="call">javafx.animation.FadeTransition.play</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="removeNotification"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.String.format</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.lookup</op>
                     <op code="call">org.pdfsam.ui.notification.Notification.fadeAway</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Notification"><!--Package: org.pdfsam.ui.notification; name: org.pdfsam.ui.notification.Notification; file: org.pdfsam.ui.notification.Notification-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/animation/FadeTransition">fade</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;Ljavafx/scene/Node;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljavafx/scene/Node">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.util.Duration.millis</op>
                     <op code="call">javafx.animation.FadeTransition.&lt;init&gt;</op>
                     <op code="put">fade</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">org.pdfsam.ui.notification.Notification.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.ui.notification.Notification.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">java.util.UUID.randomUUID</op>
                     <op code="call">java.util.UUID.toString</op>
                     <op code="call">org.pdfsam.ui.notification.Notification.setId</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory.get</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.TIMES</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory.createIconButton</op>
                     <op code="call">javafx.scene.control.Button.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Label.setPrefWidth</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.layout.StackPane.&lt;init&gt;</op>
                     <op code="get_static">javafx.geometry.Pos.TOP_RIGHT</op>
                     <op code="call">javafx.scene.layout.StackPane.setAlignment</op>
                     <op code="call">org.pdfsam.ui.notification.Notification.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.notification.Notification.setOpacity</op>
                     <op code="call">org.pdfsam.ui.notification.Notification.setOnMouseEntered</op>
                     <op code="call">org.pdfsam.ui.notification.Notification.setOnMouseClicked</op>
                     <op code="get">fade</op>
                     <op code="call">javafx.animation.FadeTransition.setFromValue</op>
                     <op code="get">fade</op>
                     <op code="call">javafx.animation.FadeTransition.setToValue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/event/EventHandler;)V"
                       name="onFade"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljavafx/event/EventHandler">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">fade</op>
                     <op code="call">javafx.animation.FadeTransition.setOnFinished</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/util/Duration;)V"
                       name="fadeAway"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljavafx/util/Duration">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">fade</op>
                     <op code="call">javafx.animation.FadeTransition.stop</op>
                     <op code="get">fade</op>
                     <op code="call">javafx.animation.FadeTransition.setDelay</op>
                     <op code="get">fade</op>
                     <op code="get_static">javafx.util.Duration.ZERO</op>
                     <op code="call">javafx.animation.FadeTransition.jumpTo</op>
                     <op code="get">fade</op>
                     <op code="call">javafx.animation.FadeTransition.play</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="fadeAway"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">javafx.util.Duration.ZERO</op>
                     <op code="call">org.pdfsam.ui.notification.Notification.fadeAway</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RemoveNotificationRequestEventTest"><!--Package: org.pdfsam.ui.notification; name: org.pdfsam.ui.notification.RemoveNotificationRequestEventTest; file: org.pdfsam.ui.notification.RemoveNotificationRequestEventTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="blankNotification"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.notification.RemoveNotificationRequestEvent.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="NotificationsController"><!--Package: org.pdfsam.ui.notification; name: org.pdfsam.ui.notification.NotificationsController; file: org.pdfsam.ui.notification.NotificationsController-->
            <attributes>
               <attribute final="true" public="false" static="true" type="I">TIMES_BEFORE_ENTERPRISE_NOTICE</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/notification/NotificationsContainer">container</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/UsageService">service</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/Pdfsam">pdfsam</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/UserContext">userContext</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/security/SecureRandom">random</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/notification/NotificationsContainer;Lorg/pdfsam/module/UsageService;Lorg/pdfsam/Pdfsam;Lorg/pdfsam/context/UserContext;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/ui/notification/NotificationsContainer">?</arg>
                     <arg type="Lorg/pdfsam/module/UsageService">?</arg>
                     <arg type="Lorg/pdfsam/Pdfsam">?</arg>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">java.security.SecureRandom.&lt;init&gt;</op>
                     <op code="put">random</op>
                     <op code="put">container</op>
                     <op code="put">service</op>
                     <op code="put">pdfsam</op>
                     <op code="put">userContext</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/notification/AddNotificationRequestEvent;)V"
                       name="onAddRequest"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/notification/AddNotificationRequestEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">container</op>
                     <op code="get">title</op>
                     <op code="get">message</op>
                     <op code="get">type</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.buildLabel</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.addNotification</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lorg/pdfsam/ui/notification/NotificationType;)Ljavafx/scene/control/Label;"
                       name="buildLabel"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lorg/pdfsam/ui/notification/NotificationType">?</arg>
                  </args>
                  <return>Ljavafx/scene/control/Label</return>
                  <ops>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationType.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationType.getGraphic</op>
                     <op code="call">javafx.scene.control.Label.setGraphic</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/notification/event/TaskExecutionFailedEvent;)V"
                       name="onTaskFailed"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/notification/event/TaskExecutionFailedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionFailedEvent.getFailingCause</op>
                     <op code="get">container</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">org.pdfsam.ui.notification.NotificationType.ERROR</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.buildLabel</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.addNotification</op>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionFailedEvent.getFailingCause</op>
                     <op code="call">org.apache.commons.lang3.exception.ExceptionUtils.getRootCause</op>
                     <op code="get">container</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">java.nio.file.AccessDeniedException.getFile</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">org.pdfsam.ui.notification.NotificationType.ERROR</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.buildLabel</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.addNotification</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/notification/event/TaskExecutionCompletedEvent;)V"
                       name="onTaskCompleted"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/notification/event/TaskExecutionCompletedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.module.UsageService.getTotalUsage</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.context.UserContext.isDonationNotification</op>
                     <op code="get">random</op>
                     <op code="call">java.security.SecureRandom.nextInt</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.addDonationNotification</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.addShareNotification</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(J)V"
                       name="addDonationNotification"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="J">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">java.lang.Long.toString</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">org.pdfsam.ui.notification.NotificationType.GO_PRO</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.buildLabel</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">pdfsam</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.DONATE_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.pdfsam.ui.commons.UrlButton.styledUrlButton</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="get_static">javafx.geometry.Pos.TOP_RIGHT</op>
                     <op code="call">javafx.scene.layout.VBox.setAlignment</op>
                     <op code="get">container</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.addStickyNotification</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(J)V"
                       name="addShareNotification"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="J">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.Region.&lt;init&gt;</op>
                     <op code="get_static">javafx.scene.layout.Priority.ALWAYS</op>
                     <op code="call">javafx.scene.layout.HBox.setHgrow</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">java.lang.Long.toString</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">org.pdfsam.ui.notification.NotificationType.SHARE</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.buildLabel</op>
                     <op code="get">pdfsam</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.FACEBOOK_SHARE_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.FACEBOOK</op>
                     <op code="call">org.pdfsam.ui.commons.UrlButton.styledUrlButton</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">pdfsam</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.TWEETER_SHARE_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.TWITTER</op>
                     <op code="call">org.pdfsam.ui.commons.UrlButton.styledUrlButton</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="get_static">javafx.geometry.Pos.TOP_RIGHT</op>
                     <op code="call">javafx.scene.layout.VBox.setAlignment</op>
                     <op code="get">container</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.addStickyNotification</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/notification/RemoveNotificationRequestEvent;)V"
                       name="onRemoveRequest"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/notification/RemoveNotificationRequestEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">container</op>
                     <op code="get">notificationId</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.removeNotification</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/update/UpdateAvailableEvent;)V"
                       name="onUpdateAvailable"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/update/UpdateAvailableEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="get">availableVersion</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">org.pdfsam.ui.notification.NotificationType.INFO</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.buildLabel</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">pdfsam</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.DOWNLOAD_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.pdfsam.ui.commons.UrlButton.styledUrlButton</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="get_static">javafx.geometry.Pos.TOP_RIGHT</op>
                     <op code="call">javafx.scene.layout.VBox.setAlignment</op>
                     <op code="get">container</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.addStickyNotification</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/update/NoUpdateAvailable;)V"
                       name="onNoUpdateAvailable"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/update/NoUpdateAvailable">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">org.pdfsam.ui.notification.NotificationType.INFO</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.buildLabel</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="get_static">javafx.geometry.Pos.TOP_RIGHT</op>
                     <op code="call">javafx.scene.layout.VBox.setAlignment</op>
                     <op code="get">container</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.addNotification</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/news/NewImportantNewsEvent;)V"
                       name="onNewImportantNews"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/news/NewImportantNewsEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">news</op>
                     <op code="call">org.pdfsam.news.NewsData.getContent</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.buildLabel</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">news</op>
                     <op code="call">org.pdfsam.news.NewsData.getLink</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.EXTERNAL_LINK</op>
                     <op code="call">org.pdfsam.ui.commons.UrlButton.styledUrlButton</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="get_static">javafx.geometry.Pos.TOP_RIGHT</op>
                     <op code="call">javafx.scene.layout.VBox.setAlignment</op>
                     <op code="get">container</op>
                     <op code="get">news</op>
                     <op code="call">org.pdfsam.news.NewsData.getTitle</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.addStickyNotification</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="NotificationsControllerTest"><!--Package: org.pdfsam.ui.notification; name: org.pdfsam.ui.notification.NotificationsControllerTest; file: org.pdfsam.ui.notification.NotificationsControllerTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="true"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">STUDIO_RULE</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">javaFxThread</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/UsageService">service</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/notification/NotificationsContainer">container</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/notification/NotificationsController">victim</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/UserContext">context</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">service</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">container</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">context</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.DOWNLOAD_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.DONATE_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.TWEETER_SHARE_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.FACEBOOK_SHARE_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">context</op>
                     <op code="call">org.pdfsam.context.UserContext.isDonationNotification</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">container</op>
                     <op code="get">service</op>
                     <op code="get">context</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onAddRequest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.notification.NotificationType.INFO</op>
                     <op code="call">org.pdfsam.ui.notification.AddNotificationRequestEvent.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.onAddRequest</op>
                     <op code="get">container</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.addNotification</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onRemoveRequest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.notification.RemoveNotificationRequestEvent.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.onRemoveRequest</op>
                     <op code="get">container</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.removeNotification</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onUpdateAvailable"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.update.UpdateAvailableEvent.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.onUpdateAvailable</op>
                     <op code="get">container</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.addStickyNotification</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onNoUpdateAvailable"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.update.NoUpdateAvailable.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.onNoUpdateAvailable</op>
                     <op code="get">container</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.addNotification</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onTaskFailed"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Exception.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionFailedEvent.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.onTaskFailed</op>
                     <op code="get">container</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.addNotification</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onInvalidParameters"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Collections.emptyList</op>
                     <op code="call">org.sejda.model.exception.InvalidTaskParametersException.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionFailedEvent.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.onTaskFailed</op>
                     <op code="get">container</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.addNotification</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onAccessDenied"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.nio.file.AccessDeniedException.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.exception.TaskIOException.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionFailedEvent.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.onTaskFailed</op>
                     <op code="get">container</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.addNotification</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onTaskCompleteAndNoProDisplay"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.module.UsageService.getTotalUsage</op>
                     <op code="call">java.lang.Long.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Long.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">victim</op>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionCompletedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.onTaskCompleted</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.module.UsageService.getTotalUsage</op>
                     <op code="call">java.lang.Long.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Long.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">victim</op>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionCompletedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.onTaskCompleted</op>
                     <op code="get">container</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.addStickyNotification</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onTaskCompleteAndProDisplay"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.module.UsageService.getTotalUsage</op>
                     <op code="call">java.lang.Long.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Long.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">victim</op>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionCompletedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.onTaskCompleted</op>
                     <op code="get">container</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.addStickyNotification</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onTaskCompleteDontDisplaySettingIsOn"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">context</op>
                     <op code="call">org.pdfsam.context.UserContext.isDonationNotification</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.module.UsageService.getTotalUsage</op>
                     <op code="call">java.lang.Long.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Long.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">victim</op>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionCompletedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.onTaskCompleted</op>
                     <op code="get">container</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.addStickyNotification</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onNewImportantNews"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.news.NewsData.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.news.NewsData.setTitle</op>
                     <op code="call">org.pdfsam.news.NewsData.setContent</op>
                     <op code="call">org.pdfsam.news.NewsData.setLink</op>
                     <op code="call">org.pdfsam.news.NewImportantNewsEvent.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsController.onNewImportantNews</op>
                     <op code="get">container</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.ui.notification.NotificationsContainer.addStickyNotification</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.ui.notification.NotificationsControllerTest.STUDIO_RULE</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RemoveNotificationRequestEvent"><!--Package: org.pdfsam.ui.notification; name: org.pdfsam.ui.notification.RemoveNotificationRequestEvent; file: org.pdfsam.ui.notification.RemoveNotificationRequestEvent-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Ljava/lang/String">notificationId</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="put">notificationId</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.splitbybookmarks">
         <class id="SplitByBookmarksModule"><!--Package: org.pdfsam.splitbybookmarks; name: org.pdfsam.splitbybookmarks.SplitByBookmarksModule; file: org.pdfsam.splitbybookmarks.SplitByBookmarksModule-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE_ID</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/single/TaskParametersBuilderSingleSelectionPane">selectionPane</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField">destinationDirectoryField</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/PdfDestinationPane">destinationPane</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/splitbybookmarks/SplitOptionsPane">splitOptions</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/prefix/PrefixPane">prefix</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/ModuleDescriptor">descriptor</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField;Lorg/pdfsam/ui/io/PdfDestinationPane;Lorg/pdfsam/ui/module/Footer;Lorg/pdfsam/ui/prefix/PrefixPane;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField">?</arg>
                     <arg type="Lorg/pdfsam/ui/io/PdfDestinationPane">?</arg>
                     <arg type="Lorg/pdfsam/ui/module/Footer">?</arg>
                     <arg type="Lorg/pdfsam/ui/prefix/PrefixPane">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.BaseTaskExecutionModule.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPane.&lt;init&gt;</op>
                     <op code="put">splitOptions</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.builder</op>
                     <op code="get_static">org.pdfsam.module.ModuleCategory.SPLIT</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.category</op>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.SINGLE_PDF</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.inputTypes</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.name</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.description</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.DEFAULT</op>
                     <op code="call">org.pdfsam.module.ModulePriority.getPriority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.priority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.supportURL</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.build</op>
                     <op code="put">descriptor</op>
                     <op code="put">destinationDirectoryField</op>
                     <op code="put">destinationPane</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByBookmarksModule.id</op>
                     <op code="call">org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane.&lt;init&gt;</op>
                     <op code="put">selectionPane</op>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane.setPromptText</op>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane.addOnLoaded</op>
                     <op code="put">prefix</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByBookmarksModule.settingPanel</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByBookmarksModule.initModuleSettingsPanel</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="onSaveWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane.saveStateTo</op>
                     <op code="get">splitOptions</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPane.saveStateTo</op>
                     <op code="get">destinationDirectoryField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.saveStateTo</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.saveStateTo</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.saveStateTo</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="onLoadWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane.restoreStateFrom</op>
                     <op code="get">splitOptions</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPane.restoreStateFrom</op>
                     <op code="get">destinationDirectoryField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.restoreStateFrom</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.restoreStateFrom</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.restoreStateFrom</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/ModuleDescriptor;"
                       name="descriptor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/ModuleDescriptor</return>
                  <ops>
                     <op code="get">descriptor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/function/Consumer;)Lorg/apache/commons/lang3/builder/Builder;"
                       name="getBuilder"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>Lorg/apache/commons/lang3/builder/Builder</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.&lt;init&gt;</op>
                     <op code="get">splitOptions</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPane.apply</op>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane.apply</op>
                     <op code="get">destinationDirectoryField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.apply</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.apply</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.apply</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/VBox;"
                       name="settingPanel"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Ljavafx/scene/layout/VBox</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="get_static">javafx.geometry.Pos.TOP_CENTER</op>
                     <op code="call">javafx.scene.layout.VBox.setAlignment</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.support.Views.titledPane</op>
                     <op code="get">prefix</op>
                     <op code="get_static">org.sejda.model.prefix.Prefix.CURRENTPAGE</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.addMenuItemFor</op>
                     <op code="get">prefix</op>
                     <op code="get_static">org.sejda.model.prefix.Prefix.FILENUMBER</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.addMenuItemFor</op>
                     <op code="get">prefix</op>
                     <op code="get_static">org.sejda.model.prefix.Prefix.BOOKMARK</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.addMenuItemFor</op>
                     <op code="get">prefix</op>
                     <op code="get_static">org.sejda.model.prefix.Prefix.BOOKMARK_STRICT</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.addMenuItemFor</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.addMenuItemFor</op>
                     <op code="call">javafx.scene.layout.VBox.getChildren</op>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">splitOptions</op>
                     <op code="call">org.pdfsam.ui.support.Views.titledPane</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.support.Views.titledPane</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="id"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/ClearModuleEvent;)V"
                       name="onClearModule"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/ClearModuleEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">clearEverything</op>
                     <op code="get">splitOptions</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPane.resetView</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.resetView</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.resetView</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()[Lorg/pdfsam/module/RequiredPdfData;"
                       name="requires"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/RequiredPdfData</return>
                  <ops>
                     <op code="get_static">org.pdfsam.module.RequiredPdfData.DEFAULT</op>
                     <op code="get_static">org.pdfsam.module.RequiredPdfData.BOOMARKS</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/Node;"
                       name="graphic"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/Node</return>
                  <ops>
                     <op code="call">javafx.scene.image.ImageView.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitOptionsPane"><!--Package: org.pdfsam.splitbybookmarks; name: org.pdfsam.splitbybookmarks.SplitOptionsPane; file: org.pdfsam.splitbybookmarks.SplitOptionsPane-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/splitbybookmarks/BookmarksLevelComboBox">levelCombo</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/TextField">regexpField</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.&lt;init&gt;</op>
                     <op code="put">levelCombo</op>
                     <op code="call">javafx.scene.control.TextField.&lt;init&gt;</op>
                     <op code="put">regexpField</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="get">levelCombo</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setId</op>
                     <op code="get">regexpField</op>
                     <op code="call">javafx.scene.control.TextField.setId</op>
                     <op code="get">regexpField</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.TextField.setPromptText</op>
                     <op code="get">regexpField</op>
                     <op code="call">javafx.scene.control.TextField.setPrefWidth</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPane.getChildren</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="get">levelCombo</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPane.createLine</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="get">regexpField</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.lang.System.lineSeparator</op>
                     <op code="call">javafx.scene.text.Text.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.text.Text.&lt;init&gt;</op>
                     <op code="call">javafx.scene.text.TextFlow.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPane.createLine</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/SortedSet;)V"
                       name="setValidBookmarkLevels"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/util/SortedSet">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">levelCombo</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljavafx/scene/Node;)Ljavafx/scene/layout/HBox;"
                       name="createLine"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljavafx/scene/Node">?</arg>
                  </args>
                  <return>Ljavafx/scene/layout/HBox</return>
                  <ops>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.VITEM</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.layout.HBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.HCONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="resetView"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">regexpField</op>
                     <op code="call">javafx.scene.control.TextField.clear</op>
                     <op code="get">levelCombo</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.resetView</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/splitbybookmarks/SplitByOutlineLevelParametersBuilder;Ljava/util/function/Consumer;)V"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/splitbybookmarks/SplitByOutlineLevelParametersBuilder">?</arg>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">levelCombo</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.apply</op>
                     <op code="get">regexpField</op>
                     <op code="call">javafx.scene.control.TextField.getText</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotBlank</op>
                     <op code="get">regexpField</op>
                     <op code="call">javafx.scene.control.TextField.getText</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.regexp</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="saveStateTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">regexpField</op>
                     <op code="call">javafx.scene.control.TextField.getText</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">levelCombo</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.saveStateTo</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">regexpField</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">javafx.scene.control.TextField.setText</op>
                     <op code="get">levelCombo</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.restoreStateFrom</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BookmarksLevelComboBox"><!--Package: org.pdfsam.splitbybookmarks; name: org.pdfsam.splitbybookmarks.BookmarksLevelComboBox; file: org.pdfsam.splitbybookmarks.BookmarksLevelComboBox-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/support/FXValidationSupport">validationSupport</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.ComboBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.&lt;init&gt;</op>
                     <op code="put">validationSupport</op>
                     <op code="get">validationSupport</op>
                     <op code="call">org.pdfsam.support.validation.Validators.alwaysFalse</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.setValidator</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setEditable</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.selectFirst</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.valueProperty</op>
                     <op code="call">javafx.beans.property.ObjectProperty.addListener</op>
                     <op code="get">validationSupport</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validationStateProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.addListener</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getEditor</op>
                     <op code="call">javafx.scene.control.TextField.focusedProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyBooleanProperty.addListener</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/SortedSet;)V"
                       name="setValidBookmarkLevels"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/SortedSet">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getItems</op>
                     <op code="call">javafx.collections.ObservableList.clear</op>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="get">validationSupport</op>
                     <op code="call">org.pdfsam.support.validation.Validators.containedInteger</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.setValidator</op>
                     <op code="call">java.util.SortedSet.stream</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getItems</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="get">validationSupport</op>
                     <op code="call">org.pdfsam.support.validation.Validators.alwaysFalse</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.setValidator</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/support/FXValidationSupport$ValidationState;"
                       name="getValidationState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/support/FXValidationSupport$ValidationState</return>
                  <ops>
                     <op code="get">validationSupport</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validationStateProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.get</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/beans/property/ReadOnlyObjectProperty;"
                       name="validProperty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/beans/property/ReadOnlyObjectProperty</return>
                  <ops>
                     <op code="get">validationSupport</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validationStateProperty</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">validationSupport</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValue</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validate</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="resetView"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getItems</op>
                     <op code="call">javafx.collections.ObservableList.clear</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getEditor</op>
                     <op code="call">javafx.scene.control.TextField.clear</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/splitbybookmarks/SplitByOutlineLevelParametersBuilder;Ljava/util/function/Consumer;)V"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/splitbybookmarks/SplitByOutlineLevelParametersBuilder">?</arg>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.validate</op>
                     <op code="get">validationSupport</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validationStateProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.get</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValue</op>
                     <op code="call">java.lang.Integer.parseInt</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.level</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="saveStateTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getItems</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Collectors.joining</op>
                     <op code="call">java.util.stream.Stream.collect</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValue</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">java.util.Map.put</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.selectFirst</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getItems</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitByBookmarksModule$ModuleConfig"><!--Package: org.pdfsam.splitbybookmarks; name: org.pdfsam.splitbybookmarks.SplitByBookmarksModule$ModuleConfig; file: org.pdfsam.splitbybookmarks.SplitByBookmarksModule$ModuleConfig-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField;"
                       name="destinationDirectoryField"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField;Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/io/PdfDestinationPane;"
                       name="destinationPane"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField">?</arg>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/io/PdfDestinationPane</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.io.PdfDestinationPane$DestinationPanelFields.DISCARD_BOOKMARKS</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.enableSameAsSourceItem</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/module/RunButton;Lorg/pdfsam/ui/module/OpenButton;)Lorg/pdfsam/ui/module/Footer;"
                       name="footer"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/module/RunButton">?</arg>
                     <arg type="Lorg/pdfsam/ui/module/OpenButton">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/module/Footer</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.Footer.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/module/OpenButton;"
                       name="openButton"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/module/OpenButton</return>
                  <ops>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.MULTIPLE_PDF</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/prefix/PrefixPane;"
                       name="prefixPane"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/prefix/PrefixPane</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitOptionsPaneTest"><!--Package: org.pdfsam.splitbybookmarks; name: org.pdfsam.splitbybookmarks.SplitOptionsPaneTest; file: org.pdfsam.splitbybookmarks.SplitOptionsPaneTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clear</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/splitbybookmarks/SplitByOutlineLevelParametersBuilder">builder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">onError</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/SortedSet">validLevels</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/splitbybookmarks/SplitOptionsPane">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clear</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">java.util.TreeSet.&lt;init&gt;</op>
                     <op code="put">validLevels</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">builder</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">onError</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPane.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="applyLevel"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get">validLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPaneTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.DIGIT3</op>
                     <op code="call">org.testfx.api.FxRobotInterface.type</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.level</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.anyString</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.regexp</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="applyRegexp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get">validLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPaneTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.DIGIT3</op>
                     <op code="call">org.testfx.api.FxRobotInterface.type</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPaneTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.level</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.regexp</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="emptyLevel"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get">validLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.anyInt</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.level</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.anyString</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.regexp</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get">validLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPaneTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.DIGIT3</op>
                     <op code="call">org.testfx.api.FxRobotInterface.type</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPaneTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPane.saveStateTo</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveStateEmptyRegexp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPane.saveStateTo</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPane.restoreStateFrom</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryTextInputControl</op>
                     <op code="call">javafx.scene.control.TextInputControl.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getItems</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="reset"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get">validLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPaneTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.DIGIT3</op>
                     <op code="call">org.testfx.api.FxRobotInterface.type</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPaneTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get">victim</op>
                     <op code="get">validLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPane.setValidBookmarkLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPaneTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.DIGIT3</op>
                     <op code="call">org.testfx.api.FxRobotInterface.type</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getItems</op>
                     <op code="call">org.hamcrest.Matchers.hasItems</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryTextInputControl</op>
                     <op code="call">javafx.scene.control.TextInputControl.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getItems</op>
                     <op code="call">javafx.collections.ObservableList.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">javafx.scene.control.TextInputControl.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitByOutlineLevelParametersBuilderTest"><!--Package: org.pdfsam.splitbybookmarks; name: org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilderTest; file: org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilderTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="build"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.compress</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.output</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.existingOutput</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.level</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.regexp</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.prefix</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.sejda.model.input.PdfFileSource.newInstanceNoPassword</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.source</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.version</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.build</op>
                     <op code="call">org.sejda.model.parameter.SplitByOutlineLevelParameters.isCompress</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.sejda.model.parameter.SplitByOutlineLevelParameters.discardOutline</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.sejda.model.parameter.SplitByOutlineLevelParameters.getExistingOutputPolicy</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.sejda.model.parameter.SplitByOutlineLevelParameters.getVersion</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.SplitByOutlineLevelParameters.getLevelToSplitAt</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.SplitByOutlineLevelParameters.getMatchingTitleRegEx</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.SplitByOutlineLevelParameters.getOutputPrefix</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.SplitByOutlineLevelParameters.getOutput</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.SplitByOutlineLevelParameters.getSourceList</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BookmarksLevelComboBoxTest"><!--Package: org.pdfsam.splitbybookmarks; name: org.pdfsam.splitbybookmarks.BookmarksLevelComboBoxTest; file: org.pdfsam.splitbybookmarks.BookmarksLevelComboBoxTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clear</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/splitbybookmarks/SplitByOutlineLevelParametersBuilder">builder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">onError</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/SortedSet">validLevels</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/splitbybookmarks/BookmarksLevelComboBox">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clear</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">java.util.TreeSet.&lt;init&gt;</op>
                     <op code="put">validLevels</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">builder</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">onError</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validateOnChange"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">java.util.TreeSet.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                     <op code="get">victim</op>
                     <op code="get">validLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBoxTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ALT</op>
                     <op code="get_static">javafx.scene.input.KeyCode.DOWN</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidIntegerValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">validLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBoxTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.INVALID</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.INVALID</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validValueOnFocusLost"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">validLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBoxTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.TAB</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidValueOnFocusLost"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">validLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBoxTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.TAB</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.INVALID</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.INVALID</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidRangeValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">validLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBoxTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.INVALID</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.INVALID</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidNoMaxBookmarksSet"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBoxTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.DIGIT3</op>
                     <op code="call">org.testfx.api.FxRobotInterface.type</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.apply</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.INVALID</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.INVALID</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidApply"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="get">validLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBoxTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.anyInt</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.level</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validApply"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="get">validLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBoxTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.DIGIT3</op>
                     <op code="call">org.testfx.api.FxRobotInterface.type</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.eq</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.level</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">validLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBoxTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ALT</op>
                     <op code="get_static">javafx.scene.input.KeyCode.DOWN</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveStateEmptySelection"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">validLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">java.util.TreeSet.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getItems</op>
                     <op code="call">org.hamcrest.Matchers.hasItems</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="reset"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">validLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBoxTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.DIGIT3</op>
                     <op code="call">org.testfx.api.FxRobotInterface.type</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getItems</op>
                     <op code="call">org.hamcrest.Matchers.hasItems</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getItems</op>
                     <op code="call">javafx.collections.ObservableList.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreStateBackwardCompatible"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">java.util.TreeSet.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getItems</op>
                     <op code="call">org.hamcrest.Matchers.hasItems</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreStateEmptySelected"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">validLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreStateNullSelected"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">validLevels</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.setValidBookmarkLevels</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.splitbybookmarks.BookmarksLevelComboBox.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitByOutlineLevelParametersBuilder"><!--Package: org.pdfsam.splitbybookmarks; name: org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder; file: org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder-->
            <attributes>
               <attribute final="false" public="false" static="false" type="I">level</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">regexp</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.SplitParametersBuilder.&lt;init&gt;</op>
                     <op code="put">level</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)V"
                       name="level"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">level</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="regexp"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">regexp</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/parameter/SplitByOutlineLevelParameters;"
                       name="build"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/sejda/model/parameter/SplitByOutlineLevelParameters</return>
                  <ops>
                     <op code="get">level</op>
                     <op code="call">org.sejda.model.parameter.SplitByOutlineLevelParameters.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.isCompress</op>
                     <op code="call">org.sejda.model.parameter.SplitByOutlineLevelParameters.setCompress</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.existingOutput</op>
                     <op code="call">org.sejda.model.parameter.SplitByOutlineLevelParameters.setExistingOutputPolicy</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.getVersion</op>
                     <op code="call">org.sejda.model.parameter.SplitByOutlineLevelParameters.setVersion</op>
                     <op code="get">regexp</op>
                     <op code="call">org.sejda.model.parameter.SplitByOutlineLevelParameters.setMatchingTitleRegEx</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.getOutput</op>
                     <op code="call">org.sejda.model.parameter.SplitByOutlineLevelParameters.setOutput</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.getPrefix</op>
                     <op code="call">org.sejda.model.parameter.SplitByOutlineLevelParameters.setOutputPrefix</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.getSource</op>
                     <op code="call">org.sejda.model.parameter.SplitByOutlineLevelParameters.addSource</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.getOptimizationPolicy</op>
                     <op code="call">org.sejda.model.parameter.SplitByOutlineLevelParameters.setOptimizationPolicy</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByOutlineLevelParametersBuilder.isDiscardBookmarks</op>
                     <op code="call">org.sejda.model.parameter.SplitByOutlineLevelParameters.discardOutline</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.help">
         <class id="HelpPopup"><!--Package: org.pdfsam.ui.help; name: org.pdfsam.ui.help.HelpPopup; file: org.pdfsam.ui.help.HelpPopup-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/layout/Region">content</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.text.Text.&lt;init&gt;</op>
                     <op code="call">javafx.scene.text.TextFlow.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.help.HelpPopup.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljavafx/scene/layout/Region;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/scene/layout/Region">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.PopupControl.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.help.HelpPopup.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.setAll</op>
                     <op code="call">org.pdfsam.ui.help.HelpPopup.setAutoHide</op>
                     <op code="call">org.pdfsam.ui.help.HelpPopup.setHideOnEscape</op>
                     <op code="call">org.pdfsam.ui.help.HelpPopup.setAutoFix</op>
                     <op code="put">content</op>
                     <op code="get">content</op>
                     <op code="call">javafx.stage.Screen.getPrimary</op>
                     <op code="call">javafx.stage.Screen.getVisualBounds</op>
                     <op code="call">javafx.geometry.Rectangle2D.getWidth</op>
                     <op code="call">javafx.scene.layout.Region.setMaxWidth</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/Node;"
                       name="getPopupContent"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Ljavafx/scene/Node</return>
                  <ops>
                     <op code="get">content</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/control/Skin;"
                       name="createDefaultSkin"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>Ljavafx/scene/control/Skin</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.help.HelpPopupSkin.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="HelpPopupSkin"><!--Package: org.pdfsam.ui.help; name: org.pdfsam.ui.help.HelpPopupSkin; file: org.pdfsam.ui.help.HelpPopupSkin-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/help/HelpPopup">popup</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/help/HelpPopup;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/help/HelpPopup">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">popup</op>
                     <op code="call">org.pdfsam.ui.help.HelpPopupSkin.getNode</op>
                     <op code="call">javafx.scene.Node.styleProperty</op>
                     <op code="call">org.pdfsam.ui.help.HelpPopup.styleProperty</op>
                     <op code="call">javafx.beans.property.StringProperty.bind</op>
                     <op code="call">org.pdfsam.ui.help.HelpPopupSkin.getNode</op>
                     <op code="call">javafx.scene.Node.getStyleClass</op>
                     <op code="call">org.pdfsam.ui.help.HelpPopup.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/help/HelpPopup;"
                       name="getSkinnable"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/help/HelpPopup</return>
                  <ops>
                     <op code="get">popup</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/Node;"
                       name="getNode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/Node</return>
                  <ops>
                     <op code="get">popup</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.orElse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="dispose"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="put">popup</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="HelpUtils"><!--Package: org.pdfsam.ui.help; name: org.pdfsam.ui.help.HelpUtils; file: org.pdfsam.ui.help.HelpUtils-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Ljavafx/scene/text/Text;"
                       name="helpIcon"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljavafx/scene/text/Text</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.help.HelpPopup.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/scene/layout/Region;)Ljavafx/scene/text/Text;"
                       name="helpIcon"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/scene/layout/Region">?</arg>
                  </args>
                  <return>Ljavafx/scene/text/Text</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.help.HelpPopup.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/help/HelpPopup;)Ljavafx/scene/text/Text;"
                       name="helpIcon"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/ui/help/HelpPopup">?</arg>
                  </args>
                  <return>Ljavafx/scene/text/Text</return>
                  <ops>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.get</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.HELP_CIRCLE</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.createIcon</op>
                     <op code="call">javafx.scene.text.Text.setOnMouseEntered</op>
                     <op code="call">javafx.scene.text.Text.setOnMouseExited</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.task">
         <class id="BulkRotateParameters"><!--Package: org.pdfsam.task; name: org.pdfsam.task.BulkRotateParameters; file: org.pdfsam.task.BulkRotateParameters-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">outputPrefix</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/util/Set">inputSet</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/output/SingleOrMultipleTaskOutput">output</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.model.parameter.base.AbstractPdfOutputParameters.&lt;init&gt;</op>
                     <op code="put">outputPrefix</op>
                     <op code="call">java.util.HashSet.&lt;init&gt;</op>
                     <op code="put">inputSet</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/output/SingleOrMultipleTaskOutput;"
                       name="getOutput"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/sejda/model/output/SingleOrMultipleTaskOutput</return>
                  <ops>
                     <op code="get">output</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/output/SingleOrMultipleTaskOutput;)V"
                       name="setOutput"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/output/SingleOrMultipleTaskOutput">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">output</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Set;"
                       name="getInputSet"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/Set</return>
                  <ops>
                     <op code="get">inputSet</op>
                     <op code="call">java.util.Collections.unmodifiableSet</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/task/PdfRotationInput;)V"
                       name="addInput"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/task/PdfRotationInput">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">inputSet</op>
                     <op code="call">java.util.Set.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getOutputPrefix"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">outputPrefix</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="setOutputPrefix"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">outputPrefix</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="hashCode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.parameter.base.AbstractPdfOutputParameters.hashCode</op>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.appendSuper</op>
                     <op code="get">outputPrefix</op>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.append</op>
                     <op code="get">inputSet</op>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.append</op>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.toHashCode</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="equals"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.parameter.base.AbstractPdfOutputParameters.equals</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.appendSuper</op>
                     <op code="get">outputPrefix</op>
                     <op code="get">outputPrefix</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.append</op>
                     <op code="get">output</op>
                     <op code="get">output</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.append</op>
                     <op code="get">inputSet</op>
                     <op code="get">inputSet</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.append</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.isEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="TaskExecutionControllerTest"><!--Package: org.pdfsam.task; name: org.pdfsam.task.TaskExecutionControllerTest; file: org.pdfsam.task.TaskExecutionControllerTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeJavaFxThreadRule">javaFX</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/core/service/TaskExecutionService">executionService</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/UsageService">usageService</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/task/TaskExecutionController">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                     <op code="call">org.pdfsam.test.InitializeJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFX</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">executionService</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">usageService</op>
                     <op code="get">executionService</op>
                     <op code="get">usageService</op>
                     <op code="call">org.pdfsam.task.TaskExecutionController.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="tearDown"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.core.notification.context.GlobalNotificationContext.getContext</op>
                     <op code="call">org.sejda.core.notification.context.NotificationContext.clearListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="request"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.TaskExecutionController.request</op>
                     <op code="get">usageService</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.module.UsageService.incrementUsageFor</op>
                     <op code="get">executionService</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.sejda.core.service.TaskExecutionService.execute</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onEventTaskEventBroadcaster"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.TaskExecutionController.request</op>
                     <op code="get">victim</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">org.pdfsam.task.TaskExecutionController$TaskEventBroadcaster.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionStartedEvent.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.task.TaskExecutionController$TaskEventBroadcaster.onEvent</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="TaskExecutionController$TaskEventBroadcaster"><!--Package: org.pdfsam.task; name: org.pdfsam.task.TaskExecutionController$TaskEventBroadcaster; file: org.pdfsam.task.TaskExecutionController$TaskEventBroadcaster-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/task/TaskExecutionController">this$0</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/task/TaskExecutionController;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/task/TaskExecutionController">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">this$0</op>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/notification/event/AbstractNotificationEvent;)V"
                       name="onEvent"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/notification/event/AbstractNotificationEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.application.Platform.runLater</op>
                     <op code="get">this$0</op>
                     <op code="get">currentModule</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNoneBlank</op>
                     <op code="call">javafx.application.Platform.runLater</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfRotationInputTest"><!--Package: org.pdfsam.task; name: org.pdfsam.task.PdfRotationInputTest; file: org.pdfsam.task.PdfRotationInputTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullSource"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_180</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullRotation"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullPagesAllPages"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_180</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.getPages</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Set.contains</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Set.contains</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Set.contains</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="emptyPagesAllPages"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_180</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.getPages</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Set.contains</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Set.contains</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Set.contains</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="predefinedPageSet"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_180</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.EVEN_PAGES</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.getPages</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Set.contains</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="multiplePageRanges"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_180</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.getPages</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Set.contains</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Set.contains</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.util.Set.contains</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BulkRotateParametersTest"><!--Package: org.pdfsam.task; name: org.pdfsam.task.BulkRotateParametersTest; file: org.pdfsam.task.BulkRotateParametersTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testEquals"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_180</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_90</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.addInput</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.addInput</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.addInput</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.addInput</op>
                     <op code="call">org.pdfsam.TestUtils.testEqualsAndHashCodes</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="TaskExecutionServiceConfig"><!--Package: org.pdfsam.task; name: org.pdfsam.task.TaskExecutionServiceConfig; file: org.pdfsam.task.TaskExecutionServiceConfig-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/core/service/TaskExecutionService;"
                       name="executionService"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Lorg/sejda/core/service/TaskExecutionService</return>
                  <ops>
                     <op code="call">org.sejda.core.service.DefaultTaskExecutionService.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="TaskExecutionController"><!--Package: org.pdfsam.task; name: org.pdfsam.task.TaskExecutionController; file: org.pdfsam.task.TaskExecutionController-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/core/service/TaskExecutionService">executionService</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/UsageService">usageService</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/concurrent/ExecutorService">executor</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">currentModule</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/sejda/core/service/TaskExecutionService;Lorg/pdfsam/module/UsageService;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/core/service/TaskExecutionService">?</arg>
                     <arg type="Lorg/pdfsam/module/UsageService">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">java.util.concurrent.Executors.newSingleThreadExecutor</op>
                     <op code="put">executor</op>
                     <op code="put">currentModule</op>
                     <op code="put">executionService</op>
                     <op code="put">usageService</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                     <op code="call">org.sejda.core.notification.context.GlobalNotificationContext.getContext</op>
                     <op code="call">org.pdfsam.task.TaskExecutionController$TaskEventBroadcaster.&lt;init&gt;</op>
                     <op code="call">org.sejda.core.notification.context.NotificationContext.addListener</op>
                     <op code="call">org.sejda.core.notification.context.GlobalNotificationContext.getContext</op>
                     <op code="call">org.pdfsam.task.TaskExecutionController$TaskEventBroadcaster.&lt;init&gt;</op>
                     <op code="call">org.sejda.core.notification.context.NotificationContext.addListener</op>
                     <op code="call">org.sejda.core.notification.context.GlobalNotificationContext.getContext</op>
                     <op code="call">org.pdfsam.task.TaskExecutionController$TaskEventBroadcaster.&lt;init&gt;</op>
                     <op code="call">org.sejda.core.notification.context.NotificationContext.addListener</op>
                     <op code="call">org.sejda.core.notification.context.GlobalNotificationContext.getContext</op>
                     <op code="call">org.pdfsam.task.TaskExecutionController$TaskEventBroadcaster.&lt;init&gt;</op>
                     <op code="call">org.sejda.core.notification.context.NotificationContext.addListener</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/module/TaskExecutionRequestEvent;)V"
                       name="request"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/module/TaskExecutionRequestEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.task.TaskExecutionController.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="get">usageService</op>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.getModuleId</op>
                     <op code="call">org.pdfsam.module.UsageService.incrementUsageFor</op>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.getModuleId</op>
                     <op code="put">currentModule</op>
                     <op code="get">executor</op>
                     <op code="call">java.util.concurrent.ExecutorService.execute</op>
                     <op code="get_static">org.pdfsam.task.TaskExecutionController.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ShutdownEvent;)V"
                       name="onShutdown"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ShutdownEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">executor</op>
                     <op code="call">java.util.concurrent.ExecutorService.shutdownNow</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.task.TaskExecutionController.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfRotationInput"><!--Package: org.pdfsam.task; name: org.pdfsam.task.PdfRotationInput; file: org.pdfsam.task.PdfRotationInput-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Lorg/sejda/model/input/PdfSource">source</attribute>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Lorg/sejda/model/rotation/Rotation">rotation</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/util/Set">pageSelection</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/sejda/model/input/PdfSource;Lorg/sejda/model/rotation/Rotation;[Lorg/sejda/model/pdf/page/PagesSelection;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/input/PdfSource">?</arg>
                     <arg type="Lorg/sejda/model/rotation/Rotation">?</arg>
                     <arg type="Lorg/sejda/model/pdf/page/PagesSelection">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.collection.NullSafeSet.&lt;init&gt;</op>
                     <op code="put">pageSelection</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="put">source</op>
                     <op code="put">rotation</op>
                     <op code="get">pageSelection</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.filter</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.orElseGet</op>
                     <op code="call">java.util.Set.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)Ljava/util/Set;"
                       name="getPages"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>Ljava/util/Set</return>
                  <ops>
                     <op code="call">org.sejda.commons.collection.NullSafeSet.&lt;init&gt;</op>
                     <op code="get">pageSelection</op>
                     <op code="call">java.util.Set.iterator</op>
                     <op code="call">java.util.Iterator.hasNext</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="call">org.sejda.model.pdf.page.PagesSelection.getPages</op>
                     <op code="call">java.util.Set.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.builder.ToStringBuilder.&lt;init&gt;</op>
                     <op code="get">source</op>
                     <op code="call">org.apache.commons.lang3.builder.ToStringBuilder.append</op>
                     <op code="get">pageSelection</op>
                     <op code="call">org.apache.commons.lang3.builder.ToStringBuilder.append</op>
                     <op code="get">rotation</op>
                     <op code="call">org.apache.commons.lang3.builder.ToStringBuilder.append</op>
                     <op code="call">org.apache.commons.lang3.builder.ToStringBuilder.toString</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="hashCode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.&lt;init&gt;</op>
                     <op code="get">source</op>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.append</op>
                     <op code="get">pageSelection</op>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.append</op>
                     <op code="get">rotation</op>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.append</op>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.toHashCode</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="equals"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.&lt;init&gt;</op>
                     <op code="get">source</op>
                     <op code="get">source</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.append</op>
                     <op code="get">rotation</op>
                     <op code="get">rotation</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.append</op>
                     <op code="get">pageSelection</op>
                     <op code="get">pageSelection</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.append</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.isEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BulkRotateTaskTest"><!--Package: org.pdfsam.task; name: org.pdfsam.task.BulkRotateTaskTest; file: org.pdfsam.task.BulkRotateTaskTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/task/BulkRotateParameters">parameters</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.core.service.BaseTaskTest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/task/Task;"
                       name="getTask"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/sejda/model/task/Task</return>
                  <ops>
                     <op code="call">org.pdfsam.task.BulkRotateTask.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUpDefaultParameters"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.&lt;init&gt;</op>
                     <op code="put">parameters</op>
                     <op code="get">parameters</op>
                     <op code="call">org.pdfsam.task.BulkRotateTaskTest.shortInput</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_180</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.addInput</op>
                     <op code="get">parameters</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.setExistingOutputPolicy</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUpParametersWithVersionPrefixAndCompressionSpecified"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.&lt;init&gt;</op>
                     <op code="put">parameters</op>
                     <op code="get">parameters</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.setCompress</op>
                     <op code="get">parameters</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.setOutputPrefix</op>
                     <op code="get">parameters</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_6</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.setVersion</op>
                     <op code="get">parameters</op>
                     <op code="call">org.pdfsam.task.BulkRotateTaskTest.shortInput</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_180</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.addInput</op>
                     <op code="get">parameters</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.SKIP</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.setExistingOutputPolicy</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUpRotateSpecificPages"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.&lt;init&gt;</op>
                     <op code="put">parameters</op>
                     <op code="get">parameters</op>
                     <op code="call">org.pdfsam.task.BulkRotateTaskTest.shortInput</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_90</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.addInput</op>
                     <op code="get">parameters</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.setExistingOutputPolicy</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUpRotateMultipleInput"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.&lt;init&gt;</op>
                     <op code="put">parameters</op>
                     <op code="get">parameters</op>
                     <op code="call">org.pdfsam.task.BulkRotateTaskTest.shortInput</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_90</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.addInput</op>
                     <op code="get">parameters</op>
                     <op code="call">org.pdfsam.task.BulkRotateTaskTest.mediumInput</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_90</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.pdf.page.PageRange.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.addInput</op>
                     <op code="get">parameters</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.setExistingOutputPolicy</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUpParametersEncrypted"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.&lt;init&gt;</op>
                     <op code="put">parameters</op>
                     <op code="get">parameters</op>
                     <op code="call">org.pdfsam.task.BulkRotateTaskTest.stronglyEncryptedInput</op>
                     <op code="get_static">org.sejda.model.rotation.Rotation.DEGREES_180</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.addInput</op>
                     <op code="get">parameters</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.setExistingOutputPolicy</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testExecute"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.task.BulkRotateTaskTest.setUpDefaultParameters</op>
                     <op code="get">testContext</op>
                     <op code="get">parameters</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.directoryOutputTo</op>
                     <op code="get">parameters</op>
                     <op code="call">org.pdfsam.task.BulkRotateTaskTest.execute</op>
                     <op code="get">testContext</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.assertTaskCompleted</op>
                     <op code="get">testContext</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.assertCreator</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.assertPages</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.forEachPdfOutput</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testRotateSpecificPages"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.task.BulkRotateTaskTest.setUpRotateSpecificPages</op>
                     <op code="get">testContext</op>
                     <op code="get">parameters</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.directoryOutputTo</op>
                     <op code="get">parameters</op>
                     <op code="call">org.pdfsam.task.BulkRotateTaskTest.execute</op>
                     <op code="get">testContext</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.assertTaskCompleted</op>
                     <op code="get">testContext</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.assertCreator</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.assertPages</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.forEachPdfOutput</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testExecuteEncrypted"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.task.BulkRotateTaskTest.setUpParametersEncrypted</op>
                     <op code="get">testContext</op>
                     <op code="get">parameters</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.directoryOutputTo</op>
                     <op code="get">parameters</op>
                     <op code="call">org.pdfsam.task.BulkRotateTaskTest.execute</op>
                     <op code="get">testContext</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.assertTaskCompleted</op>
                     <op code="get">testContext</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.assertCreator</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.assertPages</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.forEachPdfOutput</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testVersionPrefixAndCreatorAreApplied"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.task.BulkRotateTaskTest.setUpParametersWithVersionPrefixAndCompressionSpecified</op>
                     <op code="get">testContext</op>
                     <op code="get">parameters</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.directoryOutputTo</op>
                     <op code="get">parameters</op>
                     <op code="call">org.pdfsam.task.BulkRotateTaskTest.execute</op>
                     <op code="get">testContext</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.assertTaskCompleted</op>
                     <op code="get">testContext</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.assertCreator</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.assertPages</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_6</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.assertVersion</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testMultipleInputOneDoesntContainRange"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.task.BulkRotateTaskTest.setUpRotateMultipleInput</op>
                     <op code="get">testContext</op>
                     <op code="get">parameters</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.directoryOutputTo</op>
                     <op code="get">parameters</op>
                     <op code="call">org.pdfsam.task.BulkRotateTaskTest.execute</op>
                     <op code="get">testContext</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.assertTaskCompleted</op>
                     <op code="get">testContext</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.assertOutputSize</op>
                     <op code="call">org.sejda.core.service.TaskTestContext.forEachPdfOutput</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BulkRotateTask"><!--Package: org.pdfsam.task; name: org.pdfsam.task.BulkRotateTask; file: org.pdfsam.task.BulkRotateTask-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false" public="false" static="false" type="I">totalSteps</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/impl/sambox/component/PDDocumentHandler">documentHandler</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/core/support/io/MultipleOutputWriter">outputWriter</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/input/PdfSourceOpener">documentLoader</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.model.task.BaseTask.&lt;init&gt;</op>
                     <op code="put">documentHandler</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/task/BulkRotateParameters;Lorg/sejda/model/task/TaskExecutionContext;)V"
                       name="before"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/task/BulkRotateParameters">?</arg>
                     <arg type="Lorg/sejda/model/task/TaskExecutionContext">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.model.task.BaseTask.before</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.getInputSet</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="put">totalSteps</op>
                     <op code="call">org.sejda.impl.sambox.component.DefaultPdfSourceOpener.&lt;init&gt;</op>
                     <op code="put">documentLoader</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.getExistingOutputPolicy</op>
                     <op code="call">org.sejda.core.support.io.OutputWriters.newMultipleOutputWriter</op>
                     <op code="put">outputWriter</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/task/BulkRotateParameters;)V"
                       name="execute"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/task/BulkRotateParameters">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.getInputSet</op>
                     <op code="call">java.util.Set.iterator</op>
                     <op code="call">java.util.Iterator.hasNext</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="call">org.pdfsam.task.BulkRotateTask.executionContext</op>
                     <op code="call">org.sejda.model.task.TaskExecutionContext.assertTaskNotCancelled</op>
                     <op code="get_static">org.pdfsam.task.BulkRotateTask.LOG</op>
                     <op code="get">source</op>
                     <op code="call">org.slf4j.Logger.debug</op>
                     <op code="get">source</op>
                     <op code="get">documentLoader</op>
                     <op code="call">org.sejda.model.input.PdfSource.open</op>
                     <op code="put">documentHandler</op>
                     <op code="get">documentHandler</op>
                     <op code="call">org.sejda.impl.sambox.component.PDDocumentHandler.getPermissions</op>
                     <op code="get_static">org.sejda.model.pdf.encryption.PdfAccessPermission.ASSEMBLE</op>
                     <op code="call">org.sejda.impl.sambox.component.PDDocumentAccessPermission.ensurePermission</op>
                     <op code="get">documentHandler</op>
                     <op code="call">org.sejda.impl.sambox.component.PDDocumentHandler.setCreatorOnPDDocument</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.getOutput</op>
                     <op code="call">org.sejda.core.support.io.IOUtils.createTemporaryBuffer</op>
                     <op code="get_static">org.pdfsam.task.BulkRotateTask.LOG</op>
                     <op code="call">org.slf4j.Logger.debug</op>
                     <op code="get">documentHandler</op>
                     <op code="call">org.sejda.impl.sambox.component.PDDocumentHandler.getUnderlyingPDDocument</op>
                     <op code="call">org.sejda.impl.sambox.component.PdfRotator.&lt;init&gt;</op>
                     <op code="get">documentHandler</op>
                     <op code="call">org.sejda.impl.sambox.component.PDDocumentHandler.getNumberOfPages</op>
                     <op code="call">org.pdfsam.task.PdfRotationInput.getPages</op>
                     <op code="call">java.util.Set.iterator</op>
                     <op code="call">java.util.Iterator.hasNext</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="call">org.pdfsam.task.BulkRotateTask.executionContext</op>
                     <op code="call">org.sejda.model.task.TaskExecutionContext.assertTaskNotCancelled</op>
                     <op code="call">java.lang.Integer.intValue</op>
                     <op code="get">rotation</op>
                     <op code="call">org.sejda.impl.sambox.component.PdfRotator.rotate</op>
                     <op code="get">documentHandler</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.getVersion</op>
                     <op code="call">org.sejda.impl.sambox.component.PDDocumentHandler.setVersionOnPDDocument</op>
                     <op code="get">documentHandler</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.isCompress</op>
                     <op code="call">org.sejda.impl.sambox.component.PDDocumentHandler.setCompress</op>
                     <op code="get">documentHandler</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.getOutput</op>
                     <op code="call">org.sejda.model.output.SingleOrMultipleTaskOutput.getEncryptionAtRestPolicy</op>
                     <op code="call">org.sejda.impl.sambox.component.PDDocumentHandler.savePDDocument</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.getOutputPrefix</op>
                     <op code="call">org.sejda.core.support.prefix.NameGenerator.nameGenerator</op>
                     <op code="call">org.sejda.core.support.prefix.model.NameGenerationRequest.nameRequest</op>
                     <op code="get">source</op>
                     <op code="call">org.sejda.model.input.PdfSource.getName</op>
                     <op code="call">org.sejda.core.support.prefix.model.NameGenerationRequest.originalName</op>
                     <op code="call">org.sejda.core.support.prefix.model.NameGenerationRequest.fileNumber</op>
                     <op code="call">org.sejda.core.support.prefix.NameGenerator.generate</op>
                     <op code="get">outputWriter</op>
                     <op code="call">org.sejda.core.support.io.model.FileOutput.file</op>
                     <op code="call">org.sejda.core.support.io.model.OngoingFileOuputCreation.name</op>
                     <op code="call">org.sejda.core.support.io.MultipleOutputWriter.addOutput</op>
                     <op code="get">documentHandler</op>
                     <op code="call">org.sejda.commons.util.IOUtils.closeQuietly</op>
                     <op code="get">documentHandler</op>
                     <op code="call">org.sejda.commons.util.IOUtils.closeQuietly</op>
                     <op code="call">org.pdfsam.task.BulkRotateTask.executionContext</op>
                     <op code="call">org.sejda.model.task.TaskExecutionContext.notifiableTaskMetadata</op>
                     <op code="call">org.sejda.core.notification.dsl.ApplicationEventsNotifier.notifyEvent</op>
                     <op code="call">org.sejda.core.notification.dsl.Notifier.stepsCompleted</op>
                     <op code="get">totalSteps</op>
                     <op code="call">org.sejda.core.notification.dsl.OngoingNotification.outOf</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.getOutput</op>
                     <op code="get">outputWriter</op>
                     <op code="call">org.sejda.model.output.SingleOrMultipleTaskOutput.accept</op>
                     <op code="get_static">org.pdfsam.task.BulkRotateTask.LOG</op>
                     <op code="call">org.pdfsam.task.BulkRotateParameters.getOutput</op>
                     <op code="call">org.slf4j.Logger.debug</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="after"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">documentHandler</op>
                     <op code="call">org.sejda.commons.util.IOUtils.closeQuietly</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.task.BulkRotateTask.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.support.io">
         <class id="NetUtils"><!--Package: org.pdfsam.support.io; name: org.pdfsam.support.io.NetUtils; file: org.pdfsam.support.io.NetUtils-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/net/URL;)Ljava/io/InputStream;"
                       name="urlToStream"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/net/URL">?</arg>
                  </args>
                  <return>Ljava/io/InputStream</return>
                  <ops>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.net.URL.toExternalForm</op>
                     <op code="call">java.util.Map.compute</op>
                     <op code="call">java.lang.Integer.intValue</op>
                     <op code="call">java.io.IOException.&lt;init&gt;</op>
                     <op code="call">java.net.URL.openConnection</op>
                     <op code="call">java.net.HttpURLConnection.setConnectTimeout</op>
                     <op code="call">java.net.HttpURLConnection.setReadTimeout</op>
                     <op code="call">java.net.HttpURLConnection.setInstanceFollowRedirects</op>
                     <op code="call">java.net.HttpURLConnection.setRequestProperty</op>
                     <op code="call">java.net.HttpURLConnection.getResponseCode</op>
                     <op code="call">java.net.HttpURLConnection.getHeaderField</op>
                     <op code="call">java.net.URLDecoder.decode</op>
                     <op code="call">java.net.URL.&lt;init&gt;</op>
                     <op code="call">java.net.HttpURLConnection.disconnect</op>
                     <op code="call">java.net.URL.openStream</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ObjectCollectionWriter"><!--Package: org.pdfsam.support.io; name: org.pdfsam.support.io.ObjectCollectionWriter; file: org.pdfsam.support.io.ObjectCollectionWriter-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Ljava/lang/String">SEPARATOR</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Collection">content</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/Collection;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/Collection">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">content</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Collection;)Lorg/pdfsam/support/io/OngoingWrite;"
                       name="writeContent"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Collection">?</arg>
                  </args>
                  <return>Lorg/pdfsam/support/io/OngoingWrite</return>
                  <ops>
                     <op code="call">org.pdfsam.support.io.ObjectCollectionWriter.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/File;)V"
                       name="to"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.io.File.toPath</op>
                     <op code="call">java.nio.file.Files.newBufferedWriter</op>
                     <op code="get">content</op>
                     <op code="call">java.util.Collection.iterator</op>
                     <op code="call">java.util.Iterator.hasNext</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="call">java.lang.Object.toString</op>
                     <op code="call">org.pdfsam.support.io.ObjectCollectionWriter.defaultLineSeparator</op>
                     <op code="call">java.io.BufferedWriter.append</op>
                     <op code="call">java.io.BufferedWriter.close</op>
                     <op code="call">java.io.BufferedWriter.close</op>
                     <op code="call">java.lang.Throwable.addSuppressed</op>
                     <op code="get_static">org.pdfsam.support.io.ObjectCollectionWriter.LOG</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.slf4j.Logger.error</op>
                     <op code="get_static">org.pdfsam.support.io.ObjectCollectionWriter.LOG</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.slf4j.Logger.info</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/scene/input/ClipboardContent;)V"
                       name="to"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/scene/input/ClipboardContent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.io.StringWriter.&lt;init&gt;</op>
                     <op code="get">content</op>
                     <op code="call">java.util.Collection.iterator</op>
                     <op code="call">java.util.Iterator.hasNext</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="call">java.lang.Object.toString</op>
                     <op code="call">org.pdfsam.support.io.ObjectCollectionWriter.defaultLineSeparator</op>
                     <op code="call">java.io.StringWriter.append</op>
                     <op code="call">java.io.StringWriter.toString</op>
                     <op code="call">javafx.scene.input.ClipboardContent.putString</op>
                     <op code="call">java.io.StringWriter.close</op>
                     <op code="call">java.io.StringWriter.close</op>
                     <op code="call">java.lang.Throwable.addSuppressed</op>
                     <op code="get_static">org.pdfsam.support.io.ObjectCollectionWriter.LOG</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.slf4j.Logger.error</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Ljava/lang/String;"
                       name="defaultLineSeparator"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.StringUtils.trimToEmpty</op>
                     <op code="get_static">org.pdfsam.support.io.ObjectCollectionWriter.SEPARATOR</op>
                     <op code="call">java.lang.String.concat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.System.getProperty</op>
                     <op code="put_static">org.pdfsam.support.io.ObjectCollectionWriter.SEPARATOR</op>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.support.io.ObjectCollectionWriter.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ObjectCollectionWriterTest"><!--Package: org.pdfsam.support.io; name: org.pdfsam.support.io.ObjectCollectionWriterTest; file: org.pdfsam.support.io.ObjectCollectionWriterTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">temp</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">temp</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clipboard"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="call">java.util.List.add</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.support.io.ObjectCollectionWriter.writeContent</op>
                     <op code="call">org.pdfsam.support.io.OngoingWrite.to</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.pdfsam.support.io.ObjectCollectionWriter.SEPARATOR</op>
                     <op code="call">javafx.scene.input.ClipboardContent.putString</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="file"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="call">java.util.List.add</op>
                     <op code="get">temp</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.support.io.ObjectCollectionWriter.writeContent</op>
                     <op code="call">org.pdfsam.support.io.OngoingWrite.to</op>
                     <op code="call">java.nio.charset.Charset.defaultCharset</op>
                     <op code="call">org.apache.commons.io.FileUtils.readFileToString</op>
                     <op code="call">java.lang.String.contains</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.selection">
         <class id="ToolbarButton"><!--Package: org.pdfsam.ui.selection; name: org.pdfsam.ui.selection.ToolbarButton; file: org.pdfsam.ui.selection.ToolbarButton-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.ModuleOwnedButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.ToolbarButton.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.TOOLBAR_BUTTON</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ShowPasswordFieldPopupRequestTest"><!--Package: org.pdfsam.ui.selection; name: org.pdfsam.ui.selection.ShowPasswordFieldPopupRequestTest; file: org.pdfsam.ui.selection.ShowPasswordFieldPopupRequestTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullDescriptor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.Region.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.ShowPasswordFieldPopupRequest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullRegion"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.selection.ShowPasswordFieldPopupRequest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullBoth"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.ShowPasswordFieldPopupRequest.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PasswordFieldPopup$PasswordFieldPopupContent"><!--Package: org.pdfsam.ui.selection; name: org.pdfsam.ui.selection.PasswordFieldPopup$PasswordFieldPopupContent; file: org.pdfsam.ui.selection.PasswordFieldPopup$PasswordFieldPopupContent-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/PasswordField">passwordField</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/PasswordFieldPopup">this$0</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/selection/PasswordFieldPopup;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/selection/PasswordFieldPopup">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">this$0</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.PasswordField.&lt;init&gt;</op>
                     <op code="put">passwordField</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopup$PasswordFieldPopupContent.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.setAll</op>
                     <op code="get">passwordField</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.PasswordField.setPromptText</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory.get</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.UNLOCK</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory.createIconButton</op>
                     <op code="call">javafx.scene.control.Button.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.BUTTON</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.control.Button.prefHeightProperty</op>
                     <op code="get">passwordField</op>
                     <op code="call">javafx.scene.control.PasswordField.heightProperty</op>
                     <op code="call">javafx.beans.property.DoubleProperty.bind</op>
                     <op code="call">javafx.scene.control.Button.setMaxHeight</op>
                     <op code="call">javafx.scene.control.Button.setMinHeight</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="get">passwordField</op>
                     <op code="call">javafx.scene.control.PasswordField.setOnAction</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopup$PasswordFieldPopupContent.getChildren</op>
                     <op code="get">passwordField</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="requestLoad"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">this$0</op>
                     <op code="get">pdfDescriptor</op>
                     <op code="get">this$0</op>
                     <op code="get">pdfDescriptor</op>
                     <op code="get">passwordField</op>
                     <op code="call">javafx.scene.control.PasswordField.getText</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.setPassword</op>
                     <op code="get">this$0</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopup.getOwnerModule</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.&lt;init&gt;</op>
                     <op code="get">this$0</op>
                     <op code="get">pdfDescriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.add</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get">passwordField</op>
                     <op code="call">javafx.scene.control.PasswordField.clear</op>
                     <op code="get">this$0</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopup.hide</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PasswordFieldPopup"><!--Package: org.pdfsam.ui.selection; name: org.pdfsam.ui.selection.PasswordFieldPopup; file: org.pdfsam.ui.selection.PasswordFieldPopup-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">ownerModule</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/PasswordFieldPopup$PasswordFieldPopupContent">content</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">pdfDescriptor</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.PopupControl.&lt;init&gt;</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopup$PasswordFieldPopupContent.&lt;init&gt;</op>
                     <op code="put">content</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopup.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.setAll</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopup.setAutoHide</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopup.setHideOnEscape</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopup.setAutoFix</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getOwnerModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">ownerModule</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/selection/PasswordFieldPopup$PasswordFieldPopupContent;"
                       name="getPopupContent"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Lorg/pdfsam/ui/selection/PasswordFieldPopup$PasswordFieldPopupContent</return>
                  <ops>
                     <op code="get">content</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/control/Skin;"
                       name="createDefaultSkin"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>Ljavafx/scene/control/Skin</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopupSkin.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/scene/Node;Lorg/pdfsam/pdf/PdfDocumentDescriptor;DD)V"
                       name="showFor"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/scene/Node">?</arg>
                     <arg type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">?</arg>
                     <arg type="D">?</arg>
                     <arg type="D">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">pdfDescriptor</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopup.show</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PasswordFieldPopupTest"><!--Package: org.pdfsam.ui.selection; name: org.pdfsam.ui.selection.PasswordFieldPopupTest; file: org.pdfsam.ui.selection.PasswordFieldPopupTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">pdfDescriptor</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">pdfDescriptor</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopup.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopup.setId</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="pwdSentOnEnterKey"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopupTest.clickOn</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopupTest.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobot.type</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">pdfDescriptor</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.setPassword</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="pwdSentOnButtonPressed"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopupTest.clickOn</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopupTest.write</op>
                     <op code="call">org.testfx.api.FxRobot.clickOn</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">pdfDescriptor</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.setPassword</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LoadingStatusIndicatorUpdater"><!--Package: org.pdfsam.ui.selection; name: org.pdfsam.ui.selection.LoadingStatusIndicatorUpdater; file: org.pdfsam.ui.selection.LoadingStatusIndicatorUpdater-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Labeled">indicator</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljavafx/scene/control/Labeled;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/scene/control/Labeled">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">indicator</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/pdf/PdfDescriptorLoadingStatus;)V"
                       name="accept"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/pdf/PdfDescriptorLoadingStatus">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory.get</op>
                     <op code="get">indicator</op>
                     <op code="get_static">javafx.scene.control.ContentDisplay.CENTER</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory.setIcon</op>
                     <op code="get">indicator</op>
                     <op code="call">javafx.scene.control.Labeled.setGraphic</op>
                     <op code="call">org.pdfsam.pdf.PdfDescriptorLoadingStatus.getDescription</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotBlank</op>
                     <op code="get">indicator</op>
                     <op code="call">org.pdfsam.pdf.PdfDescriptorLoadingStatus.getDescription</op>
                     <op code="call">javafx.scene.control.Tooltip.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Labeled.setTooltip</op>
                     <op code="get">indicator</op>
                     <op code="call">javafx.scene.control.Labeled.setTooltip</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ShowPasswordFieldPopupRequest"><!--Package: org.pdfsam.ui.selection; name: org.pdfsam.ui.selection.ShowPasswordFieldPopupRequest; file: org.pdfsam.ui.selection.ShowPasswordFieldPopupRequest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">pdfDescriptor</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/layout/Region">requestingNode</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/pdf/PdfDocumentDescriptor;Ljavafx/scene/layout/Region;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">?</arg>
                     <arg type="Ljavafx/scene/layout/Region">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">pdfDescriptor</op>
                     <op code="put">requestingNode</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/pdf/PdfDocumentDescriptor;"
                       name="getPdfDescriptor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/pdf/PdfDocumentDescriptor</return>
                  <ops>
                     <op code="get">pdfDescriptor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/Region;"
                       name="getRequestingNode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/layout/Region</return>
                  <ops>
                     <op code="get">requestingNode</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PasswordFieldPopupSkin"><!--Package: org.pdfsam.ui.selection; name: org.pdfsam.ui.selection.PasswordFieldPopupSkin; file: org.pdfsam.ui.selection.PasswordFieldPopupSkin-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/PasswordFieldPopup">popup</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/selection/PasswordFieldPopup;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/selection/PasswordFieldPopup">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">popup</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopupSkin.getNode</op>
                     <op code="call">javafx.scene.Node.styleProperty</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopup.styleProperty</op>
                     <op code="call">javafx.beans.property.StringProperty.bind</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopupSkin.getNode</op>
                     <op code="call">javafx.scene.Node.getStyleClass</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopup.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/selection/PasswordFieldPopup;"
                       name="getSkinnable"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/selection/PasswordFieldPopup</return>
                  <ops>
                     <op code="get">popup</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/Node;"
                       name="getNode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/Node</return>
                  <ops>
                     <op code="get">popup</op>
                     <op code="get">popup</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopup.getPopupContent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="dispose"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="put">popup</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LoadingStatusIndicatorUpdaterTest"><!--Package: org.pdfsam.ui.selection; name: org.pdfsam.ui.selection.LoadingStatusIndicatorUpdaterTest; file: org.pdfsam.ui.selection.LoadingStatusIndicatorUpdaterTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">javaFxThread</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">labeled</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/LoadingStatusIndicatorUpdater">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="put">labeled</op>
                     <op code="get">labeled</op>
                     <op code="call">org.pdfsam.ui.selection.LoadingStatusIndicatorUpdater.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">labeled</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="textAndTooltip"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.ENCRYPTED</op>
                     <op code="call">org.pdfsam.ui.selection.LoadingStatusIndicatorUpdater.accept</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.ENCRYPTED</op>
                     <op code="call">org.pdfsam.pdf.PdfDescriptorLoadingStatus.getIcon</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.unicode</op>
                     <op code="get">labeled</op>
                     <op code="call">javafx.scene.control.Label.getGraphic</op>
                     <op code="call">javafx.scene.text.Text.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">labeled</op>
                     <op code="call">javafx.scene.control.Label.getTooltip</op>
                     <op code="call">org.junit.Assert.assertNotNull</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="textAndNoTooltip"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.LOADING</op>
                     <op code="call">org.pdfsam.ui.selection.LoadingStatusIndicatorUpdater.accept</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.LOADING</op>
                     <op code="call">org.pdfsam.pdf.PdfDescriptorLoadingStatus.getIcon</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.unicode</op>
                     <op code="get">labeled</op>
                     <op code="call">javafx.scene.control.Label.getGraphic</op>
                     <op code="call">javafx.scene.text.Text.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">labeled</op>
                     <op code="call">javafx.scene.control.Label.getTooltip</op>
                     <op code="call">org.junit.Assert.assertNull</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullSafe"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.LoadingStatusIndicatorUpdater.accept</op>
                     <op code="get">labeled</op>
                     <op code="call">javafx.scene.control.Label.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">labeled</op>
                     <op code="call">javafx.scene.control.Label.getTooltip</op>
                     <op code="call">org.junit.Assert.assertNull</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.LoadingStatusIndicatorUpdater.accept</op>
                     <op code="get">labeled</op>
                     <op code="call">javafx.scene.control.Label.getGraphic</op>
                     <op code="call">org.junit.Assert.assertNull</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullIcon"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.INITIAL</op>
                     <op code="call">org.pdfsam.ui.selection.LoadingStatusIndicatorUpdater.accept</op>
                     <op code="get">labeled</op>
                     <op code="call">javafx.scene.control.Label.getGraphic</op>
                     <op code="call">org.junit.Assert.assertNull</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="notNullIcon"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.REQUESTED</op>
                     <op code="call">org.pdfsam.ui.selection.LoadingStatusIndicatorUpdater.accept</op>
                     <op code="get">labeled</op>
                     <op code="call">javafx.scene.control.Label.getGraphic</op>
                     <op code="call">org.junit.Assert.assertNotNull</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.news">
         <class id="News"><!--Package: org.pdfsam.ui.news; name: org.pdfsam.ui.news.News; file: org.pdfsam.ui.news.News-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/time/format/DateTimeFormatter">FORMATTER</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/news/NewsData;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/news/NewsData">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.news.News.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.text.TextFlow.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.news.NewsData.isImportant</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory.get</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.BULLHORN</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory.createIcon</op>
                     <op code="call">javafx.scene.text.Text.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.clear</op>
                     <op code="call">javafx.scene.text.Text.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.text.TextFlow.getChildren</op>
                     <op code="call">javafx.scene.text.Text.&lt;init&gt;</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.news.NewsData.getTitle</op>
                     <op code="call">java.lang.System.lineSeparator</op>
                     <op code="call">javafx.scene.text.Text.&lt;init&gt;</op>
                     <op code="call">javafx.scene.text.Text.setOnMouseClicked</op>
                     <op code="call">javafx.scene.text.Text.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.news.NewsData.getContent</op>
                     <op code="call">javafx.scene.text.Text.&lt;init&gt;</op>
                     <op code="get_static">javafx.scene.text.TextAlignment.JUSTIFY</op>
                     <op code="call">javafx.scene.text.Text.setTextAlignment</op>
                     <op code="call">javafx.scene.text.Text.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.text.TextFlow.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get_static">javafx.scene.text.TextAlignment.JUSTIFY</op>
                     <op code="call">javafx.scene.text.TextFlow.setTextAlignment</op>
                     <op code="get_static">org.pdfsam.ui.news.News.FORMATTER</op>
                     <op code="call">org.pdfsam.news.NewsData.getDate</op>
                     <op code="call">java.time.format.DateTimeFormatter.format</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.get</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.CLOCK</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.createIcon</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Label.setPrefWidth</op>
                     <op code="get_static">javafx.scene.layout.Priority.ALWAYS</op>
                     <op code="call">javafx.scene.layout.HBox.setHgrow</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="get_static">javafx.geometry.Pos.CENTER_LEFT</op>
                     <op code="call">javafx.scene.layout.HBox.setAlignment</op>
                     <op code="call">javafx.scene.layout.HBox.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.news.NewsData.getLink</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotBlank</op>
                     <op code="call">org.pdfsam.news.NewsData.getLink</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.EXTERNAL_LINK_SQUARE</op>
                     <op code="call">org.pdfsam.ui.commons.UrlButton.urlButton</op>
                     <op code="call">javafx.scene.layout.HBox.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.ui.news.News.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">java.time.format.FormatStyle.MEDIUM</op>
                     <op code="call">java.time.format.DateTimeFormatter.ofLocalizedDate</op>
                     <op code="put_static">org.pdfsam.ui.news.News.FORMATTER</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="NewsPanel"><!--Package: org.pdfsam.ui.news; name: org.pdfsam.ui.news.NewsPanel; file: org.pdfsam.ui.news.NewsPanel-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/layout/VBox">newsPanel</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/ScrollPane">scroll</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="put">newsPanel</op>
                     <op code="get">newsPanel</op>
                     <op code="call">javafx.scene.control.ScrollPane.&lt;init&gt;</op>
                     <op code="put">scroll</op>
                     <op code="call">org.pdfsam.ui.news.NewsPanel.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.ui.news.NewsPanel.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory.get</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.TIMES</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory.createIconButton</op>
                     <op code="call">javafx.scene.control.Button.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Label.setPrefWidth</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.layout.StackPane.&lt;init&gt;</op>
                     <op code="get_static">javafx.geometry.Pos.TOP_RIGHT</op>
                     <op code="call">javafx.scene.layout.StackPane.setAlignment</op>
                     <op code="get">scroll</op>
                     <op code="call">javafx.scene.control.ScrollPane.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">scroll</op>
                     <op code="get_static">javafx.scene.control.ScrollPane$ScrollBarPolicy.NEVER</op>
                     <op code="call">javafx.scene.control.ScrollPane.setHbarPolicy</op>
                     <op code="get">scroll</op>
                     <op code="call">javafx.scene.control.ScrollPane.setFitToHeight</op>
                     <op code="get">scroll</op>
                     <op code="call">javafx.scene.control.ScrollPane.setFitToWidth</op>
                     <op code="call">org.pdfsam.ui.news.NewsPanel.getChildren</op>
                     <op code="get">scroll</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/news/LatestNewsEvent;)V"
                       name="onLatestNews"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/news/LatestNewsEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.application.Platform.runLater</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.workarea">
         <class id="WorkAreaTest$Config"><!--Package: org.pdfsam.ui.workarea; name: org.pdfsam.ui.workarea.WorkAreaTest$Config; file: org.pdfsam.ui.workarea.WorkAreaTest$Config-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/Module;"
                       name="module"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/Module</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.workarea.WorkAreaTest$TestModule.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/UsageService;"
                       name="service"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/UsageService</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/module/UsageService;Ljava/util/List;)Lorg/pdfsam/ui/workarea/QuickbarModuleButtonsProvider;"
                       name="provider"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/module/UsageService">?</arg>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/workarea/QuickbarModuleButtonsProvider</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.workarea.QuickbarModuleButtonsProvider.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/workarea/QuickbarModuleButtonsProvider;)Lorg/pdfsam/ui/workarea/QuickbarModuleButtonsPane;"
                       name="buttons"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/workarea/QuickbarModuleButtonsProvider">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/workarea/QuickbarModuleButtonsPane</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.workarea.QuickbarModuleButtonsPane.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/List;Lorg/pdfsam/ui/workarea/QuickbarModuleButtonsPane;)Lorg/pdfsam/ui/workarea/WorkArea;"
                       name="victim"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                     <arg type="Lorg/pdfsam/ui/workarea/QuickbarModuleButtonsPane">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/workarea/WorkArea</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.workarea.WorkArea.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="WorkAreaTest"><!--Package: org.pdfsam.ui.workarea; name: org.pdfsam.ui.workarea.WorkAreaTest; file: org.pdfsam.ui.workarea.WorkAreaTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">javaFxThread</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/injector/Injector">injector</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.workarea.WorkAreaTest$Config.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.start</op>
                     <op code="put">injector</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="wrongModuleDoesntBoom"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.activeteModule</op>
                     <op code="call">org.pdfsam.ui.workarea.WorkArea.onSetActiveModule</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="eventTitleIsSent"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.workarea.WorkArea.getCenter</op>
                     <op code="call">javafx.scene.control.ScrollPane.getContent</op>
                     <op code="call">org.junit.Assert.assertNull</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.activeteModule</op>
                     <op code="call">org.pdfsam.ui.workarea.WorkArea.onSetActiveModule</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.workarea.WorkAreaTest$TestModule.descriptor</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.getName</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.event.SetTitleEvent.getTitle</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.ui.workarea.WorkArea.getCenter</op>
                     <op code="call">javafx.scene.control.ScrollPane.getContent</op>
                     <op code="call">org.junit.Assert.assertNotNull</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="emptyEventTitleIsSent"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.activeteCurrentModule</op>
                     <op code="call">org.pdfsam.ui.workarea.WorkArea.onSetActiveModule</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.event.SetTitleEvent.getTitle</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isBlank</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="previousEventTitleIsSent"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.activeteModule</op>
                     <op code="call">org.pdfsam.ui.workarea.WorkArea.onSetActiveModule</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.clear</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.activeteCurrentModule</op>
                     <op code="call">org.pdfsam.ui.workarea.WorkArea.onSetActiveModule</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.workarea.WorkAreaTest$TestModule.descriptor</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.getName</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.event.SetTitleEvent.getTitle</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="QuickbarModuleButtonsProviderTest"><!--Package: org.pdfsam.ui.workarea; name: org.pdfsam.ui.workarea.QuickbarModuleButtonsProviderTest; file: org.pdfsam.ui.workarea.QuickbarModuleButtonsProviderTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">javaFxThread</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/test/LowPriorityTestModule">lowPrio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/test/DefaultPriorityTestModule">defaultPrio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/test/HighPriorityTestModule">highPrio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/List">modules</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/UsageService">service</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/workarea/QuickbarModuleButtonsProvider">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                     <op code="call">org.pdfsam.test.LowPriorityTestModule.&lt;init&gt;</op>
                     <op code="put">lowPrio</op>
                     <op code="call">org.pdfsam.test.DefaultPriorityTestModule.&lt;init&gt;</op>
                     <op code="put">defaultPrio</op>
                     <op code="call">org.pdfsam.test.HighPriorityTestModule.&lt;init&gt;</op>
                     <op code="put">highPrio</op>
                     <op code="get">defaultPrio</op>
                     <op code="get">highPrio</op>
                     <op code="get">lowPrio</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="put">modules</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">service</op>
                     <op code="get">service</op>
                     <op code="get">modules</op>
                     <op code="call">org.pdfsam.ui.workarea.QuickbarModuleButtonsProvider.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="mostUsedOnTop"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.module.UsageService.getMostUsed</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get">lowPrio</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.module.UsageService.getMostRecentlyUsed</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get">defaultPrio</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">defaultPrio</op>
                     <op code="call">org.pdfsam.test.DefaultPriorityTestModule.id</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.workarea.QuickbarModuleButtonsProvider.buttons</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.pdfsam.ui.workarea.ModuleButton.moduleId</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="recentlyUsedOnTop"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.module.UsageService.getMostRecentlyUsed</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.module.UsageService.getMostUsed</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get">lowPrio</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">lowPrio</op>
                     <op code="call">org.pdfsam.test.LowPriorityTestModule.id</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.workarea.QuickbarModuleButtonsProvider.buttons</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.pdfsam.ui.workarea.ModuleButton.moduleId</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="prioritizedUsedOnTop"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.module.UsageService.getMostUsed</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.module.UsageService.getMostRecentlyUsed</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">highPrio</op>
                     <op code="call">org.pdfsam.test.HighPriorityTestModule.id</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.workarea.QuickbarModuleButtonsProvider.buttons</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.pdfsam.ui.workarea.ModuleButton.moduleId</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ModuleButton"><!--Package: org.pdfsam.ui.workarea; name: org.pdfsam.ui.workarea.ModuleButton; file: org.pdfsam.ui.workarea.ModuleButton-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/Module">module</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/module/Module;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/module/Module">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">module</op>
                     <op code="get">module</op>
                     <op code="call">org.pdfsam.module.Module.graphic</op>
                     <op code="call">org.pdfsam.ui.workarea.ModuleButton.setGraphic</op>
                     <op code="get">module</op>
                     <op code="call">org.pdfsam.module.Module.descriptor</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.getName</op>
                     <op code="call">org.pdfsam.ui.workarea.ModuleButton.setText</op>
                     <op code="call">org.pdfsam.ui.workarea.ModuleButton.setOnAction</op>
                     <op code="get">module</op>
                     <op code="call">org.pdfsam.module.Module.descriptor</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.getDescription</op>
                     <op code="call">javafx.scene.control.Tooltip.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.workarea.ModuleButton.setTooltip</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="moduleId"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">module</op>
                     <op code="call">org.pdfsam.module.Module.id</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ModuleButtonTest"><!--Package: org.pdfsam.ui.workarea; name: org.pdfsam.ui.workarea.ModuleButtonTest; file: org.pdfsam.ui.workarea.ModuleButtonTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="true"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">STUDIO</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/test/DefaultPriorityTestModule">module</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.DefaultPriorityTestModule.&lt;init&gt;</op>
                     <op code="put">module</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">module</op>
                     <op code="call">org.pdfsam.ui.workarea.ModuleButton.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onClick"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">module</op>
                     <op code="call">org.pdfsam.test.DefaultPriorityTestModule.descriptor</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.getName</op>
                     <op code="call">org.pdfsam.ui.workarea.ModuleButtonTest.clickOn</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">module</op>
                     <op code="call">org.pdfsam.test.DefaultPriorityTestModule.id</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.getActiveModuleId</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="requiredModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.workarea.ModuleButton.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.ui.workarea.ModuleButtonTest.STUDIO</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="WorkAreaTest$TestModule"><!--Package: org.pdfsam.ui.workarea; name: org.pdfsam.ui.workarea.WorkAreaTest$TestModule; file: org.pdfsam.ui.workarea.WorkAreaTest$TestModule-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.DefaultPriorityTestModule.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/Pane;"
                       name="modulePanel"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/layout/Pane</return>
                  <ops>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.setId</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="WorkArea"><!--Package: org.pdfsam.ui.workarea; name: org.pdfsam.ui.workarea.WorkArea; file: org.pdfsam.ui.workarea.WorkArea-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Map">modules</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Optional">current</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/ScrollPane">center</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/animation/FadeTransition">fade</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/List;Lorg/pdfsam/ui/workarea/QuickbarModuleButtonsPane;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                     <arg type="Lorg/pdfsam/ui/workarea/QuickbarModuleButtonsPane">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.BorderPane.&lt;init&gt;</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="put">modules</op>
                     <op code="call">java.util.Optional.empty</op>
                     <op code="put">current</op>
                     <op code="call">javafx.scene.control.ScrollPane.&lt;init&gt;</op>
                     <op code="put">center</op>
                     <op code="call">javafx.util.Duration.&lt;init&gt;</op>
                     <op code="get">center</op>
                     <op code="call">javafx.animation.FadeTransition.&lt;init&gt;</op>
                     <op code="put">fade</op>
                     <op code="call">org.pdfsam.ui.workarea.WorkArea.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.workarea.WorkArea.setId</op>
                     <op code="call">java.util.List.iterator</op>
                     <op code="call">java.util.Iterator.hasNext</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="get">modules</op>
                     <op code="call">org.pdfsam.module.Module.id</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">fade</op>
                     <op code="call">javafx.animation.FadeTransition.setFromValue</op>
                     <op code="get">fade</op>
                     <op code="call">javafx.animation.FadeTransition.setToValue</op>
                     <op code="get">center</op>
                     <op code="get_static">javafx.scene.control.ScrollPane$ScrollBarPolicy.NEVER</op>
                     <op code="call">javafx.scene.control.ScrollPane.setHbarPolicy</op>
                     <op code="get">center</op>
                     <op code="call">javafx.scene.control.ScrollPane.setFitToWidth</op>
                     <op code="get">center</op>
                     <op code="call">javafx.scene.control.ScrollPane.setFitToHeight</op>
                     <op code="get">center</op>
                     <op code="call">org.pdfsam.ui.workarea.WorkArea.setCenter</op>
                     <op code="call">org.pdfsam.ui.quickbar.QuickbarPane.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.workarea.WorkArea.setLeft</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/SetActiveModuleRequest;)V"
                       name="onSetActiveModule"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/SetActiveModuleRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.getActiveModuleId</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">current</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">org.pdfsam.ui.event.SetTitleEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="QuickbarModuleButtonsProvider"><!--Package: org.pdfsam.ui.workarea; name: org.pdfsam.ui.workarea.QuickbarModuleButtonsProvider; file: org.pdfsam.ui.workarea.QuickbarModuleButtonsProvider-->
            <attributes>
               <attribute final="true" public="false" static="true" type="I">RECENT_MODULES</attribute>
               <attribute final="true" public="false" static="true" type="I">MAX_MODULES</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/UsageService">service</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/List">modules</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/module/UsageService;Ljava/util/List;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/module/UsageService">?</arg>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">service</op>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="put">modules</op>
                     <op code="get">modules</op>
                     <op code="call">java.util.List.sort</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/List;"
                       name="buttons"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="call">java.util.LinkedHashSet.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.workarea.QuickbarModuleButtonsProvider.fillWithMostRecentlyUsed</op>
                     <op code="call">org.pdfsam.ui.workarea.QuickbarModuleButtonsProvider.fillWithMostUsed</op>
                     <op code="call">org.pdfsam.ui.workarea.QuickbarModuleButtonsProvider.fillWithPrioritized</op>
                     <op code="call">java.util.Set.stream</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Collectors.toList</op>
                     <op code="call">java.util.stream.Stream.collect</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Set;)V"
                       name="fillWithMostUsed"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/Set">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.module.UsageService.getMostUsed</op>
                     <op code="call">java.util.List.iterator</op>
                     <op code="call">java.util.Iterator.hasNext</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="call">java.util.Set.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Set;)V"
                       name="fillWithMostRecentlyUsed"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/Set">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.module.UsageService.getMostRecentlyUsed</op>
                     <op code="call">java.util.List.iterator</op>
                     <op code="call">java.util.Iterator.hasNext</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="call">java.util.Set.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Set;)V"
                       name="fillWithPrioritized"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/Set">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">modules</op>
                     <op code="call">java.util.List.iterator</op>
                     <op code="call">java.util.Iterator.hasNext</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="call">java.util.Set.add</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="QuickbarModuleButtonsPane"><!--Package: org.pdfsam.ui.workarea; name: org.pdfsam.ui.workarea.QuickbarModuleButtonsPane; file: org.pdfsam.ui.workarea.QuickbarModuleButtonsPane-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Set">buttons</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/workarea/QuickbarModuleButtonsProvider;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/ui/workarea/QuickbarModuleButtonsProvider">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButtonsPane.&lt;init&gt;</op>
                     <op code="call">java.util.HashSet.&lt;init&gt;</op>
                     <op code="put">buttons</op>
                     <op code="call">org.pdfsam.ui.workarea.QuickbarModuleButtonsProvider.buttons</op>
                     <op code="call">java.util.List.forEach</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/SetActiveModuleRequest;)V"
                       name="onSetCurrentModuleRequest"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/SetActiveModuleRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.getActiveModuleId</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="QuickbarModuleButtonsPaneTest"><!--Package: org.pdfsam.ui.workarea; name: org.pdfsam.ui.workarea.QuickbarModuleButtonsPaneTest; file: org.pdfsam.ui.workarea.QuickbarModuleButtonsPaneTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">javaFxThread</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/workarea/QuickbarModuleButtonsPane">victim</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/List">buttons</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="put">buttons</op>
                     <op code="get">buttons</op>
                     <op code="call">org.pdfsam.test.DefaultPriorityTestModule.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.workarea.ModuleButton.&lt;init&gt;</op>
                     <op code="call">java.util.List.add</op>
                     <op code="get">buttons</op>
                     <op code="call">org.pdfsam.test.LowPriorityTestModule.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.workarea.ModuleButton.&lt;init&gt;</op>
                     <op code="call">java.util.List.add</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.workarea.QuickbarModuleButtonsProvider.buttons</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get">buttons</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.ui.workarea.QuickbarModuleButtonsPane.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onSetCurrentModuleRequest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">buttons</op>
                     <op code="call">java.util.List.forEach</op>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.activeteModule</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.workarea.QuickbarModuleButtonsPane.onSetCurrentModuleRequest</op>
                     <op code="get">buttons</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.allMatch</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">buttons</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.noneMatch</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="displayTest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">buttons</op>
                     <op code="call">java.util.List.forEach</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.workarea.QuickbarModuleButtonsPane.setDisplayText</op>
                     <op code="get">buttons</op>
                     <op code="call">java.util.List.forEach</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.basic">
         <class id="PdfsamBasic"><!--Package: org.pdfsam.basic; name: org.pdfsam.basic.PdfsamBasic; file: org.pdfsam.basic.PdfsamBasic-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Properties">properties</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">name</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">shortName</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">java.util.Properties.&lt;init&gt;</op>
                     <op code="put">properties</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="put">name</op>
                     <op code="put">shortName</op>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="get">properties</op>
                     <op code="call">java.util.Properties.load</op>
                     <op code="call">java.io.InputStream.close</op>
                     <op code="call">java.io.InputStream.close</op>
                     <op code="call">java.lang.Throwable.addSuppressed</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="name"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">name</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="shortName"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">shortName</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ConfigurableProperty;Ljava/lang/String;)Ljava/lang/String;"
                       name="property"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ConfigurableProperty">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">properties</op>
                     <op code="get">prop</op>
                     <op code="call">java.util.Properties.getProperty</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ConfigurableProperty;)Ljava/lang/String;"
                       name="property"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ConfigurableProperty">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">properties</op>
                     <op code="get">prop</op>
                     <op code="call">java.util.Properties.getProperty</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfsamBasicConfig"><!--Package: org.pdfsam.basic; name: org.pdfsam.basic.PdfsamBasicConfig; file: org.pdfsam.basic.PdfsamBasicConfig-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/image/Image;"
                       name="logo16"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/image/Image</return>
                  <ops>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">javafx.scene.image.Image.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/image/Image;"
                       name="logo24"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/image/Image</return>
                  <ops>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">javafx.scene.image.Image.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/image/Image;"
                       name="logo32"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/image/Image</return>
                  <ops>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">javafx.scene.image.Image.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/image/Image;"
                       name="logo48"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/image/Image</return>
                  <ops>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">javafx.scene.image.Image.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/image/Image;"
                       name="logo64"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/image/Image</return>
                  <ops>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">javafx.scene.image.Image.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/image/Image;"
                       name="logo96"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/image/Image</return>
                  <ops>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">javafx.scene.image.Image.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/image/Image;"
                       name="logo128"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/image/Image</return>
                  <ops>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">javafx.scene.image.Image.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/image/Image;"
                       name="logo256"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/image/Image</return>
                  <ops>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">javafx.scene.image.Image.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/image/Image;"
                       name="logo512"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/image/Image</return>
                  <ops>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">javafx.scene.image.Image.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/Pdfsam;"
                       name="pdfsam"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/Pdfsam</return>
                  <ops>
                     <op code="call">org.pdfsam.basic.PdfsamBasic.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/Pdfsam;)Ljava/lang/Object;"
                       name="updatesUrl"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/Pdfsam">?</arg>
                  </args>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.VERSION</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">java.lang.String.format</op>
                     <op code="call">java.net.URL.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfsamBasicTest"><!--Package: org.pdfsam.basic; name: org.pdfsam.basic.PdfsamBasicTest; file: org.pdfsam.basic.PdfsamBasicTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="blankName"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.basic.PdfsamBasic.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="blankShortName"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.basic.PdfsamBasic.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="property"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.basic.PdfsamBasic.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.VERSION</op>
                     <op code="call">org.pdfsam.basic.PdfsamBasic.property</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.FEED_URL</op>
                     <op code="call">org.pdfsam.basic.PdfsamBasic.property</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="App"><!--Package: org.pdfsam.basic; name: org.pdfsam.basic.App; file: org.pdfsam.basic.App-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Ljava/lang/String;)V"
                       name="main"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.basic.PdfsamBasicConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixModule$ModuleConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.extract.ExtractModule$ModuleConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.merge.MergeModule$ModuleConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.rotate.RotateModule$ModuleConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.split.SplitModule$ModuleConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.splitbybookmarks.SplitByBookmarksModule$ModuleConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.splitbysize.SplitBySizeModule$ModuleConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.addConfig</op>
                     <op code="call">javafx.application.Application.launch</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.support">
         <class id="EncryptionUtilsTest"><!--Package: org.pdfsam.support; name: org.pdfsam.support.EncryptionUtilsTest; file: org.pdfsam.support.EncryptionUtilsTest-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">TEST</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">ENC</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testEncrypt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.EncryptionUtils.encrypt</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testDecrypt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.EncryptionUtils.decrypt</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullInput"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.EncryptionUtils.decrypt</op>
                     <op code="call">org.junit.Assert.assertNull</op>
                     <op code="call">org.pdfsam.support.EncryptionUtils.encrypt</op>
                     <op code="call">org.junit.Assert.assertNull</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="KeyStringValueItemTest"><!--Package: org.pdfsam.support; name: org.pdfsam.support.KeyStringValueItemTest; file: org.pdfsam.support.KeyStringValueItemTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidEmpty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyEmptyValue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testEquals"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.TestUtils.testEqualsAndHashCodes</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="empty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyEmptyValue</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LocaleKeyValueItem"><!--Package: org.pdfsam.support; name: org.pdfsam.support.LocaleKeyValueItem; file: org.pdfsam.support.LocaleKeyValueItem-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Locale">locale</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/Locale;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Locale">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">locale</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getKey"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">locale</op>
                     <op code="call">java.util.Locale.toLanguageTag</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">locale</op>
                     <op code="call">java.util.Locale.getDisplayName</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.capitalize</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.pdfsam.support.LocaleKeyValueItem.getValue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="hashCode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.LocaleKeyValueItem.getKey</op>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.append</op>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.toHashCode</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="equals"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.LocaleKeyValueItem.getKey</op>
                     <op code="call">org.pdfsam.support.LocaleKeyValueItem.getKey</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.append</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.isEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/support/LocaleKeyValueItem;)I"
                       name="compareTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/support/LocaleKeyValueItem">?</arg>
                  </args>
                  <return>I</return>
                  <ops>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">org.pdfsam.support.LocaleKeyValueItem.getValue</op>
                     <op code="call">org.pdfsam.support.LocaleKeyValueItem.getValue</op>
                     <op code="call">java.lang.String.compareTo</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ObservableAtomicReference"><!--Package: org.pdfsam.support; name: org.pdfsam.support.ObservableAtomicReference; file: org.pdfsam.support.ObservableAtomicReference-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/concurrent/atomic/AtomicReference">value</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/Object;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.beans.value.ObservableValueBase.&lt;init&gt;</op>
                     <op code="call">java.util.concurrent.atomic.AtomicReference.&lt;init&gt;</op>
                     <op code="put">value</op>
                     <op code="get">value</op>
                     <op code="call">java.util.concurrent.atomic.AtomicReference.set</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="getValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">value</op>
                     <op code="call">java.util.concurrent.atomic.AtomicReference.get</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)V"
                       name="set"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">value</op>
                     <op code="call">java.util.concurrent.atomic.AtomicReference.set</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.fireValueChangedEvent</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LocaleKeyValueItemTest"><!--Package: org.pdfsam.support; name: org.pdfsam.support.LocaleKeyValueItemTest; file: org.pdfsam.support.LocaleKeyValueItemTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullConstructor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.LocaleKeyValueItem.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">java.util.Locale.ITALY</op>
                     <op code="call">org.pdfsam.support.LocaleKeyValueItem.&lt;init&gt;</op>
                     <op code="get_static">java.util.Locale.ITALY</op>
                     <op code="call">java.util.Locale.getDisplayName</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.capitalize</op>
                     <op code="call">org.pdfsam.support.LocaleKeyValueItem.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">java.util.Locale.ITALY</op>
                     <op code="call">java.util.Locale.toLanguageTag</op>
                     <op code="call">org.pdfsam.support.LocaleKeyValueItem.getKey</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="equalsAndHashCodes"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">java.util.Locale.CANADA</op>
                     <op code="call">org.pdfsam.support.LocaleKeyValueItem.&lt;init&gt;</op>
                     <op code="get_static">java.util.Locale.CANADA</op>
                     <op code="call">org.pdfsam.support.LocaleKeyValueItem.&lt;init&gt;</op>
                     <op code="get_static">java.util.Locale.CANADA</op>
                     <op code="call">org.pdfsam.support.LocaleKeyValueItem.&lt;init&gt;</op>
                     <op code="get_static">java.util.Locale.CHINA</op>
                     <op code="call">org.pdfsam.support.LocaleKeyValueItem.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.TestUtils.testEqualsAndHashCodes</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="XmlUtils"><!--Package: org.pdfsam.support; name: org.pdfsam.support.XmlUtils; file: org.pdfsam.support.XmlUtils-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/w3c/dom/Node;Ljava/lang/String;)Ljava/lang/String;"
                       name="nullSafeGetStringAttribute"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Lorg/w3c/dom/Node">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.w3c.dom.Node.getAttributes</op>
                     <op code="call">org.w3c.dom.NamedNodeMap.getNamedItem</op>
                     <op code="call">org.w3c.dom.Node.getNodeValue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="KeyStringValueItem"><!--Package: org.pdfsam.support; name: org.pdfsam.support.KeyStringValueItem; file: org.pdfsam.support.KeyStringValueItem-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/Object">key</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">value</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/Object;Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">key</op>
                     <op code="put">value</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/Object;"
                       name="getKey"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/Object</return>
                  <ops>
                     <op code="get">key</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">value</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Lorg/pdfsam/support/KeyStringValueItem;"
                       name="keyEmptyValue"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Lorg/pdfsam/support/KeyStringValueItem</return>
                  <ops>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Ljava/lang/String;)Lorg/pdfsam/support/KeyStringValueItem;"
                       name="keyValue"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lorg/pdfsam/support/KeyStringValueItem</return>
                  <ops>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">value</op>
                     <op code="call">java.lang.String.toString</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="hashCode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.&lt;init&gt;</op>
                     <op code="get">key</op>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.append</op>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.toHashCode</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="equals"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.&lt;init&gt;</op>
                     <op code="get">key</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.append</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.isEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ObservableAtomicReferenceTest"><!--Package: org.pdfsam.support; name: org.pdfsam.support.ObservableAtomicReferenceTest; file: org.pdfsam.support.ObservableAtomicReferenceTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="constructor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="listeners"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.addListener</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.addListener</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.set</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">javafx.beans.value.ChangeListener.changed</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">javafx.beans.InvalidationListener.invalidated</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="XmlUtilsTest"><!--Package: org.pdfsam.support; name: org.pdfsam.support.XmlUtilsTest; file: org.pdfsam.support.XmlUtilsTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/w3c/dom/Document">doc</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javax.xml.parsers.DocumentBuilderFactory.newInstance</op>
                     <op code="call">javax.xml.parsers.DocumentBuilderFactory.setNamespaceAware</op>
                     <op code="call">javax.xml.parsers.DocumentBuilderFactory.newDocumentBuilder</op>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getClassLoader</op>
                     <op code="call">java.lang.ClassLoader.getResourceAsStream</op>
                     <op code="call">javax.xml.parsers.DocumentBuilder.parse</op>
                     <op code="put">doc</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullSafeGetStringAttribute"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javax.xml.xpath.XPathFactory.newInstance</op>
                     <op code="call">javax.xml.xpath.XPathFactory.newXPath</op>
                     <op code="get">doc</op>
                     <op code="get_static">javax.xml.xpath.XPathConstants.NODE</op>
                     <op code="call">javax.xml.xpath.XPath.evaluate</op>
                     <op code="call">org.pdfsam.support.XmlUtils.nullSafeGetStringAttribute</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.support.XmlUtils.nullSafeGetStringAttribute</op>
                     <op code="call">org.junit.Assert.assertNull</op>
                     <op code="call">javax.xml.xpath.XPathFactory.newInstance</op>
                     <op code="call">javax.xml.xpath.XPathFactory.newXPath</op>
                     <op code="get">doc</op>
                     <op code="get_static">javax.xml.xpath.XPathConstants.NODE</op>
                     <op code="call">javax.xml.xpath.XPath.evaluate</op>
                     <op code="call">org.junit.Assert.assertNull</op>
                     <op code="call">org.pdfsam.support.XmlUtils.nullSafeGetStringAttribute</op>
                     <op code="call">org.junit.Assert.assertNull</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="EncryptionUtils"><!--Package: org.pdfsam.support; name: org.pdfsam.support.EncryptionUtils; file: org.pdfsam.support.EncryptionUtils-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Ljava/lang/String">T_KEY</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Ljava/lang/String;"
                       name="encrypt"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="call">javax.crypto.Cipher.getInstance</op>
                     <op code="get_static">java.nio.charset.StandardCharsets.UTF_8</op>
                     <op code="call">java.lang.String.getBytes</op>
                     <op code="call">java.util.Arrays.copyOf</op>
                     <op code="call">javax.crypto.spec.SecretKeySpec.&lt;init&gt;</op>
                     <op code="call">javax.crypto.Cipher.init</op>
                     <op code="call">java.util.Base64.getEncoder</op>
                     <op code="get_static">java.nio.charset.StandardCharsets.UTF_8</op>
                     <op code="call">java.lang.String.getBytes</op>
                     <op code="call">javax.crypto.Cipher.doFinal</op>
                     <op code="call">java.util.Base64$Encoder.encodeToString</op>
                     <op code="get_static">org.pdfsam.support.EncryptionUtils.LOG</op>
                     <op code="call">org.slf4j.Logger.error</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Ljava/lang/String;"
                       name="decrypt"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="call">javax.crypto.Cipher.getInstance</op>
                     <op code="get_static">java.nio.charset.StandardCharsets.UTF_8</op>
                     <op code="call">java.lang.String.getBytes</op>
                     <op code="call">java.util.Arrays.copyOf</op>
                     <op code="call">javax.crypto.spec.SecretKeySpec.&lt;init&gt;</op>
                     <op code="call">javax.crypto.Cipher.init</op>
                     <op code="call">java.util.Base64.getDecoder</op>
                     <op code="call">java.util.Base64$Decoder.decode</op>
                     <op code="call">javax.crypto.Cipher.doFinal</op>
                     <op code="get_static">java.nio.charset.StandardCharsets.UTF_8</op>
                     <op code="call">java.lang.String.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.support.EncryptionUtils.LOG</op>
                     <op code="call">org.slf4j.Logger.error</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.support.EncryptionUtils.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.commons">
         <class id="ToggleChangeListenerTest"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.ToggleChangeListenerTest; file: org.pdfsam.ui.commons.ToggleChangeListenerTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/commons/ToggleChangeListener">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.commons.ToggleChangeListenerTest$1.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="disabled"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.commons.ToggleChangeListener.disabled</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.commons.ToggleChangeListener.changed</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="enabled"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.commons.ToggleChangeListener.disabled</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.commons.ToggleChangeListener.changed</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ShowStageRequest"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.ShowStageRequest; file: org.pdfsam.ui.commons.ShowStageRequest-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Lorg/pdfsam/ui/commons/ShowStageRequest">INSTANCE</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.ShowStageRequest.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.ui.commons.ShowStageRequest.INSTANCE</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SetPageRangesRequest"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.SetPageRangesRequest; file: org.pdfsam.ui.commons.SetPageRangesRequest-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Ljava/lang/String">range</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="put">range</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SetDestinationRequest"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.SetDestinationRequest; file: org.pdfsam.ui.commons.SetDestinationRequest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/io/File">footprint</attribute>
               <attribute final="false" public="false" static="false" type="Z">fallback</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/io/File;Z)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">fallback</op>
                     <op code="put">footprint</op>
                     <op code="put">fallback</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/io/File;"
                       name="getFootprint"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/io/File</return>
                  <ops>
                     <op code="get">footprint</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isFallback"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">fallback</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/File;Ljava/lang/String;)Lorg/pdfsam/ui/commons/SetDestinationRequest;"
                       name="requestDestination"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/commons/SetDestinationRequest</return>
                  <ops>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">java.io.File.getParent</op>
                     <op code="call">java.lang.String.format</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.commons.SetDestinationRequest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/File;Ljava/lang/String;)Lorg/pdfsam/ui/commons/SetDestinationRequest;"
                       name="requestFallbackDestination"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/commons/SetDestinationRequest</return>
                  <ops>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">java.io.File.getParent</op>
                     <op code="call">java.lang.String.format</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.commons.SetDestinationRequest.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SetActiveModuleRequest"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.SetActiveModuleRequest; file: org.pdfsam.ui.commons.SetActiveModuleRequest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">id</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">id</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Optional;"
                       name="getActiveModuleId"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/Optional</return>
                  <ops>
                     <op code="get">id</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lorg/pdfsam/ui/commons/SetActiveModuleRequest;"
                       name="activeteModule"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/commons/SetActiveModuleRequest</return>
                  <ops>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/commons/SetActiveModuleRequest;"
                       name="activeteCurrentModule"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/commons/SetActiveModuleRequest</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SetActiveModuleRequestTest"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.SetActiveModuleRequestTest; file: org.pdfsam.ui.commons.SetActiveModuleRequestTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="blank"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.activeteModule</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="id"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.activeteModule</op>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.getActiveModuleId</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="current"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.activeteCurrentModule</op>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.getActiveModuleId</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RadioButtonDrivenTextFieldsPaneTest"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPaneTest; file: org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPaneTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/ToggleGroup">group</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/commons/RadioButtonDrivenTextFieldsPane">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.ToggleGroup.&lt;init&gt;</op>
                     <op code="put">group</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">group</op>
                     <op code="call">org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPane.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="call">javafx.scene.control.RadioButton.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.TextField.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.TextField.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.control.TextField.setText</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPane.addRow</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPane.setId</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullRadio"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.control.TextField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPane.addRow</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullField"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.control.RadioButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPane.addRow</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullHelp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="addRow"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get">group</op>
                     <op code="call">javafx.scene.control.RadioButton.getToggleGroup</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">javafx.scene.control.TextField.isDisable</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="focusedField"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPaneTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OpenFileRequest"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.OpenFileRequest; file: org.pdfsam.ui.commons.OpenFileRequest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/io/File">file</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/io/File;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">file</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/io/File;"
                       name="getFile"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/io/File</return>
                  <ops>
                     <op code="get">file</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OpenUrlRequestTest"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.OpenUrlRequestTest; file: org.pdfsam.ui.commons.OpenUrlRequestTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.OpenUrlRequest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="blankArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.OpenUrlRequest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="notNullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.OpenUrlRequest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.commons.OpenUrlRequest.getUrl</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OpenUrlRequest"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.OpenUrlRequest; file: org.pdfsam.ui.commons.OpenUrlRequest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">url</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="put">url</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getUrl"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">url</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="HidingPaneTest"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.HidingPaneTest; file: org.pdfsam.ui.commons.HidingPaneTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/commons/HidingPane">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.HidingPane.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="hide"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                     <op code="call">org.pdfsam.ui.commons.HidingPaneTest.clickOn</op>
                     <op code="get">victim</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RadioButtonDrivenTextFieldsPane"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPane; file: org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPane-->
            <attributes>
               <attribute final="false" public="false" static="false" type="I">rows</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/ToggleGroup">group</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljavafx/scene/control/ToggleGroup;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/scene/control/ToggleGroup">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.GridPane.&lt;init&gt;</op>
                     <op code="put">rows</op>
                     <op code="put">group</op>
                     <op code="call">org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.GRID</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/scene/control/RadioButton;Ljavafx/scene/layout/Region;Ljavafx/scene/text/Text;)V"
                       name="addRow"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/scene/control/RadioButton">?</arg>
                     <arg type="Ljavafx/scene/layout/Region">?</arg>
                     <arg type="Ljavafx/scene/text/Text">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="get_static">javafx.geometry.VPos.BOTTOM</op>
                     <op code="call">javafx.scene.layout.GridPane.setValignment</op>
                     <op code="get_static">javafx.geometry.VPos.BOTTOM</op>
                     <op code="call">javafx.scene.layout.GridPane.setValignment</op>
                     <op code="get_static">javafx.geometry.HPos.LEFT</op>
                     <op code="call">javafx.scene.layout.GridPane.setHalignment</op>
                     <op code="get_static">javafx.geometry.HPos.LEFT</op>
                     <op code="call">javafx.scene.layout.GridPane.setHalignment</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">javafx.scene.layout.GridPane.setFillWidth</op>
                     <op code="call">javafx.scene.layout.Region.setPrefWidth</op>
                     <op code="call">javafx.scene.layout.Region.setDisable</op>
                     <op code="call">javafx.scene.control.RadioButton.selectedProperty</op>
                     <op code="call">javafx.beans.property.BooleanProperty.addListener</op>
                     <op code="get">group</op>
                     <op code="call">javafx.scene.control.RadioButton.setToggleGroup</op>
                     <op code="get">rows</op>
                     <op code="call">org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPane.add</op>
                     <op code="get">rows</op>
                     <op code="call">org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPane.add</op>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="get">rows</op>
                     <op code="call">org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPane.add</op>
                     <op code="get">rows</op>
                     <op code="put">rows</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="HidingPane"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.HidingPane; file: org.pdfsam.ui.commons.HidingPane-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.BorderPane.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Button.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.BUTTON</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get_static">javafx.scene.text.TextAlignment.CENTER</op>
                     <op code="call">javafx.scene.control.Button.setTextAlignment</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="get_static">javafx.geometry.Pos.CENTER_RIGHT</op>
                     <op code="call">javafx.scene.layout.HBox.setAlignment</op>
                     <op code="call">javafx.scene.layout.HBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.layout.BorderPane.setBottom</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="HideStageRequest"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.HideStageRequest; file: org.pdfsam.ui.commons.HideStageRequest-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Lorg/pdfsam/ui/commons/HideStageRequest">INSTANCE</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.HideStageRequest.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.ui.commons.HideStageRequest.INSTANCE</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ClosePane"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.ClosePane; file: org.pdfsam.ui.commons.ClosePane-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljavafx/event/EventHandler">defaultHandler</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.ClosePane.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljavafx/event/EventHandler;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/event/EventHandler">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="put">defaultHandler</op>
                     <op code="get_static">javafx.geometry.Pos.CENTER_RIGHT</op>
                     <op code="call">org.pdfsam.ui.commons.ClosePane.setAlignment</op>
                     <op code="call">org.pdfsam.ui.commons.ClosePane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Button.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.BUTTON</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get_static">javafx.scene.text.TextAlignment.CENTER</op>
                     <op code="call">javafx.scene.control.Button.setTextAlignment</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="get">defaultHandler</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">org.pdfsam.ui.commons.ClosePane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="UrlButton"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.UrlButton; file: org.pdfsam.ui.commons.UrlButton-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/String;Lde/jensd/fx/glyphs/fontawesome/FontAwesomeIcon;)Lorg/pdfsam/ui/commons/UrlButton;"
                       name="styledUrlButton"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lde/jensd/fx/glyphs/fontawesome/FontAwesomeIcon">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/commons/UrlButton</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.support.Style.BUTTON</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">org.pdfsam.ui.commons.UrlButton.urlButton</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/String;Lde/jensd/fx/glyphs/fontawesome/FontAwesomeIcon;[Ljava/lang/String;)Lorg/pdfsam/ui/commons/UrlButton;"
                       name="urlButton"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lde/jensd/fx/glyphs/fontawesome/FontAwesomeIcon">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/commons/UrlButton</return>
                  <ops>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="call">org.pdfsam.ui.commons.UrlButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.commons.UrlButton.setOnAction</op>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory.get</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory.setIcon</op>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="call">org.pdfsam.ui.commons.UrlButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SetDestinationRequestTest"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.SetDestinationRequestTest; file: org.pdfsam.ui.commons.SetDestinationRequestTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">temp</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/io/File">file</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">temp</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">temp</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="put">file</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.SetDestinationRequest.requestDestination</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="fallback"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">file</op>
                     <op code="call">org.pdfsam.ui.commons.SetDestinationRequest.requestFallbackDestination</op>
                     <op code="call">org.pdfsam.ui.commons.SetDestinationRequest.isFallback</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">file</op>
                     <op code="call">org.pdfsam.ui.commons.SetDestinationRequest.requestDestination</op>
                     <op code="call">org.pdfsam.ui.commons.SetDestinationRequest.isFallback</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="footprint"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">file</op>
                     <op code="call">org.pdfsam.ui.commons.SetDestinationRequest.requestFallbackDestination</op>
                     <op code="get">file</op>
                     <op code="call">java.io.File.getParent</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.commons.SetDestinationRequest.getFootprint</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ToggleChangeListener"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.ToggleChangeListener; file: org.pdfsam.ui.commons.ToggleChangeListener-->
            <attributes>
               <attribute final="false" public="false" static="false" type="Z">disabled</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">disabled</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/beans/value/ObservableValue;Ljava/lang/Object;Ljava/lang/Object;)V"
                       name="changed"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/beans/value/ObservableValue">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">disabled</op>
                     <op code="call">org.pdfsam.ui.commons.ToggleChangeListener.onChanged</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)V"
                       name="disabled"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">disabled</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="disabled"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">disabled</op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/beans/value/ObservableValue;Ljava/lang/Object;Ljava/lang/Object;)V"
                       name="onChanged"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/beans/value/ObservableValue">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
               </method>
            </methods>
         </class>
         <class id="ValidableTextFieldTest"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.ValidableTextFieldTest; file: org.pdfsam.ui.commons.ValidableTextFieldTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/commons/ValidableTextField">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setErrorMessage</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullValidator"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setValidator</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validateOnFocusChange"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setErrorMessage</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validators.nonBlank</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setValidator</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextFieldTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.TAB</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextFieldTest.push</op>
                     <op code="get">victim</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidCssApplied"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validators.nonBlank</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setValidator</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setEnableInvalidStyle</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextFieldTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.TAB</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextFieldTest.push</op>
                     <op code="get">victim</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidCssNotApplied"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setEnableInvalidStyle</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextFieldTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.TAB</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextFieldTest.push</op>
                     <op code="get">victim</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validateOnEnter"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validators.nonBlank</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setValidator</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setOnEnterValidation</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextFieldTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextFieldTest.push</op>
                     <op code="get">victim</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="dontValidateOnEnter"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setOnEnterValidation</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextFieldTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextFieldTest.push</op>
                     <op code="get">victim</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="tooltip"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.support.validation.Validators.nonBlank</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setValidator</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextFieldTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.TAB</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextFieldTest.push</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextFieldTest.sleep</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextFieldTest.robotContext</op>
                     <op code="call">org.testfx.api.FxRobotContext.getWindowFinder</op>
                     <op code="call">org.testfx.service.finder.WindowFinder.listWindows</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Animations"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.Animations; file: org.pdfsam.ui.commons.Animations-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/scene/Node;)Ljavafx/animation/Timeline;"
                       name="shake"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/scene/Node">?</arg>
                  </args>
                  <return>Ljavafx/animation/Timeline</return>
                  <ops>
                     <op code="call">javafx.util.Duration.millis</op>
                     <op code="call">javafx.animation.KeyFrame.&lt;init&gt;</op>
                     <op code="call">javafx.util.Duration.millis</op>
                     <op code="call">javafx.scene.Node.scaleXProperty</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.scaleYProperty</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.rotateProperty</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.animation.KeyFrame.&lt;init&gt;</op>
                     <op code="call">javafx.util.Duration.millis</op>
                     <op code="call">javafx.scene.Node.scaleXProperty</op>
                     <op code="call">java.lang.Double.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.scaleYProperty</op>
                     <op code="call">java.lang.Double.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.rotateProperty</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.animation.KeyFrame.&lt;init&gt;</op>
                     <op code="call">javafx.util.Duration.millis</op>
                     <op code="call">javafx.scene.Node.scaleXProperty</op>
                     <op code="call">java.lang.Double.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.scaleYProperty</op>
                     <op code="call">java.lang.Double.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.rotateProperty</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.animation.KeyFrame.&lt;init&gt;</op>
                     <op code="call">javafx.util.Duration.millis</op>
                     <op code="call">javafx.scene.Node.scaleXProperty</op>
                     <op code="call">java.lang.Double.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.scaleYProperty</op>
                     <op code="call">java.lang.Double.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.rotateProperty</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.animation.KeyFrame.&lt;init&gt;</op>
                     <op code="call">javafx.util.Duration.millis</op>
                     <op code="call">javafx.scene.Node.scaleXProperty</op>
                     <op code="call">java.lang.Double.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.scaleYProperty</op>
                     <op code="call">java.lang.Double.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.rotateProperty</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.animation.KeyFrame.&lt;init&gt;</op>
                     <op code="call">javafx.util.Duration.millis</op>
                     <op code="call">javafx.scene.Node.scaleXProperty</op>
                     <op code="call">java.lang.Double.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.scaleYProperty</op>
                     <op code="call">java.lang.Double.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.rotateProperty</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.animation.KeyFrame.&lt;init&gt;</op>
                     <op code="call">javafx.util.Duration.millis</op>
                     <op code="call">javafx.scene.Node.scaleXProperty</op>
                     <op code="call">java.lang.Double.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.scaleYProperty</op>
                     <op code="call">java.lang.Double.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.rotateProperty</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.animation.KeyFrame.&lt;init&gt;</op>
                     <op code="call">javafx.util.Duration.millis</op>
                     <op code="call">javafx.scene.Node.scaleXProperty</op>
                     <op code="call">java.lang.Double.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.scaleYProperty</op>
                     <op code="call">java.lang.Double.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.rotateProperty</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.animation.KeyFrame.&lt;init&gt;</op>
                     <op code="call">javafx.util.Duration.millis</op>
                     <op code="call">javafx.scene.Node.scaleXProperty</op>
                     <op code="call">java.lang.Double.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.scaleYProperty</op>
                     <op code="call">java.lang.Double.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.rotateProperty</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.animation.KeyFrame.&lt;init&gt;</op>
                     <op code="call">javafx.util.Duration.millis</op>
                     <op code="call">javafx.scene.Node.scaleXProperty</op>
                     <op code="call">java.lang.Double.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.scaleYProperty</op>
                     <op code="call">java.lang.Double.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.rotateProperty</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.animation.KeyFrame.&lt;init&gt;</op>
                     <op code="call">javafx.util.Duration.millis</op>
                     <op code="call">javafx.scene.Node.scaleXProperty</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.scaleYProperty</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Node.rotateProperty</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="get_static">javafx.animation.Interpolator.EASE_BOTH</op>
                     <op code="call">javafx.animation.KeyValue.&lt;init&gt;</op>
                     <op code="call">javafx.animation.KeyFrame.&lt;init&gt;</op>
                     <op code="call">javafx.animation.Timeline.&lt;init&gt;</op>
                     <op code="call">javafx.animation.Timeline.setCycleCount</op>
                     <op code="call">javafx.util.Duration.millis</op>
                     <op code="call">javafx.animation.Timeline.setDelay</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ShowPdfDescriptorRequest"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.ShowPdfDescriptorRequest; file: org.pdfsam.ui.commons.ShowPdfDescriptorRequest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">descriptor</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/pdf/PdfDocumentDescriptor;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">descriptor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/pdf/PdfDocumentDescriptor;"
                       name="getDescriptor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/pdf/PdfDocumentDescriptor</return>
                  <ops>
                     <op code="get">descriptor</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="HideOnEscapeHandlerTest"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.HideOnEscapeHandlerTest; file: org.pdfsam.ui.commons.HideOnEscapeHandlerTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/Scene">scene</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="put">scene</op>
                     <op code="get">scene</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.HideOnEscapeHandler.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="notShowingNoMatch"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.HideOnEscapeHandlerTest$1.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.spy</op>
                     <op code="call">org.pdfsam.ui.commons.HideOnEscapeHandler.&lt;init&gt;</op>
                     <op code="get_static">javafx.scene.input.KeyEvent.KEY_RELEASED</op>
                     <op code="get_static">javafx.scene.input.KeyCode.A</op>
                     <op code="call">javafx.scene.input.KeyCode.toString</op>
                     <op code="get_static">javafx.scene.input.KeyCode.A</op>
                     <op code="call">javafx.scene.input.KeyEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.commons.HideOnEscapeHandler.handle</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">javafx.stage.Window.hide</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="showingMatch"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">scene</op>
                     <op code="call">org.pdfsam.ui.commons.HideOnEscapeHandlerTest.window</op>
                     <op code="call">org.mockito.Mockito.spy</op>
                     <op code="call">org.pdfsam.ui.commons.HideOnEscapeHandler.&lt;init&gt;</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.mockito.Mockito.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">javafx.stage.Window.hide</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="notShowingMatch"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.HideOnEscapeHandlerTest$2.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.spy</op>
                     <op code="call">org.pdfsam.ui.commons.HideOnEscapeHandler.&lt;init&gt;</op>
                     <op code="get_static">javafx.scene.input.KeyEvent.KEY_RELEASED</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ESCAPE</op>
                     <op code="call">javafx.scene.input.KeyCode.toString</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ESCAPE</op>
                     <op code="call">javafx.scene.input.KeyEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.commons.HideOnEscapeHandler.handle</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">javafx.stage.Window.hide</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ValidableTextField"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.ValidableTextField; file: org.pdfsam.ui.commons.ValidableTextField-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljavafx/scene/input/KeyCombination">ENTER_COMBO</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/support/FXValidationSupport">validationSupport</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/commons/ValidableTextField$ErrorTooltipManager">errorTooltipManager</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.TextField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.&lt;init&gt;</op>
                     <op code="put">validationSupport</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.focusedProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyBooleanProperty.addListener</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.textProperty</op>
                     <op code="call">javafx.beans.property.StringProperty.addListener</op>
                     <op code="get">validationSupport</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validationStateProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.addListener</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/support/FXValidationSupport$ValidationState;"
                       name="getValidationState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/support/FXValidationSupport$ValidationState</return>
                  <ops>
                     <op code="get">validationSupport</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validationStateProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.get</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/beans/property/ReadOnlyObjectProperty;"
                       name="validProperty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/beans/property/ReadOnlyObjectProperty</return>
                  <ops>
                     <op code="get">validationSupport</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validationStateProperty</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)V"
                       name="setEnableInvalidStyle"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">validationSupport</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validationStateProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.addListener</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="setErrorMessage"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotBlank</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField$ErrorTooltipManager.&lt;init&gt;</op>
                     <op code="put">errorTooltipManager</op>
                     <op code="put">errorTooltipManager</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)V"
                       name="setOnEnterValidation"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setOnKeyReleased</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/support/validation/Validator;)V"
                       name="setValidator"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/support/validation/Validator">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="get">validationSupport</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.setValidator</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">validationSupport</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.pdfsam.ui.support.FXValidationSupport.validate</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">javafx.scene.input.KeyCodeCombination.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.ui.commons.ValidableTextField.ENTER_COMBO</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="NonExistingOutputDirectoryEvent"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.NonExistingOutputDirectoryEvent; file: org.pdfsam.ui.commons.NonExistingOutputDirectoryEvent-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Ljava/nio/file/Path">outputDirectory</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/nio/file/Path;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/nio/file/Path">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">outputDirectory</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ClosePaneTest"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.ClosePaneTest; file: org.pdfsam.ui.commons.ClosePaneTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/stage/Stage">victimStage</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.stage.Stage.&lt;init&gt;</op>
                     <op code="put">victimStage</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="hide"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.ClosePane.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.application.Platform.runLater</op>
                     <op code="call">org.pdfsam.ui.commons.ClosePaneTest.clickOn</op>
                     <op code="call">org.pdfsam.ui.commons.ClosePaneTest.robotContext</op>
                     <op code="call">org.testfx.api.FxRobotContext.getWindowFinder</op>
                     <op code="call">org.testfx.service.finder.WindowFinder.listWindows</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.commons.ClosePaneTest.clickOn</op>
                     <op code="call">org.pdfsam.ui.commons.ClosePaneTest.robotContext</op>
                     <op code="call">org.testfx.api.FxRobotContext.getWindowFinder</op>
                     <op code="call">org.testfx.service.finder.WindowFinder.listWindows</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="customAction"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.ClosePane.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.application.Platform.runLater</op>
                     <op code="call">org.pdfsam.ui.commons.ClosePaneTest.clickOn</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.commons.ClosePaneTest.clickOn</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ValidableTextField$ErrorTooltipManager"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.ValidableTextField$ErrorTooltipManager; file: org.pdfsam.ui.commons.ValidableTextField$ErrorTooltipManager-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">ERROR_TOOLTIP_CLASS</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Tooltip">tooltip</attribute>
               <attribute final="false" public="false" static="false" type="Z">active</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/animation/Timeline">activationTimer</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/animation/Timeline">hideTimer</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/commons/ValidableTextField">this$0</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/commons/ValidableTextField;Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/ValidableTextField">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">this$0</op>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">active</op>
                     <op code="call">javafx.animation.Timeline.&lt;init&gt;</op>
                     <op code="put">activationTimer</op>
                     <op code="call">javafx.animation.Timeline.&lt;init&gt;</op>
                     <op code="put">hideTimer</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="call">javafx.scene.control.Tooltip.&lt;init&gt;</op>
                     <op code="put">tooltip</op>
                     <op code="get">tooltip</op>
                     <op code="call">javafx.scene.control.Tooltip.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">hideTimer</op>
                     <op code="call">javafx.animation.Timeline.getKeyFrames</op>
                     <op code="call">javafx.util.Duration.&lt;init&gt;</op>
                     <op code="call">javafx.animation.KeyFrame.&lt;init&gt;</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">hideTimer</op>
                     <op code="call">javafx.animation.Timeline.setOnFinished</op>
                     <op code="get">activationTimer</op>
                     <op code="call">javafx.animation.Timeline.getKeyFrames</op>
                     <op code="call">javafx.util.Duration.&lt;init&gt;</op>
                     <op code="call">javafx.animation.KeyFrame.&lt;init&gt;</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">activationTimer</op>
                     <op code="call">javafx.animation.Timeline.setOnFinished</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="showTooltip"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">activationTimer</op>
                     <op code="call">javafx.animation.Timeline.getStatus</op>
                     <op code="get_static">javafx.animation.Animation$Status.RUNNING</op>
                     <op code="get">activationTimer</op>
                     <op code="call">javafx.animation.Timeline.stop</op>
                     <op code="get">activationTimer</op>
                     <op code="call">javafx.animation.Timeline.playFromStart</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Window;Ljavafx/scene/Scene;)Ljavafx/geometry/Point2D;"
                       name="getDisplayCoordiantes"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljavafx/stage/Window">?</arg>
                     <arg type="Ljavafx/scene/Scene">?</arg>
                  </args>
                  <return>Ljavafx/geometry/Point2D</return>
                  <ops>
                     <op code="get">this$0</op>
                     <op code="get">this$0</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getHeight</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.localToScene</op>
                     <op code="call">javafx.stage.Window.getX</op>
                     <op code="call">javafx.scene.Scene.getX</op>
                     <op code="call">javafx.geometry.Point2D.getX</op>
                     <op code="call">java.lang.Math.round</op>
                     <op code="call">javafx.stage.Window.getY</op>
                     <op code="call">javafx.scene.Scene.getY</op>
                     <op code="call">javafx.geometry.Point2D.getY</op>
                     <op code="call">java.lang.Math.round</op>
                     <op code="call">javafx.geometry.Point2D.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="UrlButtonTest"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.UrlButtonTest; file: org.pdfsam.ui.commons.UrlButtonTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">URL</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.UrlButton.styledUrlButton</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullUrl"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.ADN</op>
                     <op code="call">org.pdfsam.ui.commons.UrlButton.urlButton</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="emptyUrl"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.ADN</op>
                     <op code="call">org.pdfsam.ui.commons.UrlButton.urlButton</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="eventSent"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.commons.UrlButtonTest.clickOn</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.commons.OpenUrlRequest.getUrl</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="HideOnEscapeHandler"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.HideOnEscapeHandler; file: org.pdfsam.ui.commons.HideOnEscapeHandler-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljavafx/scene/input/KeyCombination">ESCAPE_COMBO</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/stage/Window">window</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljavafx/stage/Window;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Window">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">window</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/scene/input/KeyEvent;)V"
                       name="handle"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/scene/input/KeyEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">window</op>
                     <op code="call">javafx.stage.Window.isShowing</op>
                     <op code="get_static">org.pdfsam.ui.commons.HideOnEscapeHandler.ESCAPE_COMBO</op>
                     <op code="call">javafx.scene.input.KeyCombination.match</op>
                     <op code="get">window</op>
                     <op code="call">javafx.stage.Window.hide</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">javafx.scene.input.KeyCode.ESCAPE</op>
                     <op code="call">javafx.scene.input.KeyCodeCombination.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.ui.commons.HideOnEscapeHandler.ESCAPE_COMBO</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ShowPdfDescriptorRequestTest"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.ShowPdfDescriptorRequestTest; file: org.pdfsam.ui.commons.ShowPdfDescriptorRequestTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.ShowPdfDescriptorRequest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="notNullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.commons.ShowPdfDescriptorRequest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.commons.ShowPdfDescriptorRequest.getDescriptor</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OpenFileRequestTest"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.OpenFileRequestTest; file: org.pdfsam.ui.commons.OpenFileRequestTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.OpenFileRequest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="notNullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.commons.OpenFileRequest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.commons.OpenFileRequest.getFile</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ClearModuleEvent"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.ClearModuleEvent; file: org.pdfsam.ui.commons.ClearModuleEvent-->
            <attributes>
               <attribute final="true" public="true" static="false" type="Z">clearEverything</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Z)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">clearEverything</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">clearEverything</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RemoveSelectedEvent"><!--Package: org.pdfsam.ui.commons; name: org.pdfsam.ui.commons.RemoveSelectedEvent; file: org.pdfsam.ui.commons.RemoveSelectedEvent-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.news">
         <class id="HideNewsPanelRequest"><!--Package: org.pdfsam.news; name: org.pdfsam.news.HideNewsPanelRequest; file: org.pdfsam.news.HideNewsPanelRequest-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Lorg/pdfsam/news/HideNewsPanelRequest">INSTANCE</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.news.HideNewsPanelRequest.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.news.HideNewsPanelRequest.INSTANCE</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LatestNewsEvent"><!--Package: org.pdfsam.news; name: org.pdfsam.news.LatestNewsEvent; file: org.pdfsam.news.LatestNewsEvent-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Ljava/util/List">latestNews</attribute>
               <attribute final="true" public="true" static="false" type="Z">isUpToDate</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/List;Z)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">java.util.Collections.unmodifiableList</op>
                     <op code="put">latestNews</op>
                     <op code="put">isUpToDate</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ShowNewsPanelRequest"><!--Package: org.pdfsam.news; name: org.pdfsam.news.ShowNewsPanelRequest; file: org.pdfsam.news.ShowNewsPanelRequest-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Lorg/pdfsam/news/ShowNewsPanelRequest">INSTANCE</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.news.ShowNewsPanelRequest.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.news.ShowNewsPanelRequest.INSTANCE</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="NewsData"><!--Package: org.pdfsam.news; name: org.pdfsam.news.NewsData; file: org.pdfsam.news.NewsData-->
            <attributes>
               <attribute final="false" public="false" static="false" type="I">id</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">title</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">content</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">link</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/time/LocalDate">date</attribute>
               <attribute final="false" public="false" static="false" type="Z">important</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="getId"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">id</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="setId"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.intValue</op>
                     <op code="put">id</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getTitle"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">title</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="setTitle"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">title</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getContent"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">content</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="setContent"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">content</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getLink"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">link</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="setLink"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">link</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/time/LocalDate;"
                       name="getDate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/time/LocalDate</return>
                  <ops>
                     <op code="get">date</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="setDate"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">java.time.format.DateTimeFormatter.BASIC_ISO_DATE</op>
                     <op code="call">java.time.LocalDate.parse</op>
                     <op code="put">date</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isImportant"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">important</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="setImportant"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="put">important</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="FetchLatestNewsRequest"><!--Package: org.pdfsam.news; name: org.pdfsam.news.FetchLatestNewsRequest; file: org.pdfsam.news.FetchLatestNewsRequest-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Lorg/pdfsam/news/FetchLatestNewsRequest">INSTANCE</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.news.FetchLatestNewsRequest.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.news.FetchLatestNewsRequest.INSTANCE</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="NewsServiceConfig"><!--Package: org.pdfsam.news; name: org.pdfsam.news.NewsServiceConfig; file: org.pdfsam.news.NewsServiceConfig-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/news/DefaultNewsService;)Lorg/pdfsam/news/NewsService;"
                       name="news"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/news/DefaultNewsService">?</arg>
                  </args>
                  <return>Lorg/pdfsam/news/NewsService</return>
               </method>
            </methods>
         </class>
         <class id="NewImportantNewsEvent"><!--Package: org.pdfsam.news; name: org.pdfsam.news.NewImportantNewsEvent; file: org.pdfsam.news.NewImportantNewsEvent-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/news/NewsData">news</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/news/NewsData;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/news/NewsData">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">news</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LatestNewsEventTest"><!--Package: org.pdfsam.news; name: org.pdfsam.news.LatestNewsEventTest; file: org.pdfsam.news.LatestNewsEventTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.news.LatestNewsEvent.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="NewImportantNewsEventTest"><!--Package: org.pdfsam.news; name: org.pdfsam.news.NewImportantNewsEventTest; file: org.pdfsam.news.NewImportantNewsEventTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.news.NewImportantNewsEvent.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LatestNewsController"><!--Package: org.pdfsam.news; name: org.pdfsam.news.LatestNewsController; file: org.pdfsam.news.LatestNewsController-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/news/NewsService">service</attribute>
               <attribute final="false" public="false" static="false" type="I">currentLatest</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/news/NewsService;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/news/NewsService">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">currentLatest</op>
                     <op code="put">service</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/news/FetchLatestNewsRequest;)V"
                       name="fetchLatestNews"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/news/FetchLatestNewsRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.news.LatestNewsController.LOG</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.slf4j.Logger.debug</op>
                     <op code="get">service</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.concurrent.CompletableFuture.supplyAsync</op>
                     <op code="call">java.util.concurrent.CompletableFuture.thenAcceptAsync</op>
                     <op code="call">java.util.concurrent.CompletableFuture.whenComplete</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/news/ShowNewsPanelRequest;)V"
                       name="onShowNewsPanel"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/news/ShowNewsPanelRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.news.NewsService.getLatestNewsSeen</op>
                     <op code="get">currentLatest</op>
                     <op code="get">service</op>
                     <op code="get">currentLatest</op>
                     <op code="call">org.pdfsam.news.NewsService.setLatestNewsSeen</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.news.LatestNewsController.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DefaultNewsService"><!--Package: org.pdfsam.news; name: org.pdfsam.news.DefaultNewsService; file: org.pdfsam.news.DefaultNewsService-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">NEWS_PATH</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">LATEST_NEWS_ID</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">LATEST_IMPORTANT_NEWS_ID</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/Pdfsam">pdfsam</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/Pdfsam;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/Pdfsam">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">pdfsam</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/List;"
                       name="getLatestNews"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="get_static">com.fasterxml.jackson.jr.ob.JSON.std</op>
                     <op code="get_static">com.fasterxml.jackson.jr.ob.JSON$Feature.READ_ONLY</op>
                     <op code="call">com.fasterxml.jackson.jr.ob.JSON.with</op>
                     <op code="get">pdfsam</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.NEWS_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">java.net.URL.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.io.NetUtils.urlToStream</op>
                     <op code="call">com.fasterxml.jackson.jr.ob.JSON.listOfFrom</op>
                     <op code="get_static">org.pdfsam.news.DefaultNewsService.LOG</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.slf4j.Logger.warn</op>
                     <op code="call">java.util.Collections.emptyList</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="getLatestNewsSeen"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.getInt</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)V"
                       name="setLatestNewsSeen"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.putInt</op>
                     <op code="get_static">org.pdfsam.news.DefaultNewsService.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="getLatestImportantNewsSeen"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.getInt</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)V"
                       name="setLatestImportantNewsSeen"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.putInt</op>
                     <op code="get_static">org.pdfsam.news.DefaultNewsService.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.removeNode</op>
                     <op code="call">java.util.prefs.Preferences.flush</op>
                     <op code="get_static">org.pdfsam.news.DefaultNewsService.LOG</op>
                     <op code="call">org.slf4j.Logger.error</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.news.DefaultNewsService.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DefaultNewsServiceTest"><!--Package: org.pdfsam.news; name: org.pdfsam.news.DefaultNewsServiceTest; file: org.pdfsam.news.DefaultNewsServiceTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/news/DefaultNewsService">victim</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/Pdfsam">pdfsam</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">pdfsam</op>
                     <op code="get">pdfsam</op>
                     <op code="call">org.pdfsam.news.DefaultNewsService.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testSetLatestNewsSeen"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.news.DefaultNewsService.clear</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.news.DefaultNewsService.getLatestNewsSeen</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.news.DefaultNewsService.setLatestNewsSeen</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.news.DefaultNewsService.getLatestNewsSeen</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testSetLatestImportantNewsSeen"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.news.DefaultNewsService.clear</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.news.DefaultNewsService.getLatestImportantNewsSeen</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.news.DefaultNewsService.setLatestImportantNewsSeen</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.news.DefaultNewsService.getLatestImportantNewsSeen</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testClear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.news.DefaultNewsService.setLatestNewsSeen</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.news.DefaultNewsService.getLatestNewsSeen</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.news.DefaultNewsService.clear</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.news.DefaultNewsService.getLatestNewsSeen</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testGetLatestNews"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">org.apache.commons.io.FileUtils.copyInputStreamToFile</op>
                     <op code="get">pdfsam</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.NEWS_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.io.File.toURI</op>
                     <op code="call">java.net.URI.toString</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.news.DefaultNewsService.getLatestNews</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.pdfsam.news.NewsData.getTitle</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.pdfsam.news.NewsData.getContent</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.pdfsam.news.NewsData.getId</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.pdfsam.news.NewsData.getLink</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.pdfsam.news.NewsData.getDate</op>
                     <op code="call">org.junit.Assert.assertNotNull</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.pdfsam.news.NewsData.isImportant</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="LatestNewsControllerTest"><!--Package: org.pdfsam.news; name: org.pdfsam.news.LatestNewsControllerTest; file: org.pdfsam.news.LatestNewsControllerTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/news/NewsService">service</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/news/LatestNewsController">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">service</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.news.LatestNewsController.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="noCurrentLastShowNewsPanel"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.news.ShowNewsPanelRequest.INSTANCE</op>
                     <op code="call">org.pdfsam.news.LatestNewsController.onShowNewsPanel</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyInt</op>
                     <op code="call">org.pdfsam.news.NewsService.setLatestNewsSeen</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="fetchLatestNews"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.news.NewsData.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.news.NewsData.setId</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.news.NewsService.getLatestNews</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.news.NewsService.getLatestNewsSeen</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.news.FetchLatestNewsRequest.INSTANCE</op>
                     <op code="call">org.pdfsam.news.LatestNewsController.fetchLatestNews</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.news.NewsService.getLatestNews</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="get">isUpToDate</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="get">latestNews</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="get">latestNews</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="fetchLatestNewsWithImportant"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.news.NewsData.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.news.NewsData.setId</op>
                     <op code="call">org.pdfsam.news.NewsData.setImportant</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.news.NewsService.getLatestNews</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.news.NewsService.getLatestNewsSeen</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.news.NewsService.getLatestImportantNewsSeen</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.news.FetchLatestNewsRequest.INSTANCE</op>
                     <op code="call">org.pdfsam.news.LatestNewsController.fetchLatestNews</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.news.NewsService.getLatestNews</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="get">news</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="fetchLatestNewsWithImportantButSeen"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.news.NewsData.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.news.NewsData.setId</op>
                     <op code="call">org.pdfsam.news.NewsData.setImportant</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.news.NewsService.getLatestNews</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.news.NewsService.getLatestNewsSeen</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.news.NewsService.getLatestImportantNewsSeen</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.news.FetchLatestNewsRequest.INSTANCE</op>
                     <op code="call">org.pdfsam.news.LatestNewsController.fetchLatestNews</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.news.NewsService.getLatestNews</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="emptyFetchNews"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.news.NewsService.getLatestNews</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.util.Collections.emptyList</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.news.FetchLatestNewsRequest.INSTANCE</op>
                     <op code="call">org.pdfsam.news.LatestNewsController.fetchLatestNews</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.news.NewsService.getLatestNews</op>
                     <op code="call">org.mockito.Mockito.after</op>
                     <op code="call">org.mockito.verification.VerificationAfterDelay.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullFetchNews"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.news.NewsService.getLatestNews</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.news.FetchLatestNewsRequest.INSTANCE</op>
                     <op code="call">org.pdfsam.news.LatestNewsController.fetchLatestNews</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.news.NewsService.getLatestNews</op>
                     <op code="call">org.mockito.Mockito.after</op>
                     <op code="call">org.mockito.verification.VerificationAfterDelay.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="failingFetchNews"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.news.NewsService.getLatestNews</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.RuntimeException.&lt;init&gt;</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenThrow</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.news.FetchLatestNewsRequest.INSTANCE</op>
                     <op code="call">org.pdfsam.news.LatestNewsController.fetchLatestNews</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.news.NewsService.getLatestNews</op>
                     <op code="call">org.mockito.Mockito.after</op>
                     <op code="call">org.mockito.verification.VerificationAfterDelay.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onShowNewsPanel"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.news.NewsData.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.news.NewsData.setId</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.news.NewsService.getLatestNews</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.news.NewsService.getLatestNewsSeen</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.news.FetchLatestNewsRequest.INSTANCE</op>
                     <op code="call">org.pdfsam.news.LatestNewsController.fetchLatestNews</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.news.ShowNewsPanelRequest.INSTANCE</op>
                     <op code="call">org.pdfsam.news.LatestNewsController.onShowNewsPanel</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.news.NewsService.setLatestNewsSeen</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.pdf">
         <class id="PdfLoadRequestEventTest"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.PdfLoadRequestEventTest; file: org.pdfsam.pdf.PdfLoadRequestEventTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="add"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.getDocuments</op>
                     <op code="call">org.junit.Assert.assertNotNull</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.getDocuments</op>
                     <op code="call">java.util.Collection.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.add</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.getDocuments</op>
                     <op code="call">java.util.Collection.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfLoadController"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.PdfLoadController; file: org.pdfsam.pdf.PdfLoadController-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/PdfLoadService">loadService</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/concurrent/ExecutorService">executor</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Map">requiredLoadData</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/List;Lorg/pdfsam/pdf/PdfLoadService;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                     <arg type="Lorg/pdfsam/pdf/PdfLoadService">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">java.util.concurrent.Executors.newSingleThreadExecutor</op>
                     <op code="put">executor</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="put">requiredLoadData</op>
                     <op code="put">loadService</op>
                     <op code="call">java.util.List.forEach</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/pdf/PdfLoadRequestEvent;)V"
                       name="request"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/pdf/PdfLoadRequestEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.pdf.PdfLoadController.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.getDocuments</op>
                     <op code="call">java.util.Collection.forEach</op>
                     <op code="get">executor</op>
                     <op code="call">java.util.concurrent.ExecutorService.execute</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/pdf/PdfFilesListLoadRequest;)V"
                       name="request"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/pdf/PdfFilesListLoadRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.pdf.PdfLoadController.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="get">list</op>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="get">executor</op>
                     <op code="call">java.util.concurrent.ExecutorService.execute</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ShutdownEvent;)V"
                       name="onShutdown"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ShutdownEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">executor</op>
                     <op code="call">java.util.concurrent.ExecutorService.shutdownNow</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.pdf.PdfLoadController.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfFilesListLoadRequest"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.PdfFilesListLoadRequest; file: org.pdfsam.pdf.PdfFilesListLoadRequest-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Ljava/nio/file/Path">list</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">ownerModule</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;Ljava/nio/file/Path;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/nio/file/Path">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">ownerModule</op>
                     <op code="put">list</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getOwnerModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">ownerModule</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BaseFilesDroppedEvent"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.BaseFilesDroppedEvent; file: org.pdfsam.pdf.BaseFilesDroppedEvent-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Ljava/util/List">files</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">ownerModule</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;Ljava/util/List;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="put">ownerModule</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Collections.emptyList</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="put">files</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getOwnerModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">ownerModule</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DefaultSAMBoxLoaderTest"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.DefaultSAMBoxLoaderTest; file: org.pdfsam.pdf.DefaultSAMBoxLoaderTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/sambox/pdmodel/PDDocument">document</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/sambox/pdmodel/PDDocumentInformation">info</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">descriptor</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">document</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="put">descriptor</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">info</op>
                     <op code="get">document</op>
                     <op code="call">org.sejda.sambox.pdmodel.PDDocument.getDocumentInformation</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get">info</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">document</op>
                     <op code="call">org.sejda.sambox.pdmodel.PDDocument.getVersion</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">document</op>
                     <op code="call">org.sejda.sambox.pdmodel.PDDocument.getNumberOfPages</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">info</op>
                     <op code="call">org.sejda.sambox.pdmodel.PDDocumentInformation.getAuthor</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">info</op>
                     <op code="call">org.sejda.sambox.pdmodel.PDDocumentInformation.getSubject</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">info</op>
                     <op code="call">org.sejda.sambox.pdmodel.PDDocumentInformation.getCreationDate</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.util.GregorianCalendar.&lt;init&gt;</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="accept"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.pdf.DefaultSAMBoxLoader.&lt;init&gt;</op>
                     <op code="get">document</op>
                     <op code="get">descriptor</op>
                     <op code="call">org.pdfsam.pdf.DefaultSAMBoxLoader.accept</op>
                     <op code="get">descriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.pages</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.getValue</op>
                     <op code="call">java.lang.Integer.intValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="get">descriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getVersion</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">descriptor</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.AUTHOR</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getInformation</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">descriptor</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.SUBJECT</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getInformation</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">descriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getInformation</op>
                     <op code="call">org.junit.Assert.assertNotNull</op>
                     <op code="get">descriptor</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.KEYWORDS</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getInformation</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">descriptor</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.CREATOR</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getInformation</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">descriptor</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.TITLE</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getInformation</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfFilesListLoadRequestTest"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.PdfFilesListLoadRequestTest; file: org.pdfsam.pdf.PdfFilesListLoadRequestTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullFile"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.pdf.PdfFilesListLoadRequest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="blankModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.pdf.PdfFilesListLoadRequest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="valid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.pdf.PdfFilesListLoadRequest.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfListParserTest"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.PdfListParserTest; file: org.pdfsam.pdf.PdfListParserTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">tmp</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">tmp</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullInput"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.pdf.PdfListParser.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.pdf.PdfListParser.apply</op>
                     <op code="call">java.util.List.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">tmp</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="get">tmp</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="get">tmp</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="get">tmp</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.io.File.toPath</op>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">java.util.List.add</op>
                     <op code="call">java.util.List.add</op>
                     <op code="call">java.util.List.add</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">java.util.List.add</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">java.util.List.add</op>
                     <op code="get">tmp</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">java.util.List.add</op>
                     <op code="get">tmp</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFolder</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">java.util.List.add</op>
                     <op code="call">java.nio.file.Files.write</op>
                     <op code="call">org.pdfsam.pdf.PdfListParser.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.pdf.PdfListParser.apply</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.hamcrest.Matchers.hasItems</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfDocumentDescriptorTest"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.PdfDocumentDescriptorTest; file: org.pdfsam.pdf.PdfDocumentDescriptorTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">victim</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">victimNoPwd</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/io/File">file</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">file</op>
                     <op code="get">file</op>
                     <op code="call">java.io.File.getName</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">file</op>
                     <op code="call">java.io.File.isFile</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">file</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptor</op>
                     <op code="put">victim</op>
                     <op code="get">file</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="put">victimNoPwd</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="illegal"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="initialState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.hasReferences</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.INITIAL</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.loadingStatus</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getPassword</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getFileName</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victimNoPwd</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getPassword</op>
                     <op code="call">org.junit.Assert.assertNull</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.retain</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.retain</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.hasReferences</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.releaseAll</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.hasReferences</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="retainAndRelease"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.retain</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.retain</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.release</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="noVersionString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getVersionString</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getVersionString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_5</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.setVersion</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getVersionString</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isBlank</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveValidStatus"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.INITIAL</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.loadingStatus</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.REQUESTED</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.moveStatusTo</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.REQUESTED</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.loadingStatus</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="moveInvalidStatus"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.INITIAL</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.loadingStatus</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.LOADING</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.moveStatusTo</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="toPdfSource"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.toPdfFileSource</op>
                     <op code="get">file</op>
                     <op code="call">org.sejda.model.input.PdfFileSource.getSource</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.input.PdfFileSource.getPassword</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="FailToPdfSource"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">file</op>
                     <op code="call">java.io.File.isFile</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.FALSE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.toPdfFileSource</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="informationDictionary"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.HashMap.put</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.setInformationDictionary</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getInformation</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="putInformation"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.putInformation</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getInformation</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfLoadRequestEvent"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.PdfLoadRequestEvent; file: org.pdfsam.pdf.PdfLoadRequestEvent-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Collection">documents</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">ownerModule</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">java.util.concurrent.ConcurrentLinkedQueue.&lt;init&gt;</op>
                     <op code="put">documents</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="put">ownerModule</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getOwnerModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">ownerModule</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/pdf/PdfDocumentDescriptor;)Z"
                       name="add"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get">documents</op>
                     <op code="call">java.util.Collection.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Collection;)Z"
                       name="addAll"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Collection">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get">documents</op>
                     <op code="call">java.util.Collection.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Collection;"
                       name="getDocuments"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/Collection</return>
                  <ops>
                     <op code="get">documents</op>
                     <op code="call">java.util.Collections.unmodifiableCollection</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfServiceConfig"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.PdfServiceConfig; file: org.pdfsam.pdf.PdfServiceConfig-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/pdf/PdfLoadService;"
                       name="loadService"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Lorg/pdfsam/pdf/PdfLoadService</return>
                  <ops>
                     <op code="call">org.pdfsam.pdf.DefaultSAMBoxLoader.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.pdf.BookmarksLevelSAMBoxLoader.&lt;init&gt;</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.pdf.SAMBoxPdfLoadService.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DefaultSAMBoxLoader"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.DefaultSAMBoxLoader; file: org.pdfsam.pdf.DefaultSAMBoxLoader-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Lorg/apache/commons/lang3/time/FastDateFormat">FORMATTER</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/sambox/pdmodel/PDDocument;Lorg/pdfsam/pdf/PdfDocumentDescriptor;)V"
                       name="accept"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/sambox/pdmodel/PDDocument">?</arg>
                     <arg type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.sambox.pdmodel.PDDocument.getNumberOfPages</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.pages</op>
                     <op code="call">org.sejda.sambox.pdmodel.PDDocument.getVersion</op>
                     <op code="call">org.pdfsam.pdf.DefaultSAMBoxLoader.getVersion</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.setVersion</op>
                     <op code="call">org.sejda.sambox.pdmodel.PDDocument.getDocumentInformation</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.TITLE</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.sejda.sambox.pdmodel.PDDocumentInformation.getTitle</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.putInformation</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.AUTHOR</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.sejda.sambox.pdmodel.PDDocumentInformation.getAuthor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.putInformation</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.CREATOR</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.sejda.sambox.pdmodel.PDDocumentInformation.getCreator</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.putInformation</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.SUBJECT</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.sejda.sambox.pdmodel.PDDocumentInformation.getSubject</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.putInformation</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.KEYWORDS</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.sejda.sambox.pdmodel.PDDocumentInformation.getKeywords</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.putInformation</op>
                     <op code="call">org.sejda.sambox.pdmodel.PDDocumentInformation.getProducer</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.putInformation</op>
                     <op code="call">org.sejda.sambox.pdmodel.PDDocumentInformation.getCreationDate</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="get_static">org.pdfsam.pdf.DefaultSAMBoxLoader.FORMATTER</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/RequiredPdfData;"
                       name="key"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/RequiredPdfData</return>
                  <ops>
                     <op code="get_static">org.pdfsam.module.RequiredPdfData.DEFAULT</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lorg/sejda/model/pdf/PdfVersion;"
                       name="getVersion"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lorg/sejda/model/pdf/PdfVersion</return>
                  <ops>
                     <op code="call">org.sejda.model.pdf.PdfVersion.values</op>
                     <op code="call">org.sejda.model.pdf.PdfVersion.getVersionString</op>
                     <op code="call">java.lang.String.equals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.time.FastDateFormat.getDateTimeInstance</op>
                     <op code="put_static">org.pdfsam.pdf.DefaultSAMBoxLoader.FORMATTER</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BookmarksLevelSAMBoxLoaderTest"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.BookmarksLevelSAMBoxLoaderTest; file: org.pdfsam.pdf.BookmarksLevelSAMBoxLoaderTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/sambox/pdmodel/PDDocument">document</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">descriptor</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">descriptor</op>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">org.sejda.io.SeekableSources.inMemorySeekableSourceFrom</op>
                     <op code="call">org.sejda.sambox.input.PDFParser.parse</op>
                     <op code="put">document</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="tearDown"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">document</op>
                     <op code="call">org.sejda.commons.util.IOUtils.closeQuietly</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="accept"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.pdf.BookmarksLevelSAMBoxLoader.&lt;init&gt;</op>
                     <op code="get">document</op>
                     <op code="get">descriptor</op>
                     <op code="call">org.pdfsam.pdf.BookmarksLevelSAMBoxLoader.accept</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="get">descriptor</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.setValidBookmarksLevels</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.hamcrest.Matchers.hasItems</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfListParser"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.PdfListParser; file: org.pdfsam.pdf.PdfListParser-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/nio/file/Path;)Ljava/util/List;"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/nio/file/Path">?</arg>
                  </args>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="call">java.util.Objects.isNull</op>
                     <op code="call">java.util.Collections.emptyList</op>
                     <op code="call">java.nio.file.Files.lines</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.function.Predicate.not</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Collectors.toList</op>
                     <op code="call">java.util.stream.Stream.collect</op>
                     <op code="call">java.lang.RuntimeException.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfLoadControllerTest"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.PdfLoadControllerTest; file: org.pdfsam.pdf.PdfLoadControllerTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/PdfLoadService">loadService</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/PdfLoadController">victim</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">tmp</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">tmp</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">loadService</op>
                     <op code="call">org.pdfsam.test.DefaultPriorityTestModule.&lt;init&gt;</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="get">loadService</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadController.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="request"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.add</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.add</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadController.request</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.REQUESTED</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.moveStatusTo</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.REQUESTED</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.moveStatusTo</op>
                     <op code="get">loadService</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyCollection</op>
                     <op code="get_static">org.pdfsam.module.RequiredPdfData.DEFAULT</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadService.load</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="emptyList"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">tmp</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.io.File.toPath</op>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="call">java.util.List.add</op>
                     <op code="call">java.nio.file.Files.write</op>
                     <op code="call">org.pdfsam.pdf.PdfFilesListLoadRequest.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadController.request</op>
                     <op code="call">org.mockito.Mockito.after</op>
                     <op code="call">org.mockito.verification.VerificationAfterDelay.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validList"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">tmp</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="get">tmp</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.io.File.toPath</op>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">java.util.List.add</op>
                     <op code="call">java.nio.file.Files.write</op>
                     <op code="call">org.pdfsam.pdf.PdfFilesListLoadRequest.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadController.request</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.getDocuments</op>
                     <op code="call">java.util.Collection.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MultipleFilesDroppedEvent"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.MultipleFilesDroppedEvent; file: org.pdfsam.pdf.MultipleFilesDroppedEvent-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;Ljava/util/List;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.pdf.BaseFilesDroppedEvent.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BookmarksLevelSAMBoxLoader"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.BookmarksLevelSAMBoxLoader; file: org.pdfsam.pdf.BookmarksLevelSAMBoxLoader-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/sambox/pdmodel/PDDocument;Lorg/pdfsam/pdf/PdfDocumentDescriptor;)V"
                       name="accept"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/sambox/pdmodel/PDDocument">?</arg>
                     <arg type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.impl.sambox.component.OutlineUtils.getOutlineLevelsWithPageDestination</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.setValidBookmarksLevels</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/RequiredPdfData;"
                       name="key"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/RequiredPdfData</return>
                  <ops>
                     <op code="get_static">org.pdfsam.module.RequiredPdfData.BOOMARKS</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SingleFileDroppedEvent"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.SingleFileDroppedEvent; file: org.pdfsam.pdf.SingleFileDroppedEvent-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;Ljava/util/List;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.pdf.BaseFilesDroppedEvent.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SAMBoxPdfLoadService"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.SAMBoxPdfLoadService; file: org.pdfsam.pdf.SAMBoxPdfLoadService-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/util/Map">consumers</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/util/function/BiConsumer">STARTER</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/util/function/BiConsumer">FINISHER</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/List;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="put">consumers</op>
                     <op code="call">java.util.List.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Collection;[Lorg/pdfsam/module/RequiredPdfData;)V"
                       name="load"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Collection">?</arg>
                     <arg type="Lorg/pdfsam/module/RequiredPdfData">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.pdf.SAMBoxPdfLoadService.LOG</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.slf4j.Logger.debug</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="get">consumers</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="get_static">org.pdfsam.pdf.SAMBoxPdfLoadService.STARTER</op>
                     <op code="call">java.util.stream.Stream.reduce</op>
                     <op code="get_static">org.pdfsam.pdf.SAMBoxPdfLoadService.FINISHER</op>
                     <op code="call">java.util.function.BiConsumer.andThen</op>
                     <op code="call">java.util.Collection.iterator</op>
                     <op code="call">java.util.Iterator.hasNext</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.hasReferences</op>
                     <op code="get_static">org.pdfsam.pdf.SAMBoxPdfLoadService.LOG</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getFileName</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.LOADING</op>
                     <op code="call">org.pdfsam.pdf.SAMBoxPdfLoadService.fxMoveStatusTo</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getFile</op>
                     <op code="call">org.sejda.io.FileChannelSeekableSource.&lt;init&gt;</op>
                     <op code="call">org.sejda.io.BufferedSeekableSource.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getPassword</op>
                     <op code="call">org.sejda.sambox.input.PDFParser.parse</op>
                     <op code="call">java.util.function.BiConsumer.accept</op>
                     <op code="call">org.sejda.sambox.pdmodel.PDDocument.close</op>
                     <op code="call">org.sejda.sambox.pdmodel.PDDocument.close</op>
                     <op code="call">java.lang.Throwable.addSuppressed</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.ENCRYPTED</op>
                     <op code="call">org.pdfsam.pdf.SAMBoxPdfLoadService.fxMoveStatusTo</op>
                     <op code="get_static">org.pdfsam.pdf.SAMBoxPdfLoadService.LOG</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getFileName</op>
                     <op code="call">org.slf4j.Logger.warn</op>
                     <op code="get_static">org.pdfsam.pdf.SAMBoxPdfLoadService.LOG</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getFileName</op>
                     <op code="call">org.slf4j.Logger.error</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.WITH_ERRORS</op>
                     <op code="call">org.pdfsam.pdf.SAMBoxPdfLoadService.fxMoveStatusTo</op>
                     <op code="get_static">org.pdfsam.pdf.SAMBoxPdfLoadService.LOG</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getFileName</op>
                     <op code="call">org.slf4j.Logger.info</op>
                     <op code="get_static">org.pdfsam.pdf.SAMBoxPdfLoadService.LOG</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getFileName</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="get_static">org.pdfsam.pdf.SAMBoxPdfLoadService.LOG</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.slf4j.Logger.debug</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/pdf/PdfDocumentDescriptor;Lorg/pdfsam/pdf/PdfDescriptorLoadingStatus;)V"
                       name="fxMoveStatusTo"
                       static="true"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">?</arg>
                     <arg type="Lorg/pdfsam/pdf/PdfDescriptorLoadingStatus">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.application.Platform.runLater</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.pdf.SAMBoxPdfLoadService.LOG</op>
                     <op code="put_static">org.pdfsam.pdf.SAMBoxPdfLoadService.STARTER</op>
                     <op code="put_static">org.pdfsam.pdf.SAMBoxPdfLoadService.FINISHER</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SingleFileDroppedEventTest"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.SingleFileDroppedEventTest; file: org.pdfsam.pdf.SingleFileDroppedEventTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="blankModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Collections.emptyList</op>
                     <op code="call">org.pdfsam.pdf.SingleFileDroppedEvent.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="valid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Collections.emptyList</op>
                     <op code="call">org.pdfsam.pdf.SingleFileDroppedEvent.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfDocumentDescriptor"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.PdfDocumentDescriptor; file: org.pdfsam.pdf.PdfDocumentDescriptor-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/support/ObservableAtomicReference">loadingStatus</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/concurrent/atomic/AtomicInteger">references</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/support/ObservableAtomicReference">pages</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">password</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/io/File">file</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/pdf/PdfVersion">version</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Map">metadata</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/SortedSet">validBookmarksLevels</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/io/File;Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.INITIAL</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.&lt;init&gt;</op>
                     <op code="put">loadingStatus</op>
                     <op code="call">java.util.concurrent.atomic.AtomicInteger.&lt;init&gt;</op>
                     <op code="put">references</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.&lt;init&gt;</op>
                     <op code="put">pages</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="put">metadata</op>
                     <op code="call">java.util.Collections.emptySortedSet</op>
                     <op code="put">validBookmarksLevels</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">file</op>
                     <op code="put">password</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getFileName"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">file</op>
                     <op code="call">java.io.File.getName</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/input/PdfFileSource;"
                       name="toPdfFileSource"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/sejda/model/input/PdfFileSource</return>
                  <ops>
                     <op code="get">file</op>
                     <op code="get">password</op>
                     <op code="call">org.sejda.model.input.PdfFileSource.newInstanceWithPassword</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="get">file</op>
                     <op code="call">java.io.File.getName</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.sejda.conversion.exception.ConversionException.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Ljava/lang/String;"
                       name="getInformation"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">metadata</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="setInformationDictionary"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">metadata</op>
                     <op code="call">java.util.Map.clear</op>
                     <op code="get">metadata</op>
                     <op code="call">java.util.Map.putAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/String;)V"
                       name="putInformation"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">metadata</op>
                     <op code="call">java.util.Map.put</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)V"
                       name="pages"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">pages</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.set</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/support/ObservableAtomicReference;"
                       name="loadingStatus"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/support/ObservableAtomicReference</return>
                  <ops>
                     <op code="get">loadingStatus</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/support/ObservableAtomicReference;"
                       name="pages"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/support/ObservableAtomicReference</return>
                  <ops>
                     <op code="get">pages</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/pdf/PdfDescriptorLoadingStatus;)V"
                       name="moveStatusTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/pdf/PdfDescriptorLoadingStatus">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">loadingStatus</op>
                     <op code="get">loadingStatus</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.getValue</op>
                     <op code="call">org.pdfsam.pdf.PdfDescriptorLoadingStatus.moveTo</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.set</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getPassword"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">password</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="setPassword"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">password</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="hasPassword"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">password</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotBlank</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getVersionString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">version</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.orElse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/pdf/PdfVersion;"
                       name="getVersion"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/sejda/model/pdf/PdfVersion</return>
                  <ops>
                     <op code="get">version</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/pdf/PdfVersion;)V"
                       name="setVersion"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/pdf/PdfVersion">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">version</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/io/File;"
                       name="getFile"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/io/File</return>
                  <ops>
                     <op code="get">file</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Set;)V"
                       name="setValidBookmarksLevels"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Set">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.TreeSet.&lt;init&gt;</op>
                     <op code="put">validBookmarksLevels</op>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="call">java.util.Set.stream</op>
                     <op code="get">validBookmarksLevels</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/SortedSet;"
                       name="getValidBookmarksLevels"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/SortedSet</return>
                  <ops>
                     <op code="get">validBookmarksLevels</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="hasReferences"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">references</op>
                     <op code="call">java.util.concurrent.atomic.AtomicInteger.get</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="release"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">references</op>
                     <op code="call">java.util.concurrent.atomic.AtomicInteger.decrementAndGet</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="releaseAll"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">references</op>
                     <op code="call">java.util.concurrent.atomic.AtomicInteger.set</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/pdf/PdfDocumentDescriptor;"
                       name="retain"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/pdf/PdfDocumentDescriptor</return>
                  <ops>
                     <op code="get">references</op>
                     <op code="call">java.util.concurrent.atomic.AtomicInteger.incrementAndGet</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/File;Ljava/lang/String;)Lorg/pdfsam/pdf/PdfDocumentDescriptor;"
                       name="newDescriptor"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lorg/pdfsam/pdf/PdfDocumentDescriptor</return>
                  <ops>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/File;)Lorg/pdfsam/pdf/PdfDocumentDescriptor;"
                       name="newDescriptorNoPassword"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>Lorg/pdfsam/pdf/PdfDocumentDescriptor</return>
                  <ops>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SAMBoxPdfLoadServiceTest"><!--Package: org.pdfsam.pdf; name: org.pdfsam.pdf.SAMBoxPdfLoadServiceTest; file: org.pdfsam.pdf.SAMBoxPdfLoadServiceTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/SAMBoxPdfLoadService">victim</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeJavaFxThreadRule">initJavaFxThread</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.pdf.DefaultSAMBoxLoader.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.pdf.BookmarksLevelSAMBoxLoader.&lt;init&gt;</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.pdf.SAMBoxPdfLoadService.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                     <op code="call">org.pdfsam.test.InitializeJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">initJavaFxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="afterClass"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.clear</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="load"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">org.apache.commons.io.FileUtils.copyInputStreamToFile</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.INITIAL</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.loadingStatus</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.REQUESTED</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.moveStatusTo</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.module.RequiredPdfData.DEFAULT</op>
                     <op code="call">org.pdfsam.pdf.SAMBoxPdfLoadService.load</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertNotNull</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Duration.seconds</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Timeout.timeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.WaitFor.waitOrTimeout</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.pages</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.getValue</op>
                     <op code="call">java.lang.Integer.intValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.AUTHOR</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getInformation</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.PdfMetadataKey.KEYWORDS</op>
                     <op code="call">org.sejda.model.pdf.PdfMetadataKey.getKey</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getInformation</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidPdf"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">org.apache.commons.io.FileUtils.copyInputStreamToFile</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.INITIAL</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.loadingStatus</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.REQUESTED</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.moveStatusTo</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.module.RequiredPdfData.DEFAULT</op>
                     <op code="call">org.pdfsam.pdf.SAMBoxPdfLoadService.load</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertNotNull</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Duration.seconds</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Timeout.timeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.WaitFor.waitOrTimeout</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="encNoPwd"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">org.apache.commons.io.FileUtils.copyInputStreamToFile</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.INITIAL</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.loadingStatus</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.REQUESTED</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.moveStatusTo</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.module.RequiredPdfData.DEFAULT</op>
                     <op code="call">org.pdfsam.pdf.SAMBoxPdfLoadService.load</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertNotNull</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Duration.seconds</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Timeout.timeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.WaitFor.waitOrTimeout</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="encWithPwd"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">org.apache.commons.io.FileUtils.copyInputStreamToFile</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptor</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.INITIAL</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.loadingStatus</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.REQUESTED</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.moveStatusTo</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.module.RequiredPdfData.DEFAULT</op>
                     <op code="call">org.pdfsam.pdf.SAMBoxPdfLoadService.load</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertNotNull</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Duration.seconds</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Timeout.timeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.WaitFor.waitOrTimeout</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">org.apache.commons.io.FileUtils.copyInputStreamToFile</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.INITIAL</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.loadingStatus</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.pdf.PdfDescriptorLoadingStatus.REQUESTED</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.moveStatusTo</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.releaseAll</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.module.RequiredPdfData.DEFAULT</op>
                     <op code="call">org.pdfsam.pdf.SAMBoxPdfLoadService.load</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertNotNull</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Duration.seconds</op>
                     <op code="call">com.google.code.tempusfugit.temporal.Timeout.timeout</op>
                     <op code="call">com.google.code.tempusfugit.temporal.WaitFor.waitOrTimeout</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.module">
         <class id="TaskExecutionRequestEvent"><!--Package: org.pdfsam.module; name: org.pdfsam.module.TaskExecutionRequestEvent; file: org.pdfsam.module.TaskExecutionRequestEvent-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/parameter/base/AbstractParameters">parameters</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">moduleId</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;Lorg/sejda/model/parameter/base/AbstractParameters;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lorg/sejda/model/parameter/base/AbstractParameters">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="put">parameters</op>
                     <op code="put">moduleId</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/parameter/base/AbstractParameters;"
                       name="getParameters"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/sejda/model/parameter/base/AbstractParameters</return>
                  <ops>
                     <op code="get">parameters</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getModuleId"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">moduleId</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="StatefulPreferencesUsageService"><!--Package: org.pdfsam.module; name: org.pdfsam.module.StatefulPreferencesUsageService; file: org.pdfsam.module.StatefulPreferencesUsageService-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/PreferencesUsageDataStore">dataStore</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Map">modulesMap</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/List;Lorg/pdfsam/module/PreferencesUsageDataStore;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                     <arg type="Lorg/pdfsam/module/PreferencesUsageDataStore">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Collectors.toMap</op>
                     <op code="call">java.util.stream.Stream.collect</op>
                     <op code="put">modulesMap</op>
                     <op code="put">dataStore</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="incrementUsageFor"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">dataStore</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.incrementUsageFor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/List;"
                       name="getMostUsed"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="get">dataStore</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.getUsages</op>
                     <op code="call">java.util.List.sort</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Collectors.toList</op>
                     <op code="call">java.util.stream.Stream.collect</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/List;"
                       name="getMostRecentlyUsed"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="get">dataStore</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.getUsages</op>
                     <op code="call">java.util.List.sort</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Collectors.toList</op>
                     <op code="call">java.util.stream.Stream.collect</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">dataStore</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.clear</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="getTotalUsage"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
                  <ops>
                     <op code="get">dataStore</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.getTotalUsage</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="StatefulPreferencesUsageServiceTest"><!--Package: org.pdfsam.module; name: org.pdfsam.module.StatefulPreferencesUsageServiceTest; file: org.pdfsam.module.StatefulPreferencesUsageServiceTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/injector/Injector">injector</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.module.StatefulPreferencesUsageServiceTest$Config.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.module.ModuleServiceConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.start</op>
                     <op code="put">injector</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clean"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.module.StatefulPreferencesUsageService.clear</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.clear</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="increment"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.module.StatefulPreferencesUsageService.incrementUsageFor</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.incrementUsageFor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getTotalUsage"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.module.StatefulPreferencesUsageService.getTotalUsage</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.getTotalUsage</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getMostUsed"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.module.ModuleUsage.fistUsage</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.fistUsage</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.fistUsage</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.inc</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.getUsages</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.module.StatefulPreferencesUsageService.getMostUsed</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.pdfsam.module.Module.id</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getMostRecentlyUsed"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.module.ModuleUsage.usage</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.usage</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.usage</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.getUsages</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.module.StatefulPreferencesUsageService.getMostRecentlyUsed</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.pdfsam.module.Module.id</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ModuleUsageTest"><!--Package: org.pdfsam.module; name: org.pdfsam.module.ModuleUsageTest; file: org.pdfsam.module.ModuleUsageTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="lastSeenIsUpdated"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.module.ModuleUsage.fistUsage</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.inc</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.getLastSeen</op>
                     <op code="call">java.lang.Thread.sleep</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.inc</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.getLastSeen</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="TaskExecutionRequestEventTest"><!--Package: org.pdfsam.module; name: org.pdfsam.module.TaskExecutionRequestEventTest; file: org.pdfsam.module.TaskExecutionRequestEventTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/parameter/base/AbstractParameters">params</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testNullParams"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testNullId"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">params</op>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testNull"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testNotNull"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">params</op>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.&lt;init&gt;</op>
                     <op code="get">params</op>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.getParameters</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.getModuleId</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ModuleDescriptorBuilder"><!--Package: org.pdfsam.module; name: org.pdfsam.module.ModuleDescriptorBuilder; file: org.pdfsam.module.ModuleDescriptorBuilder-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/ModuleCategory">category</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="[Lorg/pdfsam/module/ModuleInputOutputType">inputTypes</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">name</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">description</attribute>
               <attribute final="false" public="false" static="false" type="I">priority</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">supportURL</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.DEFAULT</op>
                     <op code="call">org.pdfsam.module.ModulePriority.getPriority</op>
                     <op code="put">priority</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/module/ModuleCategory;)Lorg/pdfsam/module/ModuleDescriptorBuilder;"
                       name="category"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/module/ModuleCategory">?</arg>
                  </args>
                  <return>Lorg/pdfsam/module/ModuleDescriptorBuilder</return>
                  <ops>
                     <op code="put">category</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="([Lorg/pdfsam/module/ModuleInputOutputType;)Lorg/pdfsam/module/ModuleDescriptorBuilder;"
                       name="inputTypes"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/module/ModuleInputOutputType">?</arg>
                  </args>
                  <return>Lorg/pdfsam/module/ModuleDescriptorBuilder</return>
                  <ops>
                     <op code="put">inputTypes</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lorg/pdfsam/module/ModuleDescriptorBuilder;"
                       name="name"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lorg/pdfsam/module/ModuleDescriptorBuilder</return>
                  <ops>
                     <op code="put">name</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lorg/pdfsam/module/ModuleDescriptorBuilder;"
                       name="description"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lorg/pdfsam/module/ModuleDescriptorBuilder</return>
                  <ops>
                     <op code="put">description</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)Lorg/pdfsam/module/ModuleDescriptorBuilder;"
                       name="priority"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>Lorg/pdfsam/module/ModuleDescriptorBuilder</return>
                  <ops>
                     <op code="put">priority</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/module/ModulePriority;)Lorg/pdfsam/module/ModuleDescriptorBuilder;"
                       name="priority"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/module/ModulePriority">?</arg>
                  </args>
                  <return>Lorg/pdfsam/module/ModuleDescriptorBuilder</return>
                  <ops>
                     <op code="call">org.pdfsam.module.ModulePriority.getPriority</op>
                     <op code="put">priority</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lorg/pdfsam/module/ModuleDescriptorBuilder;"
                       name="supportURL"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lorg/pdfsam/module/ModuleDescriptorBuilder</return>
                  <ops>
                     <op code="put">supportURL</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/ModuleDescriptorBuilder;"
                       name="builder"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/ModuleDescriptorBuilder</return>
                  <ops>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/ModuleDescriptor;"
                       name="build"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/ModuleDescriptor</return>
                  <ops>
                     <op code="get">category</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="get">name</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="get">description</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="get">category</op>
                     <op code="get">name</op>
                     <op code="get">description</op>
                     <op code="get">priority</op>
                     <op code="get">supportURL</op>
                     <op code="get">inputTypes</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferencesUsageDataStore"><!--Package: org.pdfsam.module; name: org.pdfsam.module.PreferencesUsageDataStore; file: org.pdfsam.module.PreferencesUsageDataStore-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">USAGE_PATH</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE_USAGE_KEY</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">TASKS_EXECUTED_KEY</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="incrementUsageFor"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.get</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotBlank</op>
                     <op code="get_static">com.fasterxml.jackson.jr.ob.JSON.std</op>
                     <op code="get_static">com.fasterxml.jackson.jr.ob.JSON.std</op>
                     <op code="call">com.fasterxml.jackson.jr.ob.JSON.beanFrom</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.inc</op>
                     <op code="call">com.fasterxml.jackson.jr.ob.JSON.asString</op>
                     <op code="call">java.util.prefs.Preferences.put</op>
                     <op code="get_static">com.fasterxml.jackson.jr.ob.JSON.std</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.fistUsage</op>
                     <op code="call">com.fasterxml.jackson.jr.ob.JSON.asString</op>
                     <op code="call">java.util.prefs.Preferences.put</op>
                     <op code="get_static">org.pdfsam.module.PreferencesUsageDataStore.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.incrementTotalUsage</op>
                     <op code="get_static">org.pdfsam.module.PreferencesUsageDataStore.LOG</op>
                     <op code="call">org.slf4j.Logger.error</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.incrementTotalUsage</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.incrementTotalUsage</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/List;"
                       name="getUsages"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="call">java.util.prefs.Preferences.childrenNames</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.stream.Stream.parallel</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Collectors.toList</op>
                     <op code="call">java.util.stream.Stream.collect</op>
                     <op code="call">java.util.List.iterator</op>
                     <op code="call">java.util.Iterator.hasNext</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="get_static">com.fasterxml.jackson.jr.ob.JSON.std</op>
                     <op code="call">com.fasterxml.jackson.jr.ob.JSON.beanFrom</op>
                     <op code="call">java.util.List.add</op>
                     <op code="get_static">org.pdfsam.module.PreferencesUsageDataStore.LOG</op>
                     <op code="call">org.slf4j.Logger.error</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.removeNode</op>
                     <op code="call">java.util.prefs.Preferences.flush</op>
                     <op code="get_static">org.pdfsam.module.PreferencesUsageDataStore.LOG</op>
                     <op code="call">org.slf4j.Logger.error</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="incrementTotalUsage"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.getLong</op>
                     <op code="call">java.util.prefs.Preferences.putLong</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="getTotalUsage"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
                  <ops>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.getLong</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ShutdownEvent;)V"
                       name="onShutdown"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ShutdownEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.flush</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="flush"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="get_static">org.pdfsam.module.PreferencesUsageDataStore.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="call">java.util.prefs.Preferences.flush</op>
                     <op code="get_static">org.pdfsam.module.PreferencesUsageDataStore.LOG</op>
                     <op code="call">org.slf4j.Logger.error</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.module.PreferencesUsageDataStore.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ModuleServiceConfig"><!--Package: org.pdfsam.module; name: org.pdfsam.module.ModuleServiceConfig; file: org.pdfsam.module.ModuleServiceConfig-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/List;Lorg/pdfsam/module/PreferencesUsageDataStore;)Lorg/pdfsam/module/UsageService;"
                       name="usageService"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                     <arg type="Lorg/pdfsam/module/PreferencesUsageDataStore">?</arg>
                  </args>
                  <return>Lorg/pdfsam/module/UsageService</return>
                  <ops>
                     <op code="call">org.pdfsam.module.StatefulPreferencesUsageService.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="StatefulPreferencesUsageServiceTest$Config"><!--Package: org.pdfsam.module; name: org.pdfsam.module.StatefulPreferencesUsageServiceTest$Config; file: org.pdfsam.module.StatefulPreferencesUsageServiceTest$Config-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/PreferencesUsageDataStore;"
                       name="dataStore"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/PreferencesUsageDataStore</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/Module;"
                       name="module1"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/Module</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.module.Module.id</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.builder</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.name</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.description</op>
                     <op code="get_static">org.pdfsam.module.ModuleCategory.SPLIT</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.category</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.DEFAULT</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.priority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.build</op>
                     <op code="call">org.pdfsam.module.Module.descriptor</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/Module;"
                       name="module2"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/Module</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.module.Module.id</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.builder</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.name</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.description</op>
                     <op code="get_static">org.pdfsam.module.ModuleCategory.MERGE</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.category</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.HIGH</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.priority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.build</op>
                     <op code="call">org.pdfsam.module.Module.descriptor</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ModuleUsage"><!--Package: org.pdfsam.module; name: org.pdfsam.module.ModuleUsage; file: org.pdfsam.module.ModuleUsage-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">moduleId</attribute>
               <attribute final="false" public="false" static="false" type="J">lastSeen</attribute>
               <attribute final="false" public="false" static="false" type="J">totalUsed</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">lastSeen</op>
                     <op code="put">totalUsed</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getModuleId"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">moduleId</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="setModuleId"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">moduleId</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="getLastSeen"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
                  <ops>
                     <op code="get">lastSeen</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(J)V"
                       name="setLastSeen"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="J">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">lastSeen</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()J"
                       name="getTotalUsed"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>J</return>
                  <ops>
                     <op code="get">totalUsed</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(J)V"
                       name="setTotalUsed"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="J">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">totalUsed</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/ModuleUsage;"
                       name="inc"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Lorg/pdfsam/module/ModuleUsage</return>
                  <ops>
                     <op code="get">totalUsed</op>
                     <op code="put">totalUsed</op>
                     <op code="call">java.lang.System.currentTimeMillis</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.setLastSeen</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lorg/pdfsam/module/ModuleUsage;"
                       name="fistUsage"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lorg/pdfsam/module/ModuleUsage</return>
                  <ops>
                     <op code="call">java.lang.System.currentTimeMillis</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.usage</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.setModuleId</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.inc</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;J)Lorg/pdfsam/module/ModuleUsage;"
                       name="usage"
                       static="true"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="J">?</arg>
                  </args>
                  <return>Lorg/pdfsam/module/ModuleUsage</return>
                  <ops>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.setModuleId</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.setLastSeen</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferencesUsageDataStoreTest"><!--Package: org.pdfsam.module; name: org.pdfsam.module.PreferencesUsageDataStoreTest; file: org.pdfsam.module.PreferencesUsageDataStoreTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/PreferencesUsageDataStore">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.clear</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="incrementUsageFor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.incrementUsageFor</op>
                     <op code="get_static">com.fasterxml.jackson.jr.ob.JSON.std</op>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.get</op>
                     <op code="call">com.fasterxml.jackson.jr.ob.JSON.beanFrom</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.getTotalUsed</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.getLastSeen</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="multipleIncrementUsageFor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.incrementUsageFor</op>
                     <op code="get_static">com.fasterxml.jackson.jr.ob.JSON.std</op>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.get</op>
                     <op code="call">com.fasterxml.jackson.jr.ob.JSON.beanFrom</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.flush</op>
                     <op code="call">java.lang.Thread.sleep</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.incrementUsageFor</op>
                     <op code="get_static">com.fasterxml.jackson.jr.ob.JSON.std</op>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.get</op>
                     <op code="call">com.fasterxml.jackson.jr.ob.JSON.beanFrom</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.getTotalUsed</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.getLastSeen</op>
                     <op code="call">org.pdfsam.module.ModuleUsage.getLastSeen</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testClear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.incrementUsageFor</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.clear</op>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.get</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isBlank</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="multipleClear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.incrementUsageFor</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.clear</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.incrementUsageFor</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.clear</op>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.get</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isBlank</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getUsages"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.incrementUsageFor</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.incrementUsageFor</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.incrementUsageFor</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.getUsages</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getTotalUsages"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.incrementUsageFor</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.incrementUsageFor</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.incrementUsageFor</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.PreferencesUsageDataStore.getTotalUsage</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ModulePriorityTest"><!--Package: org.pdfsam.module; name: org.pdfsam.module.ModulePriorityTest; file: org.pdfsam.module.ModulePriorityTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="order"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.module.ModulePriority.HIGH</op>
                     <op code="call">org.pdfsam.module.ModulePriority.getPriority</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.DEFAULT</op>
                     <op code="call">org.pdfsam.module.ModulePriority.getPriority</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.HIGH</op>
                     <op code="call">org.pdfsam.module.ModulePriority.getPriority</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.LOW</op>
                     <op code="call">org.pdfsam.module.ModulePriority.getPriority</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.DEFAULT</op>
                     <op code="call">org.pdfsam.module.ModulePriority.getPriority</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.LOW</op>
                     <op code="call">org.pdfsam.module.ModulePriority.getPriority</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ModuleKeyValueItemTest"><!--Package: org.pdfsam.module; name: org.pdfsam.module.ModuleKeyValueItemTest; file: org.pdfsam.module.ModuleKeyValueItemTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="constructor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.HighPriorityTestModule.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.module.ModuleKeyValueItem.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.module.ModuleKeyValueItem.getKey</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.module.ModuleKeyValueItem.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ClearUsageController"><!--Package: org.pdfsam.module; name: org.pdfsam.module.ClearUsageController; file: org.pdfsam.module.ClearUsageController-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/UsageService">service</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/module/UsageService;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/module/UsageService">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">service</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/module/ClearUsageRequestEvent;)V"
                       name="request"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/module/ClearUsageRequestEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.module.ClearUsageController.LOG</op>
                     <op code="call">org.slf4j.Logger.debug</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.module.UsageService.clear</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.module.ClearUsageController.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ClearUsageControllerTest"><!--Package: org.pdfsam.module; name: org.pdfsam.module.ClearUsageControllerTest; file: org.pdfsam.module.ClearUsageControllerTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/ClearUsageController">victim</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/UsageService">service</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">service</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.module.ClearUsageController.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.module.ClearUsageRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.module.ClearUsageController.request</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.module.UsageService.clear</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ClearUsageRequestEvent"><!--Package: org.pdfsam.module; name: org.pdfsam.module.ClearUsageRequestEvent; file: org.pdfsam.module.ClearUsageRequestEvent-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ModuleKeyValueItem"><!--Package: org.pdfsam.module; name: org.pdfsam.module.ModuleKeyValueItem; file: org.pdfsam.module.ModuleKeyValueItem-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/module/Module;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/module/Module">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.module.Module.id</op>
                     <op code="call">org.pdfsam.module.Module.descriptor</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.getName</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ModuleDescriptor"><!--Package: org.pdfsam.module; name: org.pdfsam.module.ModuleDescriptor; file: org.pdfsam.module.ModuleDescriptor-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">name</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">description</attribute>
               <attribute final="false" public="false" static="false" type="I">priority</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">supportURL</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Ljava/util/List">inputTypes</attribute>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/module/ModuleCategory">category</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/module/ModuleCategory;Ljava/lang/String;Ljava/lang/String;ILjava/lang/String;[Lorg/pdfsam/module/ModuleInputOutputType;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/module/ModuleCategory">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="I">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lorg/pdfsam/module/ModuleInputOutputType">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.DEFAULT</op>
                     <op code="call">org.pdfsam.module.ModulePriority.getPriority</op>
                     <op code="put">priority</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="get_static">org.pdfsam.module.ModuleCategory.OTHER</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="put">category</op>
                     <op code="put">name</op>
                     <op code="put">description</op>
                     <op code="put">priority</op>
                     <op code="put">supportURL</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.filter</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.orElseGet</op>
                     <op code="put">inputTypes</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getName"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">name</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getDescription"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">description</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="getPriority"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">priority</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/Optional;"
                       name="getSupportURL"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/Optional</return>
                  <ops>
                     <op code="get">supportURL</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultIfBlank</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/module/ModuleInputOutputType;)Z"
                       name="hasInputType"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/module/ModuleInputOutputType">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get">inputTypes</op>
                     <op code="call">java.util.List.contains</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ModuleDescriptorBuilderTest"><!--Package: org.pdfsam.module; name: org.pdfsam.module.ModuleDescriptorBuilderTest; file: org.pdfsam.module.ModuleDescriptorBuilderTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="buildNullCategory"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.builder</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.category</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.description</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.name</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.DEFAULT</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.priority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.supportURL</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.build</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="buildNullName"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.builder</op>
                     <op code="get_static">org.pdfsam.module.ModuleCategory.MERGE</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.category</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.description</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.name</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.DEFAULT</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.priority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.supportURL</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.build</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="buildNullDesctription"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.builder</op>
                     <op code="get_static">org.pdfsam.module.ModuleCategory.MERGE</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.category</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.description</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.name</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.DEFAULT</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.priority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.supportURL</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.build</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="buildBlankName"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.builder</op>
                     <op code="get_static">org.pdfsam.module.ModuleCategory.MERGE</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.category</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.description</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.name</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.DEFAULT</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.priority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.supportURL</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.build</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="buildBlankDesctription"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.builder</op>
                     <op code="get_static">org.pdfsam.module.ModuleCategory.MERGE</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.category</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.description</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.name</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.DEFAULT</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.priority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.supportURL</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.build</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="build"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.builder</op>
                     <op code="get_static">org.pdfsam.module.ModuleCategory.MERGE</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.category</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.description</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.name</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.DEFAULT</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.priority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.supportURL</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.build</op>
                     <op code="get_static">org.pdfsam.module.ModuleCategory.MERGE</op>
                     <op code="get">category</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.getDescription</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.getName</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.getSupportURL</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.DEFAULT</op>
                     <op code="call">org.pdfsam.module.ModulePriority.getPriority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.getPriority</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.io">
         <class id="RemovePdfVersionConstraintEvent"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.RemovePdfVersionConstraintEvent; file: org.pdfsam.ui.io.RemovePdfVersionConstraintEvent-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/sejda/model/pdf/PdfVersion;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/pdf/PdfVersion">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BasePdfVersionEvent.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SetLatestDirectoryEvent"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.SetLatestDirectoryEvent; file: org.pdfsam.ui.io.SetLatestDirectoryEvent-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/io/File">latest</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/io/File;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">latest</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/io/File;"
                       name="getLatest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/io/File</return>
                  <ops>
                     <op code="get">latest</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RemovePdfVersionConstraintEventTest"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.RemovePdfVersionConstraintEventTest; file: org.pdfsam.ui.io.RemovePdfVersionConstraintEventTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.RemovePdfVersionConstraintEvent.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="notNullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_3</op>
                     <op code="call">org.pdfsam.ui.io.RemovePdfVersionConstraintEvent.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_3</op>
                     <op code="call">org.pdfsam.ui.io.RemovePdfVersionConstraintEvent.getPdfVersion</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SetLatestDirectoryEventTest"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.SetLatestDirectoryEventTest; file: org.pdfsam.ui.io.SetLatestDirectoryEventTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.SetLatestDirectoryEvent.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="notNullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.io.SetLatestDirectoryEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.SetLatestDirectoryEvent.getLatest</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RememberingLatestFileChooserWrapper"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.RememberingLatestFileChooserWrapper; file: org.pdfsam.ui.io.RememberingLatestFileChooserWrapper-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/stage/FileChooser">wrapped</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BaseRememberingLatestChooser.&lt;init&gt;</op>
                     <op code="call">javafx.stage.FileChooser.&lt;init&gt;</op>
                     <op code="put">wrapped</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="setTitle"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">wrapped</op>
                     <op code="call">javafx.stage.FileChooser.setTitle</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/File;)V"
                       name="setInitialDirectory"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">wrapped</op>
                     <op code="call">javafx.stage.FileChooser.setInitialDirectory</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="setInitialFileName"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">wrapped</op>
                     <op code="call">javafx.stage.FileChooser.setInitialFileName</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Window;)Ljava/util/List;"
                       name="showOpenMultipleDialog"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Window">?</arg>
                  </args>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.sanitizeInitialDirectory</op>
                     <op code="get">wrapped</op>
                     <op code="call">javafx.stage.FileChooser.showOpenMultipleDialog</op>
                     <op code="call">java.util.List.isEmpty</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.notifyNewLatestDirectory</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="sanitizeInitialDirectory"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">wrapped</op>
                     <op code="call">javafx.stage.FileChooser.getInitialDirectory</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.filter</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="get">wrapped</op>
                     <op code="call">javafx.stage.FileChooser.setInitialDirectory</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/io/RememberingLatestFileChooserWrapper$OpenType;)Ljava/io/File;"
                       name="showDialog"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/RememberingLatestFileChooserWrapper$OpenType">?</arg>
                  </args>
                  <return>Ljava/io/File</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.showDialog</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Window;Lorg/pdfsam/ui/io/RememberingLatestFileChooserWrapper$OpenType;)Ljava/io/File;"
                       name="showDialog"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Window">?</arg>
                     <arg type="Lorg/pdfsam/ui/io/RememberingLatestFileChooserWrapper$OpenType">?</arg>
                  </args>
                  <return>Ljava/io/File</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$1.$SwitchMap$org$pdfsam$ui$io$RememberingLatestFileChooserWrapper$OpenType</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.ordinal</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.sanitizeInitialDirectory</op>
                     <op code="get">wrapped</op>
                     <op code="call">javafx.stage.FileChooser.showSaveDialog</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.sanitizeInitialDirectory</op>
                     <op code="get">wrapped</op>
                     <op code="call">javafx.stage.FileChooser.showOpenDialog</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.notifyNewLatestDirectory</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/File;)V"
                       name="notifyNewLatestDirectory"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.io.File.isFile</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">java.io.File.getParentFile</op>
                     <op code="call">org.pdfsam.ui.io.SetLatestDirectoryEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/collections/ObservableList;"
                       name="getExtensionFilters"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Ljavafx/collections/ObservableList</return>
                  <ops>
                     <op code="get">wrapped</op>
                     <op code="call">javafx.stage.FileChooser.getExtensionFilters</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfDestinationPane"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.PdfDestinationPane; file: org.pdfsam.ui.io.PdfDestinationPane-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/PdfVersionCombo">version</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/PdfVersionConstrainedCheckBox">compress</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Optional">discardBookmarks</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">ownerModule</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/UserContext">userContext</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/io/BrowsableField;Ljava/lang/String;Lorg/pdfsam/context/UserContext;[Lorg/pdfsam/ui/io/PdfDestinationPane$DestinationPanelFields;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/BrowsableField">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                     <arg type="Lorg/pdfsam/ui/io/PdfDestinationPane$DestinationPanelFields">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/io/BrowsableField;Ljava/lang/String;Lorg/pdfsam/context/UserContext;Z[Lorg/pdfsam/ui/io/PdfDestinationPane$DestinationPanelFields;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/BrowsableField">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                     <arg type="Z">?</arg>
                     <arg type="Lorg/pdfsam/ui/io/PdfDestinationPane$DestinationPanelFields">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.DestinationPane.&lt;init&gt;</op>
                     <op code="call">java.util.Optional.empty</op>
                     <op code="put">discardBookmarks</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableField.setId</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">userContext</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="put">ownerModule</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.VBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.&lt;init&gt;</op>
                     <op code="put">version</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_5</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionConstrainedCheckBox.&lt;init&gt;</op>
                     <op code="put">compress</op>
                     <op code="get">compress</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionConstrainedCheckBox.setText</op>
                     <op code="get">compress</op>
                     <op code="call">org.pdfsam.context.UserContext.isCompressionEnabled</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionConstrainedCheckBox.setSelected</op>
                     <op code="get">compress</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionConstrainedCheckBox.setId</op>
                     <op code="get">compress</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionConstrainedCheckBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.VITEM</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="get_static">org.pdfsam.ui.io.PdfDestinationPane$DestinationPanelFields.DISCARD_BOOKMARKS</op>
                     <op code="call">java.util.List.contains</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.CheckBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">javafx.scene.control.CheckBox.setGraphic</op>
                     <op code="call">javafx.scene.control.CheckBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.WITH_HELP</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.control.CheckBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.VITEM</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.control.CheckBox.setId</op>
                     <op code="call">java.util.Optional.of</op>
                     <op code="put">discardBookmarks</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="get">version</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.VITEM</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.layout.HBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.HCONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.layout.VBox.getChildren</op>
                     <op code="get">compress</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">discardBookmarks</op>
                     <op code="call">javafx.scene.layout.VBox.getChildren</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                     <op code="call">javafx.scene.layout.VBox.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.support.Views.titledPane</op>
                     <op code="call">javafx.scene.control.TitledPane.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.control.TitledPane.setExpanded</op>
                     <op code="call">javafx.scene.control.TitledPane.expandedProperty</op>
                     <op code="call">javafx.beans.property.BooleanProperty.addListener</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="enableSameAsSourceItem"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">version</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.enableSameAsSourceItem</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getOwnerModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">ownerModule</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/SetDestinationRequest;)V"
                       name="setDestination"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/SetDestinationRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.SetDestinationRequest.isFallback</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.destination</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isBlank</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.context.UserContext.isUseSmartOutput</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.destination</op>
                     <op code="call">org.pdfsam.ui.commons.SetDestinationRequest.getFootprint</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableField.setTextFromFile</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="resetView"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.DestinationPane.resetView</op>
                     <op code="get">version</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.resetView</op>
                     <op code="get">compress</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionConstrainedCheckBox.setSelected</op>
                     <op code="get">compress</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionConstrainedCheckBox.setSelected</op>
                     <op code="get">discardBookmarks</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/support/params/AbstractPdfOutputParametersBuilder;Ljava/util/function/Consumer;)V"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/support/params/AbstractPdfOutputParametersBuilder">?</arg>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">compress</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionConstrainedCheckBox.isSelected</op>
                     <op code="call">org.pdfsam.support.params.AbstractPdfOutputParametersBuilder.compress</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.overwrite</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.pdfsam.support.params.AbstractPdfOutputParametersBuilder.existingOutput</op>
                     <op code="get">version</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo$PdfVersionComboItem.getVersion</op>
                     <op code="call">org.pdfsam.support.params.AbstractPdfOutputParametersBuilder.version</op>
                     <op code="get">discardBookmarks</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="saveStateTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">compress</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionConstrainedCheckBox.isSelected</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.overwrite</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">discardBookmarks</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                     <op code="get">version</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo$PdfVersionComboItem.getVersion</op>
                     <op code="call">org.sejda.model.pdf.PdfVersion.toString</op>
                     <op code="call">java.util.Map.put</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">version</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.resetView</op>
                     <op code="get">compress</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionConstrainedCheckBox.setSelected</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.overwrite</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">javafx.scene.control.CheckBox.setSelected</op>
                     <op code="get">discardBookmarks</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/io/PdfVersionCombo;"
                       name="getVersion"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Lorg/pdfsam/ui/io/PdfVersionCombo</return>
                  <ops>
                     <op code="get">version</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/io/PdfVersionConstrainedCheckBox;"
                       name="getCompress"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Lorg/pdfsam/ui/io/PdfVersionConstrainedCheckBox</return>
                  <ops>
                     <op code="get">compress</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RememberingLatestDirectoryChooserWrapperTest"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.RememberingLatestDirectoryChooserWrapperTest; file: org.pdfsam.ui.io.RememberingLatestDirectoryChooserWrapperTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestDirectoryChooserWrapper.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestDirectoryChooserWrapper.setTitle</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Button.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="hasTitle"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestDirectoryChooserWrapperTest.clickOn</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestDirectoryChooserWrapperTest.window</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RememberingLatestDirectoryChooserWrapper"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.RememberingLatestDirectoryChooserWrapper; file: org.pdfsam.ui.io.RememberingLatestDirectoryChooserWrapper-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/stage/DirectoryChooser">wrapped</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BaseRememberingLatestChooser.&lt;init&gt;</op>
                     <op code="call">javafx.stage.DirectoryChooser.&lt;init&gt;</op>
                     <op code="put">wrapped</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="setTitle"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">wrapped</op>
                     <op code="call">javafx.stage.DirectoryChooser.setTitle</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/File;)V"
                       name="setInitialDirectory"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">wrapped</op>
                     <op code="call">javafx.stage.DirectoryChooser.setInitialDirectory</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Window;)Ljava/io/File;"
                       name="showDialog"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Window">?</arg>
                  </args>
                  <return>Ljava/io/File</return>
                  <ops>
                     <op code="get">wrapped</op>
                     <op code="call">javafx.stage.DirectoryChooser.getInitialDirectory</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.filter</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="get">wrapped</op>
                     <op code="call">javafx.stage.DirectoryChooser.setInitialDirectory</op>
                     <op code="get">wrapped</op>
                     <op code="call">javafx.stage.DirectoryChooser.showDialog</op>
                     <op code="call">java.io.File.isDirectory</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.ui.io.SetLatestDirectoryEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BrowsablePdfInputFieldTest"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.BrowsablePdfInputFieldTest; file: org.pdfsam.ui.io.BrowsablePdfInputFieldTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">fxThread</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/support/params/SinglePdfSourceTaskParametersBuilder">builder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">onError</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">fxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">onError</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">builder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="valid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfInputField.&lt;init&gt;</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfInputField.getTextField</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfInputField.apply</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.hamcrest.Matchers.equalTo</op>
                     <op code="call">org.hamcrest.Matchers.hasProperty</op>
                     <op code="call">org.mockito.hamcrest.MockitoHamcrest.argThat</op>
                     <op code="call">org.pdfsam.support.params.SinglePdfSourceTaskParametersBuilder.source</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfInputField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfInputField.enforceValidation</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfInputField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfInputField.apply</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.support.params.SinglePdfSourceTaskParametersBuilder.source</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BasePdfVersionEvent"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.BasePdfVersionEvent; file: org.pdfsam.ui.io.BasePdfVersionEvent-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/pdf/PdfVersion">pdfVersion</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/sejda/model/pdf/PdfVersion;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/pdf/PdfVersion">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">pdfVersion</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/pdf/PdfVersion;"
                       name="getPdfVersion"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/sejda/model/pdf/PdfVersion</return>
                  <ops>
                     <op code="get">pdfVersion</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="hasPdfVersion"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">pdfVersion</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BrowsableOutputDirectoryField"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.BrowsableOutputDirectoryField; file: org.pdfsam.ui.io.BrowsableOutputDirectoryField-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.support.validation.Validators.nonBlank</op>
                     <op code="call">org.pdfsam.support.validation.Validators.and</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setValidator</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/support/params/MultipleOutputTaskParametersBuilder;Ljava/util/function/Consumer;)V"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/support/params/MultipleOutputTaskParametersBuilder">?</arg>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.validate</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">java.nio.file.Paths.get</op>
                     <op code="call">java.nio.file.Files.exists</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.ui.commons.NonExistingOutputDirectoryEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="call">java.nio.file.Files.isDirectory</op>
                     <op code="call">java.nio.file.Path.toFile</op>
                     <op code="call">org.sejda.model.output.FileOrDirectoryTaskOutput.directory</op>
                     <op code="call">org.pdfsam.support.params.MultipleOutputTaskParametersBuilder.output</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BrowsableOutputDirectoryFieldTest"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.BrowsableOutputDirectoryFieldTest; file: org.pdfsam.ui.io.BrowsableOutputDirectoryFieldTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">fxThread</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/support/params/MultipleOutputTaskParametersBuilder">builder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">onError</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">fxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">onError</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">builder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="valid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.&lt;init&gt;</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFolder</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.getTextField</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.apply</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.hamcrest.Matchers.equalTo</op>
                     <op code="call">org.hamcrest.Matchers.hasProperty</op>
                     <op code="call">org.mockito.hamcrest.MockitoHamcrest.argThat</op>
                     <op code="call">org.pdfsam.support.params.MultipleOutputTaskParametersBuilder.output</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validUTFSpecialChars"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.&lt;init&gt;</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFolder</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.getTextField</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.apply</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.hamcrest.Matchers.equalTo</op>
                     <op code="call">org.hamcrest.Matchers.hasProperty</op>
                     <op code="call">org.mockito.hamcrest.MockitoHamcrest.argThat</op>
                     <op code="call">org.pdfsam.support.params.MultipleOutputTaskParametersBuilder.output</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidBlank"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.apply</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.support.params.MultipleOutputTaskParametersBuilder.output</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidFile"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.&lt;init&gt;</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.getTextField</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.apply</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.support.params.MultipleOutputTaskParametersBuilder.output</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validNonExisting"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.&lt;init&gt;</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFolder</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.getTextField</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.delete</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.apply</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfVersionConstrainedCheckBox"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.PdfVersionConstrainedCheckBox; file: org.pdfsam.ui.io.PdfVersionConstrainedCheckBox-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/pdf/PdfVersion">constraint</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">ownerModule</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/sejda/model/pdf/PdfVersion;Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/pdf/PdfVersion">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.CheckBox.&lt;init&gt;</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="put">ownerModule</op>
                     <op code="put">constraint</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="get">constraint</op>
                     <op code="call">org.sejda.model.pdf.PdfVersion.getVersionString</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionConstrainedCheckBox.setGraphic</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionConstrainedCheckBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.WITH_HELP</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionConstrainedCheckBox.selectedProperty</op>
                     <op code="call">javafx.beans.property.BooleanProperty.addListener</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getOwnerModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">ownerModule</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BasePdfVersionEventTest"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.BasePdfVersionEventTest; file: org.pdfsam.ui.io.BasePdfVersionEventTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BasePdfVersionEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BasePdfVersionEvent.hasPdfVersion</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="notNullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_3</op>
                     <op code="call">org.pdfsam.ui.io.BasePdfVersionEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BasePdfVersionEvent.hasPdfVersion</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_3</op>
                     <op code="call">org.pdfsam.ui.io.BasePdfVersionEvent.getPdfVersion</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BrowsableDirectoryField"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.BrowsableDirectoryField; file: org.pdfsam.ui.io.BrowsableDirectoryField-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/BrowsableDirectoryField$BrowseEventHandler">handler</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField$BrowseEventHandler.&lt;init&gt;</op>
                     <op code="put">handler</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.setBrowseWindowTitle</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setErrorMessage</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setPromptText</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.getBrowseButton</op>
                     <op code="get">handler</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.getTextField</op>
                     <op code="get">handler</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setOnAction</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.setOnDragOver</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.setOnDragDropped</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/File;)V"
                       name="setTextFromFile"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.io.File.isDirectory</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.getTextField</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.getTextField</op>
                     <op code="call">java.io.File.getParent</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.validate</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/scene/input/DragEvent;Ljava/util/function/Consumer;)V"
                       name="dragConsume"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljavafx/scene/input/DragEvent">?</arg>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.input.DragEvent.getDragboard</op>
                     <op code="call">javafx.scene.input.Dragboard.getFiles</op>
                     <op code="call">java.util.List.isEmpty</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="call">javafx.scene.input.DragEvent.consume</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/function/Consumer;"
                       name="onDragOverConsumer"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Ljava/util/function/Consumer</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/function/Consumer;"
                       name="onDragDropped"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Ljava/util/function/Consumer</return>
               </method>
            </methods>
         </class>
         <class id="BrowsablePdfInputField"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.BrowsablePdfInputField; file: org.pdfsam.ui.io.BrowsablePdfInputField-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.support.io.FileType.PDF</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.OPEN</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/support/params/SinglePdfSourceTaskParametersBuilder;Ljava/util/function/Consumer;)V"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/support/params/SinglePdfSourceTaskParametersBuilder">?</arg>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfInputField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.validate</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfInputField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfInputField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.sejda.conversion.PdfFileSourceAdapter.&lt;init&gt;</op>
                     <op code="call">org.sejda.conversion.PdfFileSourceAdapter.getPdfFileSource</op>
                     <op code="call">org.pdfsam.support.params.SinglePdfSourceTaskParametersBuilder.source</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BaseRememberingLatestChooser"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.BaseRememberingLatestChooser; file: org.pdfsam.ui.io.BaseRememberingLatestChooser-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/File;)V"
                       name="setInitialDirectory"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>V</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/io/SetLatestDirectoryEvent;)V"
                       name="doSetInitialDir"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/SetLatestDirectoryEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.SetLatestDirectoryEvent.getLatest</op>
                     <op code="call">org.pdfsam.ui.io.BaseRememberingLatestChooser.setInitialDirectory</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ChangedSelectedPdfVersionEvent"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.ChangedSelectedPdfVersionEvent; file: org.pdfsam.ui.io.ChangedSelectedPdfVersionEvent-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/sejda/model/pdf/PdfVersion;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/pdf/PdfVersion">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BasePdfVersionEvent.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BrowsableField"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.BrowsableField; file: org.pdfsam.ui.io.BrowsableField-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljavafx/css/PseudoClass">SELECTED_PSEUDOCLASS_STATE</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Button">browseButton</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/commons/ValidableTextField">textField</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/layout/HBox">validableContainer</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">browseWindowTitle</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableField.&lt;init&gt;</op>
                     <op code="get">browseButton</op>
                     <op code="call">javafx.scene.control.Button.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.BROWSE_BUTTON</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get">browseButton</op>
                     <op code="call">javafx.scene.control.Button.prefHeightProperty</op>
                     <op code="get">validableContainer</op>
                     <op code="call">javafx.scene.layout.HBox.heightProperty</op>
                     <op code="call">javafx.beans.property.DoubleProperty.bind</op>
                     <op code="get">browseButton</op>
                     <op code="call">javafx.scene.control.Button.setMaxHeight</op>
                     <op code="get">browseButton</op>
                     <op code="call">javafx.scene.control.Button.setMinHeight</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableField.getChildren</op>
                     <op code="get">browseButton</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljavafx/scene/control/Button;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/scene/control/Button">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableField$1.&lt;init&gt;</op>
                     <op code="put">textField</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="put">browseWindowTitle</op>
                     <op code="put">browseButton</op>
                     <op code="get">textField</op>
                     <op code="get_static">javafx.scene.layout.Priority.ALWAYS</op>
                     <op code="call">javafx.scene.layout.HBox.setHgrow</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableField.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">textField</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="put">validableContainer</op>
                     <op code="get">validableContainer</op>
                     <op code="call">javafx.scene.layout.HBox.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">textField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">validableContainer</op>
                     <op code="get_static">javafx.scene.layout.Priority.ALWAYS</op>
                     <op code="call">javafx.scene.layout.HBox.setHgrow</op>
                     <op code="get">textField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.validProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.addListener</op>
                     <op code="get">textField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.focusedProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyBooleanProperty.addListener</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableField.getChildren</op>
                     <op code="get">validableContainer</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/commons/ValidableTextField;"
                       name="getTextField"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/commons/ValidableTextField</return>
                  <ops>
                     <op code="get">textField</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="saveStateTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableField.getId</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="get">textField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="call">java.util.Map.put</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">textField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableField.getId</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/scene/Node;)V"
                       name="setGraphic"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/scene/Node">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">validableContainer</op>
                     <op code="call">javafx.scene.layout.HBox.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.clear</op>
                     <op code="get">validableContainer</op>
                     <op code="call">javafx.scene.layout.HBox.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">validableContainer</op>
                     <op code="call">javafx.scene.layout.HBox.getChildren</op>
                     <op code="get">textField</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/control/Button;"
                       name="getBrowseButton"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Ljavafx/scene/control/Button</return>
                  <ops>
                     <op code="get">browseButton</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getBrowseWindowTitle"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">browseWindowTitle</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="setBrowseWindowTitle"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">browseWindowTitle</op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/File;)V"
                       name="setTextFromFile"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>V</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.css.PseudoClass.getPseudoClass</op>
                     <op code="put_static">org.pdfsam.ui.io.BrowsableField.SELECTED_PSEUDOCLASS_STATE</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BrowsableFileField$BrowseEventHandler"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.BrowsableFileField$BrowseEventHandler; file: org.pdfsam.ui.io.BrowsableFileField$BrowseEventHandler-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/BrowsableFileField">this$0</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/io/BrowsableFileField;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/BrowsableFileField">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">this$0</op>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/event/ActionEvent;)V"
                       name="handle"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/event/ActionEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">this$0</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getBrowseWindowTitle</op>
                     <op code="get">this$0</op>
                     <op code="get">fileType</op>
                     <op code="call">org.pdfsam.ui.io.FileChoosers.getFileChooser</op>
                     <op code="get">this$0</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotBlank</op>
                     <op code="call">java.nio.file.Paths.get</op>
                     <op code="call">java.nio.file.Files.exists</op>
                     <op code="call">java.nio.file.Path.getParent</op>
                     <op code="call">java.nio.file.Path.toFile</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.setInitialDirectory</op>
                     <op code="call">java.nio.file.Path.getFileName</op>
                     <op code="call">java.nio.file.Path.toString</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.setInitialFileName</op>
                     <op code="get">this$0</op>
                     <op code="get">this$0</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getScene</op>
                     <op code="call">javafx.scene.Scene.getWindow</op>
                     <op code="get">this$0</op>
                     <op code="get">openType</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.showDialog</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.setTextFromFile</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfDestinationPaneUITest"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.PdfDestinationPaneUITest; file: org.pdfsam.ui.io.PdfDestinationPaneUITest-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/support/params/AbstractPdfOutputParametersBuilder">builder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">onError</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/UserContext">userContext</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/PdfDestinationPane">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.context.UserContext.isCompressionEnabled</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfInputField.&lt;init&gt;</op>
                     <op code="get">userContext</op>
                     <op code="get_static">org.pdfsam.ui.io.PdfDestinationPane$DestinationPanelFields.DISCARD_BOOKMARKS</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="applyDefault"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.apply</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.support.params.AbstractPdfOutputParametersBuilder.compress</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.support.params.AbstractPdfOutputParametersBuilder.discardBookmarks</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.support.params.AbstractPdfOutputParametersBuilder.existingOutput</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="applyCompress"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPaneUITest.clickOn</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.apply</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.support.params.AbstractPdfOutputParametersBuilder.compress</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="applyClickAll"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPaneUITest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAll</op>
                     <op code="call">java.util.Set.forEach</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.apply</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.support.params.AbstractPdfOutputParametersBuilder.compress</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.pdfsam.support.params.AbstractPdfOutputParametersBuilder.existingOutput</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.support.params.AbstractPdfOutputParametersBuilder.discardBookmarks</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="reset"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPaneUITest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPaneUITest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAll</op>
                     <op code="call">java.util.Set.forEach</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPaneUITest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.overwrite</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPaneUITest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPaneUITest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfVersionComboTest"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.PdfVersionComboTest; file: org.pdfsam.ui.io.PdfVersionComboTest-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">fxThread</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/PdfVersionCombo">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">fxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="addConstraintRemovesItems"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_5</op>
                     <op code="call">org.pdfsam.ui.io.AddPdfVersionConstraintEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_5</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionComboTest.comboHasItem</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionComboTest.comboHasItem</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="removeConstraintRestoresItems"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="call">org.pdfsam.ui.io.AddPdfVersionConstraintEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_6</op>
                     <op code="call">org.pdfsam.ui.io.AddPdfVersionConstraintEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_5</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionComboTest.comboHasItem</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_6</op>
                     <op code="call">org.pdfsam.ui.io.RemovePdfVersionConstraintEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_5</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionComboTest.comboHasItem</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="enableSameAsSource"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.getItems</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.enableSameAsSourceItem</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.getItems</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="sameAsSourceVersion"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.enableSameAsSourceItem</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="call">org.pdfsam.ui.io.ChangedSelectedPdfVersionEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.getItems</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.count</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="sameAsSourceVersionLowerThenConstraint"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.enableSameAsSourceItem</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_5</op>
                     <op code="call">org.pdfsam.ui.io.AddPdfVersionConstraintEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.getItems</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="call">org.pdfsam.ui.io.ChangedSelectedPdfVersionEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.getItems</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="lowestIsSelected"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.enableSameAsSourceItem</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="call">org.pdfsam.ui.io.ChangedSelectedPdfVersionEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_5</op>
                     <op code="call">org.pdfsam.ui.io.AddPdfVersionConstraintEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_5</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo$PdfVersionComboItem.getVersion</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="reset"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_5</op>
                     <op code="call">org.pdfsam.ui.io.AddPdfVersionConstraintEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_5</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo$PdfVersionComboItem.getVersion</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.getItems</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.resetView</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.getItems</op>
                     <op code="call">javafx.collections.ObservableList.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/io/PdfVersionCombo;Lorg/sejda/model/pdf/PdfVersion;)Z"
                       name="comboHasItem"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/PdfVersionCombo">?</arg>
                     <arg type="Lorg/sejda/model/pdf/PdfVersion">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.getItems</op>
                     <op code="call">javafx.collections.ObservableList.iterator</op>
                     <op code="call">java.util.Iterator.hasNext</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo$PdfVersionComboItem.getVersion</op>
                     <op code="call">org.sejda.model.pdf.PdfVersion.equals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BrowsableDirectoryField$BrowseEventHandler"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.BrowsableDirectoryField$BrowseEventHandler; file: org.pdfsam.ui.io.BrowsableDirectoryField$BrowseEventHandler-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/BrowsableDirectoryField">this$0</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/io/BrowsableDirectoryField;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/BrowsableDirectoryField">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">this$0</op>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/event/ActionEvent;)V"
                       name="handle"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/event/ActionEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">this$0</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.getBrowseWindowTitle</op>
                     <op code="call">org.pdfsam.ui.io.FileChoosers.getDirectoryChooser</op>
                     <op code="get">this$0</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotBlank</op>
                     <op code="call">java.nio.file.Paths.get</op>
                     <op code="call">java.nio.file.Files.exists</op>
                     <op code="call">java.nio.file.Path.toFile</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestDirectoryChooserWrapper.setInitialDirectory</op>
                     <op code="get">this$0</op>
                     <op code="get">this$0</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getScene</op>
                     <op code="call">javafx.scene.Scene.getWindow</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestDirectoryChooserWrapper.showDialog</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.setTextFromFile</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="AddPdfVersionConstraintEventTest"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.AddPdfVersionConstraintEventTest; file: org.pdfsam.ui.io.AddPdfVersionConstraintEventTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.AddPdfVersionConstraintEvent.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BrowsablePdfOutputFieldTest"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.BrowsablePdfOutputFieldTest; file: org.pdfsam.ui.io.BrowsablePdfOutputFieldTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">fxThread</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/support/params/SingleOutputTaskParametersBuilder">builder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">onError</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">fxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">onError</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">builder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="valid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfOutputField.&lt;init&gt;</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfOutputField.getTextField</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfOutputField.apply</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.hamcrest.Matchers.equalTo</op>
                     <op code="call">org.hamcrest.Matchers.hasProperty</op>
                     <op code="call">org.mockito.hamcrest.MockitoHamcrest.argThat</op>
                     <op code="call">org.pdfsam.support.params.SingleOutputTaskParametersBuilder.output</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfOutputField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfOutputField.enforceValidation</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfOutputField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfOutputField.apply</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.support.params.SingleOutputTaskParametersBuilder.output</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="AddPdfVersionConstraintEvent"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.AddPdfVersionConstraintEvent; file: org.pdfsam.ui.io.AddPdfVersionConstraintEvent-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/sejda/model/pdf/PdfVersion;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/pdf/PdfVersion">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BasePdfVersionEvent.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfVersionConstrainedCheckBoxTest$BasePdfVersionEventListener"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.PdfVersionConstrainedCheckBoxTest$BasePdfVersionEventListener; file: org.pdfsam.ui.io.PdfVersionConstrainedCheckBoxTest$BasePdfVersionEventListener-->
            <attributes>
               <attribute final="false" public="false" static="false" type="Z">hit</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">hit</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/io/BasePdfVersionEvent;)V"
                       name="onEvent"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/BasePdfVersionEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">hit</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="call">org.pdfsam.ui.io.BasePdfVersionEvent.getPdfVersion</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfVersionCombo$DefaultPdfVersionComboItem"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.PdfVersionCombo$DefaultPdfVersionComboItem; file: org.pdfsam.ui.io.PdfVersionCombo$DefaultPdfVersionComboItem-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/pdf/PdfVersion">version</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/sejda/model/pdf/PdfVersion;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/pdf/PdfVersion">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">version</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/pdf/PdfVersion;"
                       name="getVersion"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/sejda/model/pdf/PdfVersion</return>
                  <ops>
                     <op code="get">version</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/pdf/PdfVersion;)Z"
                       name="isHigherOrEqual"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/pdf/PdfVersion">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get">version</op>
                     <op code="call">org.sejda.model.pdf.PdfVersion.getVersion</op>
                     <op code="call">org.sejda.model.pdf.PdfVersion.getVersion</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="get">version</op>
                     <op code="call">org.sejda.model.pdf.PdfVersion.getVersionString</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="hashCode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.&lt;init&gt;</op>
                     <op code="get">version</op>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.append</op>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.toHashCode</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="equals"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.&lt;init&gt;</op>
                     <op code="get">version</op>
                     <op code="get">version</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.append</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.isEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfDestinationPaneTest"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.PdfDestinationPaneTest; file: org.pdfsam.ui.io.PdfDestinationPaneTest-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">fxThread</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/UserContext">userContext</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/BrowsableDirectoryField">destination</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/PdfDestinationPane">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">fxThread</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">userContext</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.spy</op>
                     <op code="put">destination</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.context.UserContext.isUseSmartOutput</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.FALSE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.context.UserContext.isCompressionEnabled</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">destination</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setDestination"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.ui.commons.SetDestinationRequest.requestDestination</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.setDestination</op>
                     <op code="get">destination</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.ui.commons.SetDestinationRequest.getFootprint</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.setTextFromFile</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setFallbackDestination"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">destination</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.context.UserContext.isUseSmartOutput</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.ui.commons.SetDestinationRequest.requestFallbackDestination</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.setDestination</op>
                     <op code="get">destination</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.ui.commons.SetDestinationRequest.getFootprint</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.setTextFromFile</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="dontSetFallbackDestinationIfFilled"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">destination</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.ui.commons.SetDestinationRequest.requestDestination</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.setDestination</op>
                     <op code="get">destination</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.ui.commons.SetDestinationRequest.getFootprint</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.setTextFromFile</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="reset"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">destination</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.overwrite</op>
                     <op code="call">javafx.scene.control.CheckBox.setSelected</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.resetView</op>
                     <op code="get">destination</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.overwrite</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.getVersion</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.getItems</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Collectors.toSet</op>
                     <op code="call">java.util.stream.Stream.collect</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_5</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_6</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.hamcrest.Matchers.containsInAnyOrder</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_2</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_3</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="call">org.hamcrest.Matchers.containsInAnyOrder</op>
                     <op code="call">org.hamcrest.Matchers.not</op>
                     <op code="call">org.hamcrest.Matchers.allOf</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="dontSetFallbackDestinationIfNoSmartOutput"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.ui.commons.SetDestinationRequest.requestFallbackDestination</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.setDestination</op>
                     <op code="get">destination</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.setTextFromFile</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.overwrite</op>
                     <op code="call">javafx.scene.control.CheckBox.setSelected</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.saveStateTo</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertNull</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get_static">java.lang.Boolean.FALSE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="call">org.sejda.model.pdf.PdfVersion.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.restoreStateFrom</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.overwrite</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfVersionFilter"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.PdfVersionFilter; file: org.pdfsam.ui.io.PdfVersionFilter-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/SortedSet">filters</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/beans/property/ReadOnlyObjectWrapper">required</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">java.util.Comparator.comparingDouble</op>
                     <op code="call">java.util.TreeSet.&lt;init&gt;</op>
                     <op code="put">filters</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectWrapper.&lt;init&gt;</op>
                     <op code="put">required</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_0</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.addFilter</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/pdf/PdfVersion;)V"
                       name="addFilter"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/pdf/PdfVersion">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">filters</op>
                     <op code="call">java.util.SortedSet.add</op>
                     <op code="get">required</op>
                     <op code="get">filters</op>
                     <op code="call">java.util.SortedSet.last</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectWrapper.set</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/pdf/PdfVersion;)V"
                       name="removeFilter"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/pdf/PdfVersion">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">filters</op>
                     <op code="call">java.util.SortedSet.remove</op>
                     <op code="get">required</op>
                     <op code="get">filters</op>
                     <op code="call">java.util.SortedSet.last</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectWrapper.set</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="reset"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">filters</op>
                     <op code="call">java.util.SortedSet.clear</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_0</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.addFilter</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/beans/property/ReadOnlyObjectProperty;"
                       name="requiredProperty"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Ljavafx/beans/property/ReadOnlyObjectProperty</return>
                  <ops>
                     <op code="get">required</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectWrapper.getReadOnlyProperty</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DestinationPane"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.DestinationPane; file: org.pdfsam.ui.io.DestinationPane-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/CheckBox">overwrite</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/BrowsableField">destination</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/io/BrowsableField;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/BrowsableField">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.CheckBox.&lt;init&gt;</op>
                     <op code="put">overwrite</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">destination</op>
                     <op code="get">overwrite</op>
                     <op code="call">javafx.scene.control.CheckBox.setSelected</op>
                     <op code="get">overwrite</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">javafx.scene.control.CheckBox.setGraphic</op>
                     <op code="get">overwrite</op>
                     <op code="call">javafx.scene.control.CheckBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.WITH_HELP</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableField.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.VITEM</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.io.DestinationPane.getChildren</op>
                     <op code="get">overwrite</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.io.DestinationPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/control/CheckBox;"
                       name="overwrite"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>Ljavafx/scene/control/CheckBox</return>
                  <ops>
                     <op code="get">overwrite</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/io/BrowsableField;"
                       name="destination"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>Lorg/pdfsam/ui/io/BrowsableField</return>
                  <ops>
                     <op code="get">destination</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="resetView"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">overwrite</op>
                     <op code="call">javafx.scene.control.CheckBox.setSelected</op>
                     <op code="get">destination</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfVersionCombo"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.PdfVersionCombo; file: org.pdfsam.ui.io.PdfVersionCombo-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">ownerModule</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/collections/ObservableList">unfilteredItems</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/PdfVersionFilter">versionsFilter</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/PdfVersionCombo$SameAsSourceComboItem">sameAsSource</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.ComboBox.&lt;init&gt;</op>
                     <op code="put">ownerModule</op>
                     <op code="call">javafx.collections.FXCollections.observableArrayList</op>
                     <op code="put">unfilteredItems</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.&lt;init&gt;</op>
                     <op code="put">versionsFilter</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo$SameAsSourceComboItem.&lt;init&gt;</op>
                     <op code="put">sameAsSource</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.sejda.model.pdf.PdfVersion.values</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="get">unfilteredItems</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="get">versionsFilter</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.requiredProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.addListener</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.resetView</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/pdf/PdfVersion;)V"
                       name="setFilteredItems"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/sejda/model/pdf/PdfVersion">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="get">unfilteredItems</op>
                     <op code="call">javafx.collections.ObservableList.filtered</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.setItems</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.getItems</op>
                     <op code="call">javafx.collections.ObservableList.indexOf</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.select</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.selectFirst</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/io/AddPdfVersionConstraintEvent;)V"
                       name="onAddPdfVersionConstraint"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/AddPdfVersionConstraintEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">versionsFilter</op>
                     <op code="call">org.pdfsam.ui.io.AddPdfVersionConstraintEvent.getPdfVersion</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.addFilter</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/io/RemovePdfVersionConstraintEvent;)V"
                       name="onRemovePdfVersionConstraint"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/RemovePdfVersionConstraintEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">versionsFilter</op>
                     <op code="call">org.pdfsam.ui.io.RemovePdfVersionConstraintEvent.getPdfVersion</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.removeFilter</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/io/ChangedSelectedPdfVersionEvent;)V"
                       name="onChangedSelectedPdfVersion"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/ChangedSelectedPdfVersionEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">sameAsSource</op>
                     <op code="call">org.pdfsam.ui.io.ChangedSelectedPdfVersionEvent.getPdfVersion</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo$SameAsSourceComboItem.setVersion</op>
                     <op code="get">versionsFilter</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.requiredProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.get</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.setFilteredItems</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getOwnerModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">ownerModule</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="resetView"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">versionsFilter</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.reset</op>
                     <op code="get">versionsFilter</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_2</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.addFilter</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="enableSameAsSourceItem"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">unfilteredItems</op>
                     <op code="get">sameAsSource</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionCombo.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.selectFirst</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfVersionFilterTest"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.PdfVersionFilterTest; file: org.pdfsam.ui.io.PdfVersionFilterTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="add"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.addFilter</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.requiredProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="remove"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.addFilter</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.requiredProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.removeFilter</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.requiredProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.get</op>
                     <op code="call">org.junit.Assert.assertNotEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="failingRemove"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.requiredProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.addListener</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.removeFilter</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">javafx.beans.value.ChangeListener.changed</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="failingAdd"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.addFilter</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.requiredProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.requiredProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.addListener</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.addFilter</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">javafx.beans.value.ChangeListener.changed</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="keepMaxAsRequired"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.addFilter</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.requiredProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.addFilter</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.requiredProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_5</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.addFilter</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.requiredProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.removeFilter</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_5</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionFilter.requiredProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfVersionConstrainedCheckBoxTest"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.PdfVersionConstrainedCheckBoxTest; file: org.pdfsam.ui.io.PdfVersionConstrainedCheckBoxTest-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/PdfVersionConstrainedCheckBox">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_4</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionConstrainedCheckBox.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="addConstraintOnSelect"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.PdfVersionConstrainedCheckBoxTest$BasePdfVersionEventListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionConstrainedCheckBoxTest.clickOn</op>
                     <op code="get">hit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="removeConstraintOnDeselect"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.PdfVersionConstrainedCheckBoxTest$BasePdfVersionEventListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.io.PdfVersionConstrainedCheckBoxTest.doubleClickOn</op>
                     <op code="get">hit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BrowsableDirectoryFieldTest"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.BrowsableDirectoryFieldTest; file: org.pdfsam.ui.io.BrowsableDirectoryFieldTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">fxThread</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">fxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setTextFromFile"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.setTextFromFile</op>
                     <op code="call">java.io.File.getParent</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setTextFromNullFile"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.setTextFromFile</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setTextFromDirectory"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFolder</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.setTextFromFile</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BrowsableFileFieldUITest"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.BrowsableFileFieldUITest; file: org.pdfsam.ui.io.BrowsableFileFieldUITest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.support.io.FileType.PDF</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.OPEN</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.enforceValidation</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get_static">org.pdfsam.support.io.FileType.PDF</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.OPEN</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.enforceValidation</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validBlank"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileFieldUITest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileFieldUITest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.TAB</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileFieldUITest.type</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidBlank"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileFieldUITest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileFieldUITest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.TAB</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileFieldUITest.type</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.INVALID</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BrowsableFileFieldTest"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.BrowsableFileFieldTest; file: org.pdfsam.ui.io.BrowsableFileFieldTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">fxThread</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">fxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="defaultPromptText"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">java.util.Locale.UK</op>
                     <op code="call">java.util.Locale.toLanguageTag</op>
                     <op code="call">org.pdfsam.i18n.SetLocaleEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get_static">org.pdfsam.support.io.FileType.ALL</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.OPEN</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getPromptText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setTextFromNullFile"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.support.io.FileType.PDF</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.OPEN</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.setTextFromFile</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validExisting"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.support.io.FileType.PDF</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.SAVE</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.enforceValidation</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.setTextFromFile</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidExisting"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.support.io.FileType.PDF</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.SAVE</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.enforceValidation</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.setTextFromFile</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.INVALID</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validNotExisting"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.support.io.FileType.PDF</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.OPEN</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.enforceValidation</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.setTextFromFile</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidNotExisting"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.support.io.FileType.PDF</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.OPEN</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.enforceValidation</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.setTextFromFile</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.INVALID</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validSpecialCharsFolderExisting"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.support.io.FileType.PDF</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.OPEN</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.enforceValidation</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.setTextFromFile</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.support.io.FileType.PDF</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.SAVE</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.setId</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.enforceValidation</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.setTextFromFile</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.saveStateTo</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.support.io.FileType.PDF</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.SAVE</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.setId</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.restoreStateFrom</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="FileChoosers"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.FileChoosers; file: org.pdfsam.ui.io.FileChoosers-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/pdfsam/ui/io/RememberingLatestFileChooserWrapper">FILE_INSTANCE</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/pdfsam/ui/io/RememberingLatestDirectoryChooserWrapper">DIR_INSTANCE</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;[Lorg/pdfsam/support/io/FileType;)Lorg/pdfsam/ui/io/RememberingLatestFileChooserWrapper;"
                       name="getFileChooser"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lorg/pdfsam/support/io/FileType">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/io/RememberingLatestFileChooserWrapper</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.io.FileChoosers.FILE_INSTANCE</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.getExtensionFilters</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Collectors.toList</op>
                     <op code="call">java.util.stream.Stream.collect</op>
                     <op code="call">javafx.collections.ObservableList.setAll</op>
                     <op code="get_static">org.pdfsam.ui.io.FileChoosers.FILE_INSTANCE</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.setInitialFileName</op>
                     <op code="get_static">org.pdfsam.ui.io.FileChoosers.FILE_INSTANCE</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.setTitle</op>
                     <op code="get_static">org.pdfsam.ui.io.FileChoosers.FILE_INSTANCE</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Lorg/pdfsam/ui/io/RememberingLatestDirectoryChooserWrapper;"
                       name="getDirectoryChooser"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/io/RememberingLatestDirectoryChooserWrapper</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.io.FileChoosers.DIR_INSTANCE</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestDirectoryChooserWrapper.setTitle</op>
                     <op code="get_static">org.pdfsam.ui.io.FileChoosers.DIR_INSTANCE</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.ui.io.FileChoosers.FILE_INSTANCE</op>
                     <op code="call">org.pdfsam.ui.io.RememberingLatestDirectoryChooserWrapper.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.ui.io.FileChoosers.DIR_INSTANCE</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BrowsablePdfOutputField"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.BrowsablePdfOutputField; file: org.pdfsam.ui.io.BrowsablePdfOutputField-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.support.io.FileType.PDF</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.SAVE</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfOutputField.enforceValidation</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/support/params/SingleOutputTaskParametersBuilder;Ljava/util/function/Consumer;)V"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/support/params/SingleOutputTaskParametersBuilder">?</arg>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfOutputField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.validate</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfOutputField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfOutputField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.output.FileTaskOutput.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.params.SingleOutputTaskParametersBuilder.output</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfVersionCombo$SameAsSourceComboItem"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.PdfVersionCombo$SameAsSourceComboItem; file: org.pdfsam.ui.io.PdfVersionCombo$SameAsSourceComboItem-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/pdf/PdfVersion">version</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_5</op>
                     <op code="put">version</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/pdf/PdfVersion;)V"
                       name="setVersion"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/sejda/model/pdf/PdfVersion">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">version</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/pdf/PdfVersion;"
                       name="getVersion"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/sejda/model/pdf/PdfVersion</return>
                  <ops>
                     <op code="get">version</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/pdf/PdfVersion;)Z"
                       name="isHigherOrEqual"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/pdf/PdfVersion">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="get">version</op>
                     <op code="call">org.sejda.model.pdf.PdfVersion.getVersion</op>
                     <op code="call">org.sejda.model.pdf.PdfVersion.getVersion</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BrowsableDirectoryFieldUITest"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.BrowsableDirectoryFieldUITest; file: org.pdfsam.ui.io.BrowsableDirectoryFieldUITest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.support.validation.Validators.nonBlank</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setValidator</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.support.validation.Validators.positiveInteger</op>
                     <op code="call">org.pdfsam.support.validation.Validators.validEmpty</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setValidator</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validBlank"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryFieldUITest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryFieldUITest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.TAB</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryFieldUITest.type</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidBlank"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryFieldUITest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryFieldUITest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.TAB</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryFieldUITest.type</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.INVALID</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setGraphic"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryFieldUITest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryFieldUITest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullGraphicDoesntExplode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryFieldUITest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="copyPasteInQuotes"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryFieldUITest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryFieldUITest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.CONTROL</op>
                     <op code="get_static">javafx.scene.input.KeyCode.V</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryFieldUITest.press</op>
                     <op code="get_static">javafx.scene.input.KeyCode.V</op>
                     <op code="get_static">javafx.scene.input.KeyCode.CONTROL</op>
                     <op code="call">org.testfx.api.FxRobot.release</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="copyPasteNoQuotes"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryFieldUITest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryFieldUITest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.CONTROL</op>
                     <op code="get_static">javafx.scene.input.KeyCode.V</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryFieldUITest.press</op>
                     <op code="get_static">javafx.scene.input.KeyCode.V</op>
                     <op code="get_static">javafx.scene.input.KeyCode.CONTROL</op>
                     <op code="call">org.testfx.api.FxRobot.release</op>
                     <op code="call">org.testfx.api.FxAssert.verifyThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="dragAndDropExistingDirectory"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="dragAndDropExistingFile"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
               </method>
            </methods>
         </class>
         <class id="BrowsableFileField"><!--Package: org.pdfsam.ui.io; name: org.pdfsam.ui.io.BrowsableFileField; file: org.pdfsam.ui.io.BrowsableFileField-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/support/io/FileType">fileType</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/RememberingLatestFileChooserWrapper$OpenType">openType</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/BrowsableFileField$BrowseEventHandler">handler</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/support/io/FileType;Lorg/pdfsam/ui/io/RememberingLatestFileChooserWrapper$OpenType;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/support/io/FileType">?</arg>
                     <arg type="Lorg/pdfsam/ui/io/RememberingLatestFileChooserWrapper$OpenType">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableField.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.support.io.FileType.ALL</op>
                     <op code="put">fileType</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.OPEN</op>
                     <op code="put">openType</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField$BrowseEventHandler.&lt;init&gt;</op>
                     <op code="put">handler</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.init</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/support/io/FileType;Lorg/pdfsam/ui/io/RememberingLatestFileChooserWrapper$OpenType;Ljavafx/scene/control/Button;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/support/io/FileType">?</arg>
                     <arg type="Lorg/pdfsam/ui/io/RememberingLatestFileChooserWrapper$OpenType">?</arg>
                     <arg type="Ljavafx/scene/control/Button">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableField.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.support.io.FileType.ALL</op>
                     <op code="put">fileType</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.OPEN</op>
                     <op code="put">openType</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField$BrowseEventHandler.&lt;init&gt;</op>
                     <op code="put">handler</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.init</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/support/io/FileType;Lorg/pdfsam/ui/io/RememberingLatestFileChooserWrapper$OpenType;)V"
                       name="init"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/support/io/FileType">?</arg>
                     <arg type="Lorg/pdfsam/ui/io/RememberingLatestFileChooserWrapper$OpenType">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.setBrowseWindowTitle</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getBrowseButton</op>
                     <op code="get">handler</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="get">handler</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setOnAction</op>
                     <op code="get_static">org.pdfsam.support.io.FileType.ALL</op>
                     <op code="call">org.apache.commons.lang3.ObjectUtils.defaultIfNull</op>
                     <op code="put">fileType</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.OPEN</op>
                     <op code="call">org.apache.commons.lang3.ObjectUtils.defaultIfNull</op>
                     <op code="put">openType</op>
                     <op code="get_static">org.pdfsam.support.io.FileType.ALL</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.io.FileType.getFilter</op>
                     <op code="call">javafx.stage.FileChooser$ExtensionFilter.getExtensions</op>
                     <op code="call">java.lang.String.format</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setPromptText</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setPromptText</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.setOnDragOver</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.setOnDragDropped</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(ZZ)V"
                       name="enforceValidation"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Z">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">fileType</op>
                     <op code="call">org.pdfsam.support.validation.Validators.fileType</op>
                     <op code="call">org.pdfsam.support.validation.Validators.validEmpty</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setValidator</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.buildErrorMessage</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setErrorMessage</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)Ljava/lang/String;"
                       name="buildErrorMessage"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">org.pdfsam.support.io.FileType.ALL</op>
                     <op code="get">fileType</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="get">fileType</op>
                     <op code="call">org.pdfsam.support.io.FileType.getFilter</op>
                     <op code="call">javafx.stage.FileChooser$ExtensionFilter.getExtensions</op>
                     <op code="call">java.lang.Object.toString</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.trim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/File;)V"
                       name="setTextFromFile"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.validate</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/scene/input/DragEvent;Ljava/util/function/Consumer;)V"
                       name="dragConsume"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljavafx/scene/input/DragEvent">?</arg>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.input.DragEvent.getDragboard</op>
                     <op code="call">javafx.scene.input.Dragboard.hasFiles</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="call">javafx.scene.input.DragEvent.consume</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/function/Consumer;"
                       name="onDragOverConsumer"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Ljava/util/function/Consumer</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/function/Consumer;"
                       name="onDragDropped"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Ljava/util/function/Consumer</return>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.split">
         <class id="SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder"><!--Package: org.pdfsam.split; name: org.pdfsam.split.SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder; file: org.pdfsam.split.SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder-->
            <attributes>
               <attribute final="false" public="false" static="false" type="I">step</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(I)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.SplitParametersBuilder.&lt;init&gt;</op>
                     <op code="put">step</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/parameter/SplitByEveryXPagesParameters;"
                       name="build"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/sejda/model/parameter/SplitByEveryXPagesParameters</return>
                  <ops>
                     <op code="get">step</op>
                     <op code="call">org.sejda.model.parameter.SplitByEveryXPagesParameters.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder.isCompress</op>
                     <op code="call">org.sejda.model.parameter.SplitByEveryXPagesParameters.setCompress</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder.existingOutput</op>
                     <op code="call">org.sejda.model.parameter.SplitByEveryXPagesParameters.setExistingOutputPolicy</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder.getVersion</op>
                     <op code="call">org.sejda.model.parameter.SplitByEveryXPagesParameters.setVersion</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder.getOutput</op>
                     <op code="call">org.sejda.model.parameter.SplitByEveryXPagesParameters.setOutput</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder.getPrefix</op>
                     <op code="call">org.sejda.model.parameter.SplitByEveryXPagesParameters.setOutputPrefix</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder.getSource</op>
                     <op code="call">org.sejda.model.parameter.SplitByEveryXPagesParameters.addSource</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder.getOptimizationPolicy</op>
                     <op code="call">org.sejda.model.parameter.SplitByEveryXPagesParameters.setOptimizationPolicy</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder.isDiscardBookmarks</op>
                     <op code="call">org.sejda.model.parameter.SplitByEveryXPagesParameters.discardOutline</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitByEveryRadioButton"><!--Package: org.pdfsam.split; name: org.pdfsam.split.SplitByEveryRadioButton; file: org.pdfsam.split.SplitByEveryRadioButton-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/commons/ValidableTextField">field</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/commons/ValidableTextField;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/ValidableTextField">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.RadioButton.&lt;init&gt;</op>
                     <op code="put">field</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setOnEnterValidation</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setEnableInvalidStyle</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setPromptText</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.support.validation.Validators.positiveInteger</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setValidator</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setErrorMessage</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/function/Consumer;)Lorg/pdfsam/split/SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder;"
                       name="getBuilder"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>Lorg/pdfsam/split/SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.validate</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">java.lang.Integer.parseInt</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="saveStateTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton.isSelected</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="call">java.util.Map.put</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                     <op code="get">field</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Integer;)V"
                       name="setMaxPages"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/Integer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Integer.intValue</op>
                     <op code="get">field</op>
                     <op code="call">java.lang.Integer.intValue</op>
                     <op code="call">org.pdfsam.support.validation.Validators.positiveIntRange</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setValidator</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="resetView"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.clear</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitAfterPredefinedSetOfPagesRadioButton$SimpleSplitParametersBuilder"><!--Package: org.pdfsam.split; name: org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton$SimpleSplitParametersBuilder; file: org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton$SimpleSplitParametersBuilder-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/pdf/page/PredefinedSetOfPages">pages</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/sejda/model/pdf/page/PredefinedSetOfPages;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/sejda/model/pdf/page/PredefinedSetOfPages">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.SplitParametersBuilder.&lt;init&gt;</op>
                     <op code="put">pages</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/parameter/SimpleSplitParameters;"
                       name="build"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/sejda/model/parameter/SimpleSplitParameters</return>
                  <ops>
                     <op code="get">pages</op>
                     <op code="call">org.sejda.model.parameter.SimpleSplitParameters.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton$SimpleSplitParametersBuilder.isCompress</op>
                     <op code="call">org.sejda.model.parameter.SimpleSplitParameters.setCompress</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton$SimpleSplitParametersBuilder.existingOutput</op>
                     <op code="call">org.sejda.model.parameter.SimpleSplitParameters.setExistingOutputPolicy</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton$SimpleSplitParametersBuilder.getVersion</op>
                     <op code="call">org.sejda.model.parameter.SimpleSplitParameters.setVersion</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton$SimpleSplitParametersBuilder.getOutput</op>
                     <op code="call">org.sejda.model.parameter.SimpleSplitParameters.setOutput</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton$SimpleSplitParametersBuilder.getPrefix</op>
                     <op code="call">org.sejda.model.parameter.SimpleSplitParameters.setOutputPrefix</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton$SimpleSplitParametersBuilder.getSource</op>
                     <op code="call">org.sejda.model.parameter.SimpleSplitParameters.addSource</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton$SimpleSplitParametersBuilder.getOptimizationPolicy</op>
                     <op code="call">org.sejda.model.parameter.SimpleSplitParameters.setOptimizationPolicy</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton$SimpleSplitParametersBuilder.isDiscardBookmarks</op>
                     <op code="call">org.sejda.model.parameter.SimpleSplitParameters.discardOutline</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitAfterPredefinedSetOfPagesRadioButton"><!--Package: org.pdfsam.split; name: org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton; file: org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/ComboBox">combo</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljavafx/scene/control/ComboBox;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/scene/control/ComboBox">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.RadioButton.&lt;init&gt;</op>
                     <op code="put">combo</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.selectFirst</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="resetView"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">combo</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.selectFirst</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/function/Consumer;)Lorg/pdfsam/split/SplitAfterPredefinedSetOfPagesRadioButton$SimpleSplitParametersBuilder;"
                       name="getBuilder"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>Lorg/pdfsam/split/SplitAfterPredefinedSetOfPagesRadioButton$SimpleSplitParametersBuilder</return>
                  <ops>
                     <op code="get">combo</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton$SimpleSplitParametersBuilder.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="saveStateTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton.isSelected</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">combo</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.sejda.model.pdf.page.PredefinedSetOfPages.toString</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="call">java.util.Map.put</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="get">combo</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitAfterRadioButton"><!--Package: org.pdfsam.split; name: org.pdfsam.split.SplitAfterRadioButton; file: org.pdfsam.split.SplitAfterRadioButton-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/commons/ValidableTextField">field</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/commons/ValidableTextField;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/ValidableTextField">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.RadioButton.&lt;init&gt;</op>
                     <op code="put">field</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setOnEnterValidation</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setEnableInvalidStyle</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setPromptText</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.support.validation.Validators.regexMatching</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setValidator</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setErrorMessage</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/function/Consumer;)Lorg/pdfsam/split/SplitAfterRadioButton$SplitByPageParametersBuilder;"
                       name="getBuilder"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>Lorg/pdfsam/split/SplitAfterRadioButton$SplitByPageParametersBuilder</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.validate</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.sejda.conversion.PageNumbersListAdapter.&lt;init&gt;</op>
                     <op code="call">org.sejda.conversion.PageNumbersListAdapter.getPageNumbers</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton$SplitByPageParametersBuilder.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="saveStateTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton.isSelected</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="call">java.util.Map.put</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                     <op code="get">field</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="resetView"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.clear</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitModule"><!--Package: org.pdfsam.split; name: org.pdfsam.split.SplitModule; file: org.pdfsam.split.SplitModule-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE_ID</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/single/TaskParametersBuilderSingleSelectionPane">selectionPane</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField">destinationDirectoryField</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/PdfDestinationPane">destinationPane</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/split/SplitOptionsPane">splitOptions</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/prefix/PrefixPane">prefix</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/ModuleDescriptor">descriptor</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField;Lorg/pdfsam/ui/io/PdfDestinationPane;Lorg/pdfsam/ui/module/Footer;Lorg/pdfsam/ui/prefix/PrefixPane;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField">?</arg>
                     <arg type="Lorg/pdfsam/ui/io/PdfDestinationPane">?</arg>
                     <arg type="Lorg/pdfsam/ui/module/Footer">?</arg>
                     <arg type="Lorg/pdfsam/ui/prefix/PrefixPane">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.BaseTaskExecutionModule.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.split.SplitOptionsPane.&lt;init&gt;</op>
                     <op code="put">splitOptions</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.builder</op>
                     <op code="get_static">org.pdfsam.module.ModuleCategory.SPLIT</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.category</op>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.SINGLE_PDF</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.inputTypes</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.name</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.description</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.HIGH</op>
                     <op code="call">org.pdfsam.module.ModulePriority.getPriority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.priority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.supportURL</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.build</op>
                     <op code="put">descriptor</op>
                     <op code="put">destinationDirectoryField</op>
                     <op code="put">destinationPane</op>
                     <op code="call">org.pdfsam.split.SplitModule.id</op>
                     <op code="call">org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane.&lt;init&gt;</op>
                     <op code="put">selectionPane</op>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane.setPromptText</op>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane.addOnLoaded</op>
                     <op code="put">prefix</op>
                     <op code="call">org.pdfsam.split.SplitModule.settingPanel</op>
                     <op code="call">org.pdfsam.split.SplitModule.initModuleSettingsPanel</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/ModuleDescriptor;"
                       name="descriptor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/ModuleDescriptor</return>
                  <ops>
                     <op code="get">descriptor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="onSaveWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane.saveStateTo</op>
                     <op code="get">splitOptions</op>
                     <op code="call">org.pdfsam.split.SplitOptionsPane.saveStateTo</op>
                     <op code="get">destinationDirectoryField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.saveStateTo</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.saveStateTo</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.saveStateTo</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="onLoadWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane.restoreStateFrom</op>
                     <op code="get">splitOptions</op>
                     <op code="call">org.pdfsam.split.SplitOptionsPane.restoreStateFrom</op>
                     <op code="get">destinationDirectoryField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.restoreStateFrom</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.restoreStateFrom</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.restoreStateFrom</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/function/Consumer;)Lorg/apache/commons/lang3/builder/Builder;"
                       name="getBuilder"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>Lorg/apache/commons/lang3/builder/Builder</return>
                  <ops>
                     <op code="get">splitOptions</op>
                     <op code="call">org.pdfsam.split.SplitOptionsPane.getBuilder</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                     <op code="call">java.util.Optional.orElse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/VBox;"
                       name="settingPanel"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Ljavafx/scene/layout/VBox</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="get_static">javafx.geometry.Pos.TOP_CENTER</op>
                     <op code="call">javafx.scene.layout.VBox.setAlignment</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.support.Views.titledPane</op>
                     <op code="get">prefix</op>
                     <op code="get_static">org.sejda.model.prefix.Prefix.CURRENTPAGE</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.addMenuItemFor</op>
                     <op code="get">prefix</op>
                     <op code="get_static">org.sejda.model.prefix.Prefix.FILENUMBER</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.addMenuItemFor</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.addMenuItemFor</op>
                     <op code="call">javafx.scene.layout.VBox.getChildren</op>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">splitOptions</op>
                     <op code="call">org.pdfsam.ui.support.Views.titledPane</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.support.Views.titledPane</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/ClearModuleEvent;)V"
                       name="onClearModule"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/ClearModuleEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">clearEverything</op>
                     <op code="get">splitOptions</op>
                     <op code="call">org.pdfsam.split.SplitOptionsPane.resetView</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.resetView</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.resetView</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="id"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/Node;"
                       name="graphic"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/Node</return>
                  <ops>
                     <op code="call">javafx.scene.image.ImageView.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitAfterRadioButtonTest"><!--Package: org.pdfsam.split; name: org.pdfsam.split.SplitAfterRadioButtonTest; file: org.pdfsam.split.SplitAfterRadioButtonTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clear</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">onError</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/split/SplitAfterRadioButton">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clear</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">onError</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setId</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton.setId</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="valid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButtonTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validWhiteSpace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButtonTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButtonTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.INVALID</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidZero"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButtonTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.INVALID</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidContainsZero"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButtonTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.INVALID</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidBuilder"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButtonTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get">victim</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton.getBuilder</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="builder"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButtonTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="get">victim</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton.getBuilder</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton$SplitByPageParametersBuilder.compress</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton$SplitByPageParametersBuilder.output</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton$SplitByPageParametersBuilder.existingOutput</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton$SplitByPageParametersBuilder.prefix</op>
                     <op code="call">org.sejda.model.input.PdfFileSource.newInstanceNoPassword</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton$SplitByPageParametersBuilder.source</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton$SplitByPageParametersBuilder.version</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton$SplitByPageParametersBuilder.build</op>
                     <op code="call">org.sejda.model.parameter.SplitByPagesParameters.isCompress</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.sejda.model.parameter.SplitByPagesParameters.getExistingOutputPolicy</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.sejda.model.parameter.SplitByPagesParameters.getVersion</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.SplitByPagesParameters.getPages</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.hamcrest.Matchers.contains</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                     <op code="call">org.sejda.model.parameter.SplitByPagesParameters.getOutputPrefix</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.SplitByPagesParameters.getOutput</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.SplitByPagesParameters.getSourceList</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveStateSelected"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButtonTest.clickOn</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButtonTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton.saveStateTo</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveStateNotSelected"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton.saveStateTo</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton.restoreStateFrom</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton.isSelected</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="reset"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButtonTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.DIGIT3</op>
                     <op code="call">org.testfx.api.FxRobotInterface.type</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitAfterRadioButton$SplitByPageParametersBuilder"><!--Package: org.pdfsam.split; name: org.pdfsam.split.SplitAfterRadioButton$SplitByPageParametersBuilder; file: org.pdfsam.split.SplitAfterRadioButton$SplitByPageParametersBuilder-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/List">pages</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/List;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.SplitParametersBuilder.&lt;init&gt;</op>
                     <op code="put">pages</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/parameter/SplitByPagesParameters;"
                       name="build"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/sejda/model/parameter/SplitByPagesParameters</return>
                  <ops>
                     <op code="call">org.sejda.model.parameter.SplitByPagesParameters.&lt;init&gt;</op>
                     <op code="get">pages</op>
                     <op code="call">org.sejda.model.parameter.SplitByPagesParameters.addPages</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton$SplitByPageParametersBuilder.isCompress</op>
                     <op code="call">org.sejda.model.parameter.SplitByPagesParameters.setCompress</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton$SplitByPageParametersBuilder.existingOutput</op>
                     <op code="call">org.sejda.model.parameter.SplitByPagesParameters.setExistingOutputPolicy</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton$SplitByPageParametersBuilder.getVersion</op>
                     <op code="call">org.sejda.model.parameter.SplitByPagesParameters.setVersion</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton$SplitByPageParametersBuilder.getOutput</op>
                     <op code="call">org.sejda.model.parameter.SplitByPagesParameters.setOutput</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton$SplitByPageParametersBuilder.getPrefix</op>
                     <op code="call">org.sejda.model.parameter.SplitByPagesParameters.setOutputPrefix</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton$SplitByPageParametersBuilder.getSource</op>
                     <op code="call">org.sejda.model.parameter.SplitByPagesParameters.addSource</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton$SplitByPageParametersBuilder.getOptimizationPolicy</op>
                     <op code="call">org.sejda.model.parameter.SplitByPagesParameters.setOptimizationPolicy</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton$SplitByPageParametersBuilder.isDiscardBookmarks</op>
                     <op code="call">org.sejda.model.parameter.SplitByPagesParameters.discardOutline</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitByEveryRadioButtonTest"><!--Package: org.pdfsam.split; name: org.pdfsam.split.SplitByEveryRadioButtonTest; file: org.pdfsam.split.SplitByEveryRadioButtonTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clear</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">onError</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/split/SplitByEveryRadioButton">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clear</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">onError</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setId</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton.setId</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="valid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButtonTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.DIGIT2</op>
                     <op code="call">org.testfx.api.FxRobotInterface.type</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButtonTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.INVALID</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidMaxPage"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get">victim</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton.setMaxPages</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButtonTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.INVALID</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidBuilder"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButtonTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get">victim</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton.getBuilder</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="builder"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButtonTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.DIGIT6</op>
                     <op code="call">org.testfx.api.FxRobotInterface.type</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="get">victim</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton.getBuilder</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder.compress</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder.output</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder.existingOutput</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder.prefix</op>
                     <op code="call">org.sejda.model.input.PdfFileSource.newInstanceNoPassword</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder.source</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder.version</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton$SplitByEveryXPagesParametersBuilder.build</op>
                     <op code="call">org.sejda.model.parameter.SplitByEveryXPagesParameters.isCompress</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.sejda.model.parameter.SplitByEveryXPagesParameters.getExistingOutputPolicy</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.sejda.model.parameter.SplitByEveryXPagesParameters.getVersion</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.SplitByEveryXPagesParameters.getPages</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.hamcrest.Matchers.contains</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                     <op code="call">org.sejda.model.parameter.SplitByEveryXPagesParameters.getOutputPrefix</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.SplitByEveryXPagesParameters.getOutput</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.SplitByEveryXPagesParameters.getSourceList</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveStateSelected"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButtonTest.clickOn</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButtonTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton.saveStateTo</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveStateNotSelected"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton.saveStateTo</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton.restoreStateFrom</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton.isSelected</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="reset"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButtonTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.DIGIT3</op>
                     <op code="call">org.testfx.api.FxRobotInterface.type</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitModule$ModuleConfig"><!--Package: org.pdfsam.split; name: org.pdfsam.split.SplitModule$ModuleConfig; file: org.pdfsam.split.SplitModule$ModuleConfig-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField;"
                       name="destinationDirectoryField"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField;Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/io/PdfDestinationPane;"
                       name="destinationPane"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField">?</arg>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/io/PdfDestinationPane</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.io.PdfDestinationPane$DestinationPanelFields.DISCARD_BOOKMARKS</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.enableSameAsSourceItem</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/module/RunButton;Lorg/pdfsam/ui/module/OpenButton;)Lorg/pdfsam/ui/module/Footer;"
                       name="footer"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/module/RunButton">?</arg>
                     <arg type="Lorg/pdfsam/ui/module/OpenButton">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/module/Footer</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.Footer.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/module/OpenButton;"
                       name="openButton"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/module/OpenButton</return>
                  <ops>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.MULTIPLE_PDF</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/prefix/PrefixPane;"
                       name="prefixPane"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/prefix/PrefixPane</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitAfterPredefinedSetOfPagesRadioButtonTest"><!--Package: org.pdfsam.split; name: org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButtonTest; file: org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButtonTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clear</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">onError</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/split/SplitAfterPredefinedSetOfPagesRadioButton">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clear</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">onError</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.ComboBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.ComboBox.setId</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.ALL_PAGES</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.EVEN_PAGES</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.ODD_PAGES</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton.setId</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="builder"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButtonTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="get">victim</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton.getBuilder</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="builderDisabledOptimization"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButtonTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get_static">java.lang.Boolean.FALSE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.lang.System.setProperty</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveStateSelected"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButtonTest.clickOn</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButtonTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveStateNotSelected"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryComboBox</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.EVEN_PAGES</op>
                     <op code="call">org.sejda.model.pdf.page.PredefinedSetOfPages.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton.isSelected</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.EVEN_PAGES</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="reset"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButtonTest.clickOn</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButtonTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryComboBox</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.ODD_PAGES</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.ALL_PAGES</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SplitOptionsPane"><!--Package: org.pdfsam.split; name: org.pdfsam.split.SplitOptionsPane; file: org.pdfsam.split.SplitOptionsPane-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/ToggleGroup">group</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/split/SplitAfterPredefinedSetOfPagesRadioButton">splitAfterPredefined</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/split/SplitAfterRadioButton">splitAfter</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/split/SplitByEveryRadioButton">splitByEvery</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.ToggleGroup.&lt;init&gt;</op>
                     <op code="put">group</op>
                     <op code="call">javafx.scene.control.ComboBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.ALL_PAGES</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.EVEN_PAGES</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.pdf.page.PredefinedSetOfPages.ODD_PAGES</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton.&lt;init&gt;</op>
                     <op code="put">splitAfterPredefined</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton.&lt;init&gt;</op>
                     <op code="put">splitAfter</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton.&lt;init&gt;</op>
                     <op code="put">splitByEvery</op>
                     <op code="get">group</op>
                     <op code="call">org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPane.&lt;init&gt;</op>
                     <op code="get">splitAfterPredefined</op>
                     <op code="get">group</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton.setToggleGroup</op>
                     <op code="get">splitAfter</op>
                     <op code="get">group</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton.setToggleGroup</op>
                     <op code="get">splitByEvery</op>
                     <op code="get">group</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton.setToggleGroup</op>
                     <op code="get">splitAfterPredefined</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPane.addRow</op>
                     <op code="get">splitAfter</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPane.addRow</op>
                     <op code="get">splitByEvery</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">org.pdfsam.ui.commons.RadioButtonDrivenTextFieldsPane.addRow</op>
                     <op code="get">splitAfterPredefined</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton.setSelected</op>
                     <op code="call">org.pdfsam.split.SplitOptionsPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.split.SplitOptionsPane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Integer;)V"
                       name="setMaxPages"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/lang/Integer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">splitByEvery</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton.setMaxPages</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/function/Consumer;)Lorg/pdfsam/support/params/SinglePdfSourceMultipleOutputParametersBuilder;"
                       name="getBuilder"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>Lorg/pdfsam/support/params/SinglePdfSourceMultipleOutputParametersBuilder</return>
                  <ops>
                     <op code="get">group</op>
                     <op code="call">javafx.scene.control.ToggleGroup.getSelectedToggle</op>
                     <op code="call">org.pdfsam.split.SplitParametersBuilderCreator.getBuilder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="saveStateTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">splitAfterPredefined</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton.saveStateTo</op>
                     <op code="get">splitAfter</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton.saveStateTo</op>
                     <op code="get">splitByEvery</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton.saveStateTo</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">splitAfterPredefined</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton.restoreStateFrom</op>
                     <op code="get">splitAfter</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton.restoreStateFrom</op>
                     <op code="get">splitByEvery</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton.restoreStateFrom</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="resetView"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">splitAfterPredefined</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton.resetView</op>
                     <op code="get">splitAfter</op>
                     <op code="call">org.pdfsam.split.SplitAfterRadioButton.resetView</op>
                     <op code="get">splitByEvery</op>
                     <op code="call">org.pdfsam.split.SplitByEveryRadioButton.resetView</op>
                     <op code="get">splitAfterPredefined</op>
                     <op code="call">org.pdfsam.split.SplitAfterPredefinedSetOfPagesRadioButton.setSelected</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.premium">
         <class id="PremiumModulesEventTest"><!--Package: org.pdfsam.premium; name: org.pdfsam.premium.PremiumModulesEventTest; file: org.pdfsam.premium.PremiumModulesEventTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.premium.PremiumModulesEvent.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PremiumServiceConfig"><!--Package: org.pdfsam.premium; name: org.pdfsam.premium.PremiumServiceConfig; file: org.pdfsam.premium.PremiumServiceConfig-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/premium/DefaultPremiumModulesService;)Lorg/pdfsam/premium/PremiumModulesService;"
                       name="news"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/premium/DefaultPremiumModulesService">?</arg>
                  </args>
                  <return>Lorg/pdfsam/premium/PremiumModulesService</return>
               </method>
            </methods>
         </class>
         <class id="PremiumModule"><!--Package: org.pdfsam.premium; name: org.pdfsam.premium.PremiumModule; file: org.pdfsam.premium.PremiumModule-->
            <attributes>
               <attribute final="false" public="false" static="false" type="I">id</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">name</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">description</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">url</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/premium/PremiumProduct">product</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="getId"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">id</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(I)V"
                       name="setId"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">id</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getName"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">name</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="setName"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">name</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getDescription"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">description</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="setDescription"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">description</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getUrl"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">url</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="setUrl"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">url</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/premium/PremiumProduct;"
                       name="getProduct"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/premium/PremiumProduct</return>
                  <ops>
                     <op code="get">product</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="setProduct"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.String.toUpperCase</op>
                     <op code="call">org.pdfsam.premium.PremiumProduct.valueOf</op>
                     <op code="put">product</op>
                     <op code="get_static">org.pdfsam.premium.PremiumProduct.OTHER</op>
                     <op code="put">product</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DefaultPremiumModulesServiceTest"><!--Package: org.pdfsam.premium; name: org.pdfsam.premium.DefaultPremiumModulesServiceTest; file: org.pdfsam.premium.DefaultPremiumModulesServiceTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/premium/DefaultPremiumModulesService">victim</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/Pdfsam">pdfsam</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">pdfsam</op>
                     <op code="get">pdfsam</op>
                     <op code="call">org.pdfsam.premium.DefaultPremiumModulesService.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testGetLatestNews"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">org.apache.commons.io.FileUtils.copyInputStreamToFile</op>
                     <op code="get">pdfsam</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.PREMIUM_MODULES_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.io.File.toURI</op>
                     <op code="call">java.net.URI.toString</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.premium.DefaultPremiumModulesService.getPremiumModules</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.pdfsam.premium.PremiumModule.getName</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.pdfsam.premium.PremiumModule.getDescription</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.pdfsam.premium.PremiumModule.getId</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.pdfsam.premium.PremiumProduct.VISUAL</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.pdfsam.premium.PremiumModule.getProduct</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.pdfsam.premium.PremiumModule.getUrl</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DefaultPremiumModulesService"><!--Package: org.pdfsam.premium; name: org.pdfsam.premium.DefaultPremiumModulesService; file: org.pdfsam.premium.DefaultPremiumModulesService-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/Pdfsam">pdfsam</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/Pdfsam;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/Pdfsam">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">pdfsam</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/List;"
                       name="getPremiumModules"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="get_static">com.fasterxml.jackson.jr.ob.JSON.std</op>
                     <op code="get_static">com.fasterxml.jackson.jr.ob.JSON$Feature.READ_ONLY</op>
                     <op code="call">com.fasterxml.jackson.jr.ob.JSON.with</op>
                     <op code="get">pdfsam</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.PREMIUM_MODULES_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">java.net.URL.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.io.NetUtils.urlToStream</op>
                     <op code="call">com.fasterxml.jackson.jr.ob.JSON.listOfFrom</op>
                     <op code="get_static">org.pdfsam.premium.DefaultPremiumModulesService.LOG</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.slf4j.Logger.warn</op>
                     <op code="call">java.util.Collections.emptyList</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.premium.DefaultPremiumModulesService.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="FetchPremiumModulesRequest"><!--Package: org.pdfsam.premium; name: org.pdfsam.premium.FetchPremiumModulesRequest; file: org.pdfsam.premium.FetchPremiumModulesRequest-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Lorg/pdfsam/premium/FetchPremiumModulesRequest">INSTANCE</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.premium.FetchPremiumModulesRequest.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.premium.FetchPremiumModulesRequest.INSTANCE</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PremiumModuleTest"><!--Package: org.pdfsam.premium; name: org.pdfsam.premium.PremiumModuleTest; file: org.pdfsam.premium.PremiumModuleTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="product"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.premium.PremiumModule.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.premium.PremiumModule.setProduct</op>
                     <op code="get_static">org.pdfsam.premium.PremiumProduct.VISUAL</op>
                     <op code="call">org.pdfsam.premium.PremiumModule.getProduct</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.premium.PremiumModule.setProduct</op>
                     <op code="get_static">org.pdfsam.premium.PremiumProduct.OTHER</op>
                     <op code="call">org.pdfsam.premium.PremiumModule.getProduct</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PremiumModulesController"><!--Package: org.pdfsam.premium; name: org.pdfsam.premium.PremiumModulesController; file: org.pdfsam.premium.PremiumModulesController-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/premium/PremiumModulesService">service</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/premium/PremiumModulesService;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/premium/PremiumModulesService">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">service</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/premium/FetchPremiumModulesRequest;)V"
                       name="fetchPremium"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/premium/FetchPremiumModulesRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.premium.PremiumModulesController.LOG</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.slf4j.Logger.debug</op>
                     <op code="get">service</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.concurrent.CompletableFuture.supplyAsync</op>
                     <op code="call">java.util.concurrent.CompletableFuture.thenAcceptAsync</op>
                     <op code="call">java.util.concurrent.CompletableFuture.whenComplete</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.premium.PremiumModulesController.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PremiumModulesEvent"><!--Package: org.pdfsam.premium; name: org.pdfsam.premium.PremiumModulesEvent; file: org.pdfsam.premium.PremiumModulesEvent-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Ljava/util/List">premiumModules</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/List;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">java.util.Collections.unmodifiableList</op>
                     <op code="put">premiumModules</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PremiumModulesControllerTest"><!--Package: org.pdfsam.premium; name: org.pdfsam.premium.PremiumModulesControllerTest; file: org.pdfsam.premium.PremiumModulesControllerTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/premium/PremiumModulesService">service</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/premium/PremiumModulesController">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">service</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.premium.PremiumModulesController.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="fetchPremiumModules"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.premium.PremiumModule.&lt;init&gt;</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.premium.PremiumModulesService.getPremiumModules</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.premium.FetchPremiumModulesRequest.INSTANCE</op>
                     <op code="call">org.pdfsam.premium.PremiumModulesController.fetchPremium</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.premium.PremiumModulesService.getPremiumModules</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="get">premiumModules</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="get">premiumModules</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="emptyFetchNews"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.premium.PremiumModulesService.getPremiumModules</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.util.Collections.emptyList</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.premium.FetchPremiumModulesRequest.INSTANCE</op>
                     <op code="call">org.pdfsam.premium.PremiumModulesController.fetchPremium</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.premium.PremiumModulesService.getPremiumModules</op>
                     <op code="call">org.mockito.Mockito.after</op>
                     <op code="call">org.mockito.verification.VerificationAfterDelay.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullFetchNews"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.premium.PremiumModulesService.getPremiumModules</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.premium.FetchPremiumModulesRequest.INSTANCE</op>
                     <op code="call">org.pdfsam.premium.PremiumModulesController.fetchPremium</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.premium.PremiumModulesService.getPremiumModules</op>
                     <op code="call">org.mockito.Mockito.after</op>
                     <op code="call">org.mockito.verification.VerificationAfterDelay.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="failingFetchNews"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.premium.PremiumModulesService.getPremiumModules</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.RuntimeException.&lt;init&gt;</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenThrow</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.premium.FetchPremiumModulesRequest.INSTANCE</op>
                     <op code="call">org.pdfsam.premium.PremiumModulesController.fetchPremium</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.Mockito.timeout</op>
                     <op code="call">org.mockito.verification.VerificationWithTimeout.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.premium.PremiumModulesService.getPremiumModules</op>
                     <op code="call">org.mockito.Mockito.after</op>
                     <op code="call">org.mockito.verification.VerificationAfterDelay.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.support.filter">
         <class id="BaseFileChooserFilterTest"><!--Package: org.pdfsam.support.filter; name: org.pdfsam.support.filter.BaseFileChooserFilterTest; file: org.pdfsam.support.filter.BaseFileChooserFilterTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/io/File">directory</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">directory</op>
                     <op code="get">directory</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">directory</op>
                     <op code="call">java.io.File.isDirectory</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testJar"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.JAR</op>
                     <op code="call">org.pdfsam.support.filter.BaseFileChooserFilter.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.support.filter.BaseFileChooserFilter.accept</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">directory</op>
                     <op code="call">org.pdfsam.support.filter.BaseFileChooserFilter.accept</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.support.filter.BaseFileChooserFilter.accept</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="FileFilterTypeTest"><!--Package: org.pdfsam.support.filter; name: org.pdfsam.support.filter.FileFilterTypeTest; file: org.pdfsam.support.filter.FileFilterTypeTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/io/File">failing</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/io/File">directory</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">failing</op>
                     <op code="get">failing</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">failing</op>
                     <op code="call">java.io.File.isDirectory</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.FALSE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">directory</op>
                     <op code="get">directory</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">directory</op>
                     <op code="call">java.io.File.isDirectory</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testCsv"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.CSV</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.CSV</op>
                     <op code="get">failing</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.CSV</op>
                     <op code="get">directory</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testJar"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.JAR</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.JAR</op>
                     <op code="get">failing</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.JAR</op>
                     <op code="get">directory</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testTxt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.TXT</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.TXT</op>
                     <op code="get">failing</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.TXT</op>
                     <op code="get">directory</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testXml"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.XML</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.XML</op>
                     <op code="get">failing</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testPdf"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.PDF</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.PDF</op>
                     <op code="get">failing</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.PDF</op>
                     <op code="get">directory</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testHtml"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.HTML</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.HTML</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.HTML</op>
                     <op code="get">failing</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testDirs"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">java.io.File.isDirectory</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.DIRECTORIES</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.DIRECTORIES</op>
                     <op code="get">failing</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get_static">org.pdfsam.support.filter.FileFilterType.DIRECTORIES</op>
                     <op code="get">directory</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BaseFileChooserFilter"><!--Package: org.pdfsam.support.filter; name: org.pdfsam.support.filter.BaseFileChooserFilter; file: org.pdfsam.support.filter.BaseFileChooserFilter-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/support/filter/FileFilterType">type</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/support/filter/FileFilterType;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/support/filter/FileFilterType">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javax.swing.filechooser.FileFilter.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">type</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/File;)Z"
                       name="accept"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">org.pdfsam.support.filter.BaseFileChooserFilter.isDirectory</op>
                     <op code="get">type</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/File;)Z"
                       name="isDirectory"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">java.io.File.isDirectory</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getDescription"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">type</op>
                     <op code="call">org.pdfsam.support.filter.FileFilterType.getDescription</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.merge">
         <class id="MergeModule"><!--Package: org.pdfsam.merge; name: org.pdfsam.merge.MergeModule; file: org.pdfsam.merge.MergeModule-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE_ID</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/merge/MergeSelectionPane">selectionPane</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/merge/MergeOptionsPane">mergeOptions</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/BrowsablePdfOutputField">destinationFileField</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/PdfDestinationPane">destinationPane</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/ModuleDescriptor">descriptor</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/io/BrowsablePdfOutputField;Lorg/pdfsam/ui/io/PdfDestinationPane;Lorg/pdfsam/ui/module/Footer;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/BrowsablePdfOutputField">?</arg>
                     <arg type="Lorg/pdfsam/ui/io/PdfDestinationPane">?</arg>
                     <arg type="Lorg/pdfsam/ui/module/Footer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.BaseTaskExecutionModule.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.merge.MergeSelectionPane.&lt;init&gt;</op>
                     <op code="put">selectionPane</op>
                     <op code="call">org.pdfsam.merge.MergeOptionsPane.&lt;init&gt;</op>
                     <op code="put">mergeOptions</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.builder</op>
                     <op code="get_static">org.pdfsam.module.ModuleCategory.MERGE</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.category</op>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.MULTIPLE_PDF</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.inputTypes</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.name</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.description</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.HIGH</op>
                     <op code="call">org.pdfsam.module.ModulePriority.getPriority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.priority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.supportURL</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.build</op>
                     <op code="put">descriptor</op>
                     <op code="put">destinationFileField</op>
                     <op code="put">destinationPane</op>
                     <op code="call">org.pdfsam.merge.MergeModule.settingPanel</op>
                     <op code="call">org.pdfsam.merge.MergeModule.initModuleSettingsPanel</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/ModuleDescriptor;"
                       name="descriptor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/ModuleDescriptor</return>
                  <ops>
                     <op code="get">descriptor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="onSaveWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.merge.MergeSelectionPane.saveStateTo</op>
                     <op code="get">mergeOptions</op>
                     <op code="call">org.pdfsam.merge.MergeOptionsPane.saveStateTo</op>
                     <op code="get">destinationFileField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfOutputField.saveStateTo</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.saveStateTo</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="onLoadWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.merge.MergeSelectionPane.restoreStateFrom</op>
                     <op code="get">mergeOptions</op>
                     <op code="call">org.pdfsam.merge.MergeOptionsPane.restoreStateFrom</op>
                     <op code="get">destinationFileField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfOutputField.restoreStateFrom</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.restoreStateFrom</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/function/Consumer;)Lorg/pdfsam/merge/MergeParametersBuilder;"
                       name="getBuilder"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>Lorg/pdfsam/merge/MergeParametersBuilder</return>
                  <ops>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.&lt;init&gt;</op>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.merge.MergeSelectionPane.apply</op>
                     <op code="get">mergeOptions</op>
                     <op code="call">org.pdfsam.merge.MergeOptionsPane.apply</op>
                     <op code="get">destinationFileField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfOutputField.apply</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.apply</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/VBox;"
                       name="settingPanel"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Ljavafx/scene/layout/VBox</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="get_static">javafx.geometry.Pos.TOP_CENTER</op>
                     <op code="call">javafx.scene.layout.VBox.setAlignment</op>
                     <op code="get">selectionPane</op>
                     <op code="get_static">javafx.scene.layout.Priority.ALWAYS</op>
                     <op code="call">javafx.scene.layout.VBox.setVgrow</op>
                     <op code="call">javafx.scene.layout.VBox.getChildren</op>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">mergeOptions</op>
                     <op code="call">org.pdfsam.ui.support.Views.titledPane</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.support.Views.titledPane</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="id"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/ClearModuleEvent;)V"
                       name="onClearModule"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/ClearModuleEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">clearEverything</op>
                     <op code="get">mergeOptions</op>
                     <op code="call">org.pdfsam.merge.MergeOptionsPane.resetView</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.resetView</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/Node;"
                       name="graphic"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/Node</return>
                  <ops>
                     <op code="call">javafx.scene.image.ImageView.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MergeParametersBuilder"><!--Package: org.pdfsam.merge; name: org.pdfsam.merge.MergeParametersBuilder; file: org.pdfsam.merge.MergeParametersBuilder-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Set">inputs</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/outline/OutlinePolicy">outlinePolicy</attribute>
               <attribute final="false" public="false" static="false" type="Z">blankIfOdd</attribute>
               <attribute final="false" public="false" static="false" type="Z">footer</attribute>
               <attribute final="false" public="false" static="false" type="Z">normalize</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/pdf/form/AcroFormPolicy">formsPolicy</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/toc/ToCPolicy">tocPolicy</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/output/FileTaskOutput">output</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.AbstractPdfOutputParametersBuilder.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.collection.NullSafeSet.&lt;init&gt;</op>
                     <op code="put">inputs</op>
                     <op code="get_static">org.sejda.model.outline.OutlinePolicy.RETAIN</op>
                     <op code="put">outlinePolicy</op>
                     <op code="get_static">org.sejda.model.pdf.form.AcroFormPolicy.MERGE</op>
                     <op code="put">formsPolicy</op>
                     <op code="get_static">org.sejda.model.toc.ToCPolicy.NONE</op>
                     <op code="put">tocPolicy</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/input/PdfMergeInput;)V"
                       name="addInput"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/sejda/model/input/PdfMergeInput">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">inputs</op>
                     <op code="call">java.util.Set.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="hasInput"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">inputs</op>
                     <op code="call">java.util.Set.isEmpty</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/outline/OutlinePolicy;)V"
                       name="outlinePolicy"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/sejda/model/outline/OutlinePolicy">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">outlinePolicy</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)V"
                       name="blankPageIfOdd"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">blankIfOdd</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)V"
                       name="footer"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">footer</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)V"
                       name="normalize"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">normalize</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/pdf/form/AcroFormPolicy;)V"
                       name="acroFormsPolicy"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/sejda/model/pdf/form/AcroFormPolicy">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">formsPolicy</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/toc/ToCPolicy;)V"
                       name="tocPolicy"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/sejda/model/toc/ToCPolicy">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">tocPolicy</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/output/FileTaskOutput;)V"
                       name="output"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/output/FileTaskOutput">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">output</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/parameter/MergeParameters;"
                       name="build"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/sejda/model/parameter/MergeParameters</return>
                  <ops>
                     <op code="call">org.sejda.model.parameter.MergeParameters.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.isCompress</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.setCompress</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.existingOutput</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.setExistingOutputPolicy</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.getVersion</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.setVersion</op>
                     <op code="get">inputs</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.Set.forEach</op>
                     <op code="get">outlinePolicy</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.setOutlinePolicy</op>
                     <op code="get">blankIfOdd</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.setBlankPageIfOdd</op>
                     <op code="get">formsPolicy</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.setAcroFormPolicy</op>
                     <op code="get">tocPolicy</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.setTableOfContentsPolicy</op>
                     <op code="get">output</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.setOutput</op>
                     <op code="get">footer</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.setFilenameFooter</op>
                     <op code="get">normalize</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.setNormalizePageSizes</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MergeParametersBuilderTest"><!--Package: org.pdfsam.merge; name: org.pdfsam.merge.MergeParametersBuilderTest; file: org.pdfsam.merge.MergeParametersBuilderTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="build"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.compress</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.output</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.existingOutput</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.blankPageIfOdd</op>
                     <op code="get_static">org.sejda.model.pdf.form.AcroFormPolicy.DISCARD</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.acroFormsPolicy</op>
                     <op code="get_static">org.sejda.model.outline.OutlinePolicy.ONE_ENTRY_EACH_DOC</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.outlinePolicy</op>
                     <op code="get_static">org.sejda.model.toc.ToCPolicy.DOC_TITLES</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.tocPolicy</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.footer</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.normalize</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.sejda.model.input.PdfFileSource.newInstanceNoPassword</op>
                     <op code="call">org.sejda.model.input.PdfMergeInput.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.addInput</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.version</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.build</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.isCompress</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.getExistingOutputPolicy</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.getVersion</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.isBlankPageIfOdd</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.isFilenameFooter</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.isNormalizePageSizes</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.sejda.model.pdf.form.AcroFormPolicy.DISCARD</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.getAcroFormPolicy</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.outline.OutlinePolicy.ONE_ENTRY_EACH_DOC</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.getOutlinePolicy</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.toc.ToCPolicy.DOC_TITLES</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.getTableOfContentsPolicy</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.getOutput</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.MergeParameters.getInputList</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MergeOptionsPaneTest"><!--Package: org.pdfsam.merge; name: org.pdfsam.merge.MergeOptionsPaneTest; file: org.pdfsam.merge.MergeOptionsPaneTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="true"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">CLEAR_STUDIO</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/merge/MergeParametersBuilder">builder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">onError</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/merge/MergeOptionsPane">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">builder</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">onError</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.merge.MergeOptionsPane.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validSteps"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.merge.MergeOptionsPaneTest.clickOn</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.merge.MergeOptionsPane.apply</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.sejda.model.outline.OutlinePolicy.RETAIN</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.outlinePolicy</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.blankPageIfOdd</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.footer</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.normalize</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.sejda.model.pdf.form.AcroFormPolicy.MERGE</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.acroFormsPolicy</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.sejda.model.toc.ToCPolicy.NONE</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.tocPolicy</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onSaveWorkspace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.merge.MergeOptionsPaneTest.clickOn</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.merge.MergeOptionsPane.saveStateTo</op>
                     <op code="get_static">org.sejda.model.outline.OutlinePolicy.RETAIN</op>
                     <op code="call">org.sejda.model.outline.OutlinePolicy.toString</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">java.lang.Boolean.FALSE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">java.lang.Boolean.FALSE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.form.AcroFormPolicy.MERGE</op>
                     <op code="call">org.sejda.model.pdf.form.AcroFormPolicy.toString</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.toc.ToCPolicy.NONE</op>
                     <op code="call">org.sejda.model.toc.ToCPolicy.toString</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.merge.MergeOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryComboBox</op>
                     <op code="call">org.pdfsam.merge.MergeOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryComboBox</op>
                     <op code="call">org.pdfsam.merge.MergeOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryComboBox</op>
                     <op code="call">org.pdfsam.merge.MergeOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.merge.MergeOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.merge.MergeOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.outline.OutlinePolicy.ONE_ENTRY_EACH_DOC</op>
                     <op code="call">org.sejda.model.outline.OutlinePolicy.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get_static">org.sejda.model.pdf.form.AcroFormPolicy.MERGE_RENAMING_EXISTING_FIELDS</op>
                     <op code="call">org.sejda.model.pdf.form.AcroFormPolicy.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get_static">java.lang.Boolean.FALSE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get_static">org.sejda.model.toc.ToCPolicy.DOC_TITLES</op>
                     <op code="call">org.sejda.model.toc.ToCPolicy.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get_static">org.sejda.model.outline.OutlinePolicy.ONE_ENTRY_EACH_DOC</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.form.AcroFormPolicy.MERGE_RENAMING_EXISTING_FIELDS</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.toc.ToCPolicy.DOC_TITLES</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="reset"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.merge.MergeOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryComboBox</op>
                     <op code="call">org.pdfsam.merge.MergeOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryComboBox</op>
                     <op code="call">org.pdfsam.merge.MergeOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryComboBox</op>
                     <op code="call">org.pdfsam.merge.MergeOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.merge.MergeOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.merge.MergeOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.outline.OutlinePolicy.ONE_ENTRY_EACH_DOC</op>
                     <op code="call">org.sejda.model.outline.OutlinePolicy.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get_static">org.sejda.model.pdf.form.AcroFormPolicy.MERGE_RENAMING_EXISTING_FIELDS</op>
                     <op code="call">org.sejda.model.pdf.form.AcroFormPolicy.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get_static">org.sejda.model.toc.ToCPolicy.DOC_TITLES</op>
                     <op code="call">org.sejda.model.toc.ToCPolicy.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get_static">org.sejda.model.outline.OutlinePolicy.ONE_ENTRY_EACH_DOC</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.form.AcroFormPolicy.MERGE_RENAMING_EXISTING_FIELDS</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.toc.ToCPolicy.DOC_TITLES</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get_static">org.sejda.model.outline.OutlinePolicy.RETAIN</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.form.AcroFormPolicy.MERGE</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.toc.ToCPolicy.NONE</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.merge.MergeOptionsPaneTest.CLEAR_STUDIO</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MergeOptionsPane"><!--Package: org.pdfsam.merge; name: org.pdfsam.merge.MergeOptionsPane; file: org.pdfsam.merge.MergeOptionsPane-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/ComboBox">acroForms</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/CheckBox">blankIfOdd</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/CheckBox">footer</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/CheckBox">normalize</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/ComboBox">outline</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/ComboBox">toc</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.ComboBox.&lt;init&gt;</op>
                     <op code="put">acroForms</op>
                     <op code="call">javafx.scene.control.ComboBox.&lt;init&gt;</op>
                     <op code="put">outline</op>
                     <op code="call">javafx.scene.control.ComboBox.&lt;init&gt;</op>
                     <op code="put">toc</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.CheckBox.&lt;init&gt;</op>
                     <op code="put">blankIfOdd</op>
                     <op code="get">blankIfOdd</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">javafx.scene.control.CheckBox.setGraphic</op>
                     <op code="get">blankIfOdd</op>
                     <op code="call">javafx.scene.control.CheckBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.WITH_HELP</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get">blankIfOdd</op>
                     <op code="call">javafx.scene.control.CheckBox.setId</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.CheckBox.&lt;init&gt;</op>
                     <op code="put">footer</op>
                     <op code="get">footer</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">javafx.scene.control.CheckBox.setGraphic</op>
                     <op code="get">footer</op>
                     <op code="call">javafx.scene.control.CheckBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.WITH_HELP</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get">footer</op>
                     <op code="call">javafx.scene.control.CheckBox.setId</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.CheckBox.&lt;init&gt;</op>
                     <op code="put">normalize</op>
                     <op code="get">normalize</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">javafx.scene.control.CheckBox.setGraphic</op>
                     <op code="get">normalize</op>
                     <op code="call">javafx.scene.control.CheckBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.WITH_HELP</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get">normalize</op>
                     <op code="call">javafx.scene.control.CheckBox.setId</op>
                     <op code="call">javafx.scene.layout.GridPane.&lt;init&gt;</op>
                     <op code="get">acroForms</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.pdf.form.AcroFormPolicy.MERGE</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">acroForms</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.pdf.form.AcroFormPolicy.MERGE_RENAMING_EXISTING_FIELDS</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">acroForms</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.pdf.form.AcroFormPolicy.FLATTEN</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">acroForms</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.pdf.form.AcroFormPolicy.DISCARD</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">acroForms</op>
                     <op code="call">javafx.scene.control.ComboBox.setId</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="get">acroForms</op>
                     <op code="call">javafx.scene.control.ComboBox.setMaxWidth</op>
                     <op code="get">acroForms</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="get">outline</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.outline.OutlinePolicy.RETAIN</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">outline</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.outline.OutlinePolicy.DISCARD</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">outline</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.outline.OutlinePolicy.ONE_ENTRY_EACH_DOC</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">outline</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.outline.OutlinePolicy.RETAIN_AS_ONE_ENTRY</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">outline</op>
                     <op code="call">javafx.scene.control.ComboBox.setId</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="get">outline</op>
                     <op code="call">javafx.scene.control.ComboBox.setMaxWidth</op>
                     <op code="get">outline</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="get">toc</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.toc.ToCPolicy.NONE</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">toc</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.toc.ToCPolicy.FILE_NAMES</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">toc</op>
                     <op code="call">javafx.scene.control.ComboBox.getItems</op>
                     <op code="get_static">org.sejda.model.toc.ToCPolicy.DOC_TITLES</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">toc</op>
                     <op code="call">javafx.scene.control.ComboBox.setId</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="get">toc</op>
                     <op code="call">javafx.scene.control.ComboBox.setMaxWidth</op>
                     <op code="get">toc</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">javafx.scene.layout.GridPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.GRID</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.merge.MergeOptionsPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.merge.MergeOptionsPane.resetView</op>
                     <op code="call">org.pdfsam.merge.MergeOptionsPane.getChildren</op>
                     <op code="get">blankIfOdd</op>
                     <op code="get">footer</op>
                     <op code="get">normalize</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="resetView"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">blankIfOdd</op>
                     <op code="call">javafx.scene.control.CheckBox.setSelected</op>
                     <op code="get">footer</op>
                     <op code="call">javafx.scene.control.CheckBox.setSelected</op>
                     <op code="get">normalize</op>
                     <op code="call">javafx.scene.control.CheckBox.setSelected</op>
                     <op code="get">acroForms</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.selectFirst</op>
                     <op code="get">outline</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.selectFirst</op>
                     <op code="get">toc</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.selectFirst</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/merge/MergeParametersBuilder;Ljava/util/function/Consumer;)V"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/merge/MergeParametersBuilder">?</arg>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">outline</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.outlinePolicy</op>
                     <op code="get">acroForms</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.acroFormsPolicy</op>
                     <op code="get">toc</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getKey</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.tocPolicy</op>
                     <op code="get">blankIfOdd</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.blankPageIfOdd</op>
                     <op code="get">footer</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.footer</op>
                     <op code="get">normalize</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.normalize</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="saveStateTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">outline</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">acroForms</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">toc</op>
                     <op code="call">javafx.scene.control.ComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">blankIfOdd</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">footer</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">normalize</op>
                     <op code="call">javafx.scene.control.CheckBox.isSelected</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.util.Map.put</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                     <op code="get">blankIfOdd</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">javafx.scene.control.CheckBox.setSelected</op>
                     <op code="get">footer</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">javafx.scene.control.CheckBox.setSelected</op>
                     <op code="get">normalize</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">javafx.scene.control.CheckBox.setSelected</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MergeModule$ModuleConfig"><!--Package: org.pdfsam.merge; name: org.pdfsam.merge.MergeModule$ModuleConfig; file: org.pdfsam.merge.MergeModule$ModuleConfig-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/io/BrowsablePdfOutputField;"
                       name="destinationFileField"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/io/BrowsablePdfOutputField</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfOutputField.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/io/BrowsablePdfOutputField;Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/io/PdfDestinationPane;"
                       name="destinationPane"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/BrowsablePdfOutputField">?</arg>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/io/PdfDestinationPane</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/module/RunButton;Lorg/pdfsam/ui/module/OpenButton;)Lorg/pdfsam/ui/module/Footer;"
                       name="footer"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/module/RunButton">?</arg>
                     <arg type="Lorg/pdfsam/ui/module/OpenButton">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/module/Footer</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.Footer.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/module/OpenButton;"
                       name="openButton"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/module/OpenButton</return>
                  <ops>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.SINGLE_PDF</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MergeSelectionPane"><!--Package: org.pdfsam.merge; name: org.pdfsam.merge.MergeSelectionPane; file: org.pdfsam.merge.MergeSelectionPane-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.LoadingColumn.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.FileColumn.NAME</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.LongColumn.SIZE</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.IntColumn.PAGES</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.LongColumn.LAST_MODIFIED</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.PageRangesColumn.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.MultipleSelectionPane.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/merge/MergeParametersBuilder;Ljava/util/function/Consumer;)V"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/merge/MergeParametersBuilder">?</arg>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.merge.MergeSelectionPane.table</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.hasInput</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="get_static">org.pdfsam.merge.MergeSelectionPane.LOG</op>
                     <op code="call">org.sejda.conversion.exception.ConversionException.getMessage</op>
                     <op code="call">org.slf4j.Logger.error</op>
                     <op code="call">org.sejda.conversion.exception.ConversionException.getMessage</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.merge.MergeSelectionPane.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MergeSelectionPaneTest"><!--Package: org.pdfsam.merge; name: org.pdfsam.merge.MergeSelectionPaneTest; file: org.pdfsam.merge.MergeSelectionPaneTest-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clear</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">javaFxThread</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/merge/MergeSelectionPane">victim</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/merge/MergeParametersBuilder">builder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">onError</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clear</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">builder</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">onError</op>
                     <op code="call">org.pdfsam.merge.MergeSelectionPane.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="empty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.merge.MergeSelectionPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.addInput</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="emptyByZeroPagesSelected"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.merge.MergeSelectionPaneTest.populate</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.merge.MergeSelectionPane.table</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.get</op>
                     <op code="get">pageSelection</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.set</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.merge.MergeSelectionPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.addInput</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="emptyPageSelection"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.merge.MergeSelectionPaneTest.populate</op>
                     <op code="get">builder</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.hasInput</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.merge.MergeSelectionPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.addInput</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.sejda.model.input.PdfMergeInput.getPageSelection</op>
                     <op code="call">java.util.Set.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="notEmptyPageSelection"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.merge.MergeSelectionPaneTest.populate</op>
                     <op code="get">builder</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.hasInput</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.merge.MergeSelectionPane.table</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.get</op>
                     <op code="get">pageSelection</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.set</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.merge.MergeSelectionPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.addInput</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.sejda.model.input.PdfMergeInput.getPageSelection</op>
                     <op code="call">java.util.Set.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="converstionException"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.merge.MergeSelectionPaneTest.populate</op>
                     <op code="call">org.sejda.conversion.exception.ConversionException.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.doThrow</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.stubbing.Stubber.when</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.addInput</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.merge.MergeSelectionPane.apply</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.merge.MergeParametersBuilder.addInput</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="populate"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.add</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.dnd">
         <class id="MultipleFilesDropControllerTest"><!--Package: org.pdfsam.ui.dnd; name: org.pdfsam.ui.dnd.MultipleFilesDropControllerTest; file: org.pdfsam.ui.dnd.MultipleFilesDropControllerTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">cleanStudio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/test/HitTestListener">listener</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/test/HitTestListener">listListener</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/dnd/MultipleFilesDropController">victim</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/dialog/AddSubdirectoriesConfirmationDialog">dialog</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">cleanStudio</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">dialog</op>
                     <op code="call">javax.inject.Provider.get</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get">dialog</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.ui.dnd.MultipleFilesDropController.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="put">listener</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">listener</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="put">listListener</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">listListener</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="noPdf"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.pdf.MultipleFilesDroppedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dnd.MultipleFilesDropController.request</op>
                     <op code="get">listener</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="directoryNoPdf"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFolder</op>
                     <op code="call">java.io.File.toPath</op>
                     <op code="call">java.nio.file.Files.createTempFile</op>
                     <op code="get">victim</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.pdf.MultipleFilesDroppedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dnd.MultipleFilesDropController.request</op>
                     <op code="get">listener</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="directoryYesPdf"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFolder</op>
                     <op code="call">java.io.File.toPath</op>
                     <op code="call">java.nio.file.Files.createTempFile</op>
                     <op code="get">victim</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.pdf.MultipleFilesDroppedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dnd.MultipleFilesDropController.request</op>
                     <op code="get">listener</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="subdirectoryDialogFalseYesPdf"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFolder</op>
                     <op code="call">java.io.File.toPath</op>
                     <op code="call">java.nio.file.Files.createTempDirectory</op>
                     <op code="call">java.nio.file.Files.createTempFile</op>
                     <op code="get">dialog</op>
                     <op code="call">org.pdfsam.ui.dialog.AddSubdirectoriesConfirmationDialog.response</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.FALSE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">victim</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.pdf.MultipleFilesDroppedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dnd.MultipleFilesDropController.request</op>
                     <op code="get">listener</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="subdirectoryDialogTrueYesPdf"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFolder</op>
                     <op code="call">java.io.File.toPath</op>
                     <op code="call">java.nio.file.Files.createTempDirectory</op>
                     <op code="call">java.nio.file.Files.createTempFile</op>
                     <op code="get">dialog</op>
                     <op code="call">org.pdfsam.ui.dialog.AddSubdirectoriesConfirmationDialog.response</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">victim</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.pdf.MultipleFilesDroppedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dnd.MultipleFilesDropController.request</op>
                     <op code="get">listener</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="subdirectoryDialogTrueNoPdf"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFolder</op>
                     <op code="call">java.io.File.toPath</op>
                     <op code="call">java.nio.file.Files.createTempDirectory</op>
                     <op code="call">java.nio.file.Files.createTempFile</op>
                     <op code="get">dialog</op>
                     <op code="call">org.pdfsam.ui.dialog.AddSubdirectoriesConfirmationDialog.response</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">victim</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.pdf.MultipleFilesDroppedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dnd.MultipleFilesDropController.request</op>
                     <op code="get">listener</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onePdf"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.pdf.MultipleFilesDroppedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dnd.MultipleFilesDropController.request</op>
                     <op code="get">listener</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="oneCsv"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.pdf.MultipleFilesDroppedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dnd.MultipleFilesDropController.request</op>
                     <op code="get">listListener</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="oneTxt"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.pdf.MultipleFilesDroppedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dnd.MultipleFilesDropController.request</op>
                     <op code="get">listListener</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SingleFileDropControllerTest"><!--Package: org.pdfsam.ui.dnd; name: org.pdfsam.ui.dnd.SingleFileDropControllerTest; file: org.pdfsam.ui.dnd.SingleFileDropControllerTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">cleanStudio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/test/HitTestListener">listener</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/dnd/SingleFileDropController">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">cleanStudio</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dnd.SingleFileDropController.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="put">listener</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">listener</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="noPdf"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.pdf.SingleFileDroppedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dnd.SingleFileDropController.request</op>
                     <op code="get">listener</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="directory"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFolder</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.pdf.SingleFileDroppedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dnd.SingleFileDropController.request</op>
                     <op code="get">listener</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onePdf"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.pdf.SingleFileDroppedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dnd.SingleFileDropController.request</op>
                     <op code="get">listener</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SingleFileDropController"><!--Package: org.pdfsam.ui.dnd; name: org.pdfsam.ui.dnd.SingleFileDropController; file: org.pdfsam.ui.dnd.SingleFileDropController-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/pdf/SingleFileDroppedEvent;)V"
                       name="request"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/pdf/SingleFileDroppedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">files</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MultipleFilesDropController"><!--Package: org.pdfsam.ui.dnd; name: org.pdfsam.ui.dnd.MultipleFilesDropController; file: org.pdfsam.ui.dnd.MultipleFilesDropController-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavax/inject/Provider">dialog</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljavax/inject/Provider;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavax/inject/Provider">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">dialog</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/pdf/MultipleFilesDroppedEvent;)V"
                       name="request"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/pdf/MultipleFilesDroppedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">files</op>
                     <op code="call">java.util.List.size</op>
                     <op code="get">files</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">java.io.File.isDirectory</op>
                     <op code="get_static">org.pdfsam.support.io.FileType.TXT</op>
                     <op code="get">files</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">java.io.File.getName</op>
                     <op code="call">org.pdfsam.support.io.FileType.matches</op>
                     <op code="get_static">org.pdfsam.support.io.FileType.CSV</op>
                     <op code="get">files</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">java.io.File.getName</op>
                     <op code="call">org.pdfsam.support.io.FileType.matches</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.pdf.MultipleFilesDroppedEvent.getOwnerModule</op>
                     <op code="get">files</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">java.io.File.toPath</op>
                     <op code="call">org.pdfsam.pdf.PdfFilesListLoadRequest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="call">org.pdfsam.pdf.MultipleFilesDroppedEvent.getOwnerModule</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.&lt;init&gt;</op>
                     <op code="get">files</op>
                     <op code="call">org.pdfsam.ui.dnd.MultipleFilesDropController.getFiles</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.getDocuments</op>
                     <op code="call">java.util.Collection.isEmpty</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.pdf.MultipleFilesDroppedEvent.getOwnerModule</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">org.pdfsam.ui.notification.NotificationType.WARN</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.notification.AddNotificationRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/List;)Ljava/util/stream/Stream;"
                       name="getFiles"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>Ljava/util/stream/Stream</return>
                  <ops>
                     <op code="call">java.util.List.size</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">java.io.File.isDirectory</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">java.io.File.listFiles</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.stream.Stream.anyMatch</op>
                     <op code="get">dialog</op>
                     <op code="call">javax.inject.Provider.get</op>
                     <op code="call">org.pdfsam.ui.dialog.AddSubdirectoriesConfirmationDialog.response</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">java.io.File.toPath</op>
                     <op code="call">java.nio.file.Files.walk</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Stream.sorted</op>
                     <op code="get_static">org.pdfsam.ui.dnd.MultipleFilesDropController.LOG</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.slf4j.Logger.warn</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">java.io.File.listFiles</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.stream.Stream.sorted</op>
                     <op code="call">java.util.List.stream</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.ui.dnd.MultipleFilesDropController.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.extract">
         <class id="ExtractModule"><!--Package: org.pdfsam.extract; name: org.pdfsam.extract.ExtractModule; file: org.pdfsam.extract.ExtractModule-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE_ID</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/extract/ExtractSelectionPane">selectionPane</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/extract/ExtractOptionsPane">extractOptions</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField">destinationDirectoryField</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/PdfDestinationPane">destinationPane</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/prefix/PrefixPane">prefix</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/ModuleDescriptor">descriptor</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField;Lorg/pdfsam/ui/io/PdfDestinationPane;Lorg/pdfsam/ui/module/Footer;Lorg/pdfsam/ui/prefix/PrefixPane;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField">?</arg>
                     <arg type="Lorg/pdfsam/ui/io/PdfDestinationPane">?</arg>
                     <arg type="Lorg/pdfsam/ui/module/Footer">?</arg>
                     <arg type="Lorg/pdfsam/ui/prefix/PrefixPane">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.BaseTaskExecutionModule.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.extract.ExtractSelectionPane.&lt;init&gt;</op>
                     <op code="put">selectionPane</op>
                     <op code="call">org.pdfsam.extract.ExtractOptionsPane.&lt;init&gt;</op>
                     <op code="put">extractOptions</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.builder</op>
                     <op code="get_static">org.pdfsam.module.ModuleCategory.SPLIT</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.category</op>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.MULTIPLE_PDF</op>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.SINGLE_PDF</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.inputTypes</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.name</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.description</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.DEFAULT</op>
                     <op code="call">org.pdfsam.module.ModulePriority.getPriority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.priority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.supportURL</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.build</op>
                     <op code="put">descriptor</op>
                     <op code="put">destinationDirectoryField</op>
                     <op code="put">destinationPane</op>
                     <op code="put">prefix</op>
                     <op code="call">org.pdfsam.extract.ExtractModule.settingPanel</op>
                     <op code="call">org.pdfsam.extract.ExtractModule.initModuleSettingsPanel</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/ModuleDescriptor;"
                       name="descriptor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/ModuleDescriptor</return>
                  <ops>
                     <op code="get">descriptor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/function/Consumer;)Lorg/pdfsam/extract/ExtractParametersBuilder;"
                       name="getBuilder"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>Lorg/pdfsam/extract/ExtractParametersBuilder</return>
                  <ops>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.&lt;init&gt;</op>
                     <op code="get">extractOptions</op>
                     <op code="call">org.pdfsam.extract.ExtractOptionsPane.apply</op>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.extract.ExtractSelectionPane.apply</op>
                     <op code="get">destinationDirectoryField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.apply</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.apply</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.apply</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="onSaveWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.extract.ExtractSelectionPane.saveStateTo</op>
                     <op code="get">extractOptions</op>
                     <op code="call">org.pdfsam.extract.ExtractOptionsPane.saveStateTo</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.saveStateTo</op>
                     <op code="get">destinationDirectoryField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.saveStateTo</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.saveStateTo</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="onLoadWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Map.containsKey</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.extract.ExtractSelectionPane.restoreStateFrom</op>
                     <op code="get">extractOptions</op>
                     <op code="call">org.pdfsam.extract.ExtractOptionsPane.restoreStateFrom</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.restoreStateFrom</op>
                     <op code="get">destinationDirectoryField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.restoreStateFrom</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.restoreStateFrom</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/VBox;"
                       name="settingPanel"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Ljavafx/scene/layout/VBox</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="get_static">javafx.geometry.Pos.TOP_CENTER</op>
                     <op code="call">javafx.scene.layout.VBox.setAlignment</op>
                     <op code="get">selectionPane</op>
                     <op code="get_static">javafx.scene.layout.Priority.ALWAYS</op>
                     <op code="call">javafx.scene.layout.VBox.setVgrow</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.support.Views.titledPane</op>
                     <op code="get">prefix</op>
                     <op code="get_static">org.sejda.model.prefix.Prefix.FILENUMBER</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.addMenuItemFor</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.addMenuItemFor</op>
                     <op code="call">javafx.scene.layout.VBox.getChildren</op>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">extractOptions</op>
                     <op code="call">org.pdfsam.ui.support.Views.titledPane</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.support.Views.titledPane</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="id"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/ClearModuleEvent;)V"
                       name="onClearModule"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/ClearModuleEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">clearEverything</op>
                     <op code="get">extractOptions</op>
                     <op code="call">org.pdfsam.extract.ExtractOptionsPane.resetView</op>
                     <op code="get">prefix</op>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.resetView</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.resetView</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/Node;"
                       name="graphic"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/Node</return>
                  <ops>
                     <op code="call">javafx.scene.image.ImageView.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ExtractModule$ModuleConfig"><!--Package: org.pdfsam.extract; name: org.pdfsam.extract.ExtractModule$ModuleConfig; file: org.pdfsam.extract.ExtractModule$ModuleConfig-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField;"
                       name="destinationDirectoryField"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableOutputDirectoryField.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField;Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/io/PdfDestinationPane;"
                       name="destinationPane"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/BrowsableOutputDirectoryField">?</arg>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/io/PdfDestinationPane</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.io.PdfDestinationPane$DestinationPanelFields.DISCARD_BOOKMARKS</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/module/RunButton;Lorg/pdfsam/ui/module/OpenButton;)Lorg/pdfsam/ui/module/Footer;"
                       name="footer"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/module/RunButton">?</arg>
                     <arg type="Lorg/pdfsam/ui/module/OpenButton">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/module/Footer</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.Footer.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/module/OpenButton;"
                       name="openButton"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/module/OpenButton</return>
                  <ops>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.MULTIPLE_PDF</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/prefix/PrefixPane;"
                       name="prefixPane"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/prefix/PrefixPane</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.prefix.PrefixPane.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ExtractOptionsPane"><!--Package: org.pdfsam.extract; name: org.pdfsam.extract.ExtractOptionsPane; file: org.pdfsam.extract.ExtractOptionsPane-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/commons/ValidableTextField">field</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.&lt;init&gt;</op>
                     <op code="put">field</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setOnEnterValidation</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setEnableInvalidStyle</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setPromptText</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setValidator</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setErrorMessage</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setId</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setPrefWidth</op>
                     <op code="call">org.pdfsam.extract.ExtractOptionsPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.extract.ExtractOptionsPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.HCONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.extract.ExtractOptionsPane.getChildren</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/extract/ExtractParametersBuilder;Ljava/util/function/Consumer;)V"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/extract/ExtractParametersBuilder">?</arg>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.validate</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.pdfsam.support.params.ConversionUtils.toPageRangeSet</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.ranges</op>
                     <op code="call">org.sejda.conversion.exception.ConversionException.getMessage</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="saveStateTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="call">java.util.Map.put</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="resetView"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.clear</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ExtractSelectionPaneTest"><!--Package: org.pdfsam.extract; name: org.pdfsam.extract.ExtractSelectionPaneTest; file: org.pdfsam.extract.ExtractSelectionPaneTest-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clear</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">javaFxThread</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/extract/ExtractParametersBuilder">builder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">onError</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/extract/ExtractSelectionPane">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clear</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">builder</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">onError</op>
                     <op code="call">org.pdfsam.extract.ExtractSelectionPane.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="empty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.extract.ExtractSelectionPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.addSource</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="converstionException"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.extract.ExtractSelectionPaneTest.populate</op>
                     <op code="call">org.sejda.conversion.exception.ConversionException.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.doThrow</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.stubbing.Stubber.when</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.addSource</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.extract.ExtractSelectionPane.apply</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.addSource</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.eq</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="hasInput"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.extract.ExtractSelectionPaneTest.populate</op>
                     <op code="get">builder</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.hasInput</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.extract.ExtractSelectionPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="populate"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.add</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ExtractOptionsPaneTest"><!--Package: org.pdfsam.extract; name: org.pdfsam.extract.ExtractOptionsPaneTest; file: org.pdfsam.extract.ExtractOptionsPaneTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="true"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">CLEAR_STUDIO</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/extract/ExtractParametersBuilder">builder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">onError</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/extract/ExtractOptionsPane">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">builder</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">onError</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.extract.ExtractOptionsPane.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validSteps"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.extract.ExtractOptionsPaneTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.DIGIT5</op>
                     <op code="call">org.testfx.api.FxRobotInterface.type</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.extract.ExtractOptionsPane.apply</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.anySet</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.ranges</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="applyError"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.extract.ExtractOptionsPaneTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.extract.ExtractOptionsPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.anySet</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.ranges</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.extract.ExtractOptionsPaneTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.extract.ExtractOptionsPane.saveStateTo</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreState"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.pdfsam.extract.ExtractOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="reset"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.extract.ExtractOptionsPaneTest.clickOn</op>
                     <op code="get_static">javafx.scene.input.KeyCode.DIGIT5</op>
                     <op code="call">org.testfx.api.FxRobotInterface.type</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="call">org.pdfsam.extract.ExtractOptionsPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.extract.ExtractOptionsPaneTest.CLEAR_STUDIO</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ExtractParametersBuilder"><!--Package: org.pdfsam.extract; name: org.pdfsam.extract.ExtractParametersBuilder; file: org.pdfsam.extract.ExtractParametersBuilder-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/optimization/OptimizationPolicy">optimizationPolicy</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Set">ranges</attribute>
               <attribute final="false" public="false" static="false" type="Z">invertSelection</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.MultiplePdfSourceMultipleOutputParametersBuilder.&lt;init&gt;</op>
                     <op code="get_static">org.sejda.model.optimization.OptimizationPolicy.AUTO</op>
                     <op code="put">optimizationPolicy</op>
                     <op code="put">invertSelection</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/optimization/OptimizationPolicy;)V"
                       name="optimizationPolicy"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/optimization/OptimizationPolicy">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">optimizationPolicy</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/optimization/OptimizationPolicy;"
                       name="getOptimizationPolicy"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/sejda/model/optimization/OptimizationPolicy</return>
                  <ops>
                     <op code="call">java.lang.Boolean.getBoolean</op>
                     <op code="get">optimizationPolicy</op>
                     <op code="get_static">org.sejda.model.optimization.OptimizationPolicy.NO</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Set;)V"
                       name="ranges"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Set">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">ranges</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)V"
                       name="invertSelection"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">invertSelection</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/parameter/ExtractPagesParameters;"
                       name="build"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/sejda/model/parameter/ExtractPagesParameters</return>
                  <ops>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.isCompress</op>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.setCompress</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.existingOutput</op>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.setExistingOutputPolicy</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.getVersion</op>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.setVersion</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.getOutput</op>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.setOutput</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.getOptimizationPolicy</op>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.setOptimizationPolicy</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.isDiscardBookmarks</op>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.discardOutline</op>
                     <op code="get">ranges</op>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.addAllPageRanges</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.getPrefix</op>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.setOutputPrefix</op>
                     <op code="get">invertSelection</op>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.setInvertSelection</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.getInputs</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.Set.forEach</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ExtractSelectionPane"><!--Package: org.pdfsam.extract; name: org.pdfsam.extract.ExtractSelectionPane; file: org.pdfsam.extract.ExtractSelectionPane-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.LoadingColumn.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.FileColumn.NAME</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.LongColumn.SIZE</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.IntColumn.PAGES</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.LongColumn.LAST_MODIFIED</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.MultipleSelectionPane.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/extract/ExtractParametersBuilder;Ljava/util/function/Consumer;)V"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/extract/ExtractParametersBuilder">?</arg>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.extract.ExtractSelectionPane.table</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.stream</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.hasInput</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="get_static">org.pdfsam.extract.ExtractSelectionPane.LOG</op>
                     <op code="call">org.sejda.conversion.exception.ConversionException.getMessage</op>
                     <op code="call">org.slf4j.Logger.error</op>
                     <op code="call">org.sejda.conversion.exception.ConversionException.getMessage</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.extract.ExtractSelectionPane.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ExtractParametersBuilderTest"><!--Package: org.pdfsam.extract; name: org.pdfsam.extract.ExtractParametersBuilderTest; file: org.pdfsam.extract.ExtractParametersBuilderTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="build"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.compress</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.output</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.existingOutput</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.discardBookmarks</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.prefix</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.invertSelection</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.sejda.model.input.PdfFileSource.newInstanceNoPassword</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.addSource</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.sejda.model.input.PdfFileSource.newInstanceNoPassword</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.addSource</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.version</op>
                     <op code="call">org.pdfsam.support.params.ConversionUtils.toPageRangeSet</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.ranges</op>
                     <op code="call">org.pdfsam.extract.ExtractParametersBuilder.build</op>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.isCompress</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.discardOutline</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.getExistingOutputPolicy</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.getVersion</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.optimization.OptimizationPolicy.AUTO</op>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.getOptimizationPolicy</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.getPageSelection</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.getOutput</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.isInvertSelection</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.getOutputPrefix</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.getSourceList</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.ExtractPagesParameters.getSourceList</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.context">
         <class id="DefaultUserContextTest"><!--Package: org.pdfsam.context; name: org.pdfsam.context.DefaultUserContextTest; file: org.pdfsam.context.DefaultUserContextTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/DefaultUserContext">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.clear</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="tearDown"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.clear</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="isCheckUpdates"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.CHECK_UPDATES</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isCheckForUpdates</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.CHECK_UPDATES</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isCheckForUpdates</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="isCheckUpdatesSystemDefault"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.System.setProperty</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isCheckForUpdates</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.CHECK_UPDATES</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isCheckForUpdates</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.System.clearProperty</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="isCheckForNews"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.CHECK_FOR_NEWS</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isCheckForNews</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.CHECK_FOR_NEWS</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isCheckForNews</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="isCheckNewsSystemDefault"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.System.setProperty</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isCheckForNews</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.CHECK_FOR_NEWS</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isCheckForNews</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.System.clearProperty</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="isSaveWokspaceOnExit"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SAVE_WORKSPACE_ON_EXIT</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isSaveWorkspaceOnExit</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SAVE_WORKSPACE_ON_EXIT</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isSaveWorkspaceOnExit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="isSavePwdInWorkspace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SAVE_PWD_IN_WORKSPACE</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isSavePwdInWorkspaceFile</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SAVE_PWD_IN_WORKSPACE</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isSavePwdInWorkspaceFile</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="isUseSmartOutput"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SMART_OUTPUT</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isUseSmartOutput</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SMART_OUTPUT</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isUseSmartOutput</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="isAskPlaySounds"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.PLAY_SOUNDS</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isPlaySounds</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.PLAY_SOUNDS</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isPlaySounds</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="isPlaySoundsSystemDefault"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.System.setProperty</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isPlaySounds</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.PLAY_SOUNDS</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isPlaySounds</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.System.clearProperty</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="isDonationNotification"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.DONATION_NOTIFICATION</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isDonationNotification</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.DONATION_NOTIFICATION</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isDonationNotification</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="isDonationNotificationSystemDefault"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.System.setProperty</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isDonationNotification</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.DONATION_NOTIFICATION</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isDonationNotification</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.System.clearProperty</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="isPremiumModules"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.PREMIUM_MODULES</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isFetchPremiumModules</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.PREMIUM_MODULES</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isFetchPremiumModules</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="isPremiumModulesSystemDefault"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.System.setProperty</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isFetchPremiumModules</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.PREMIUM_MODULES</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isFetchPremiumModules</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.System.clearProperty</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isUseSmartOutput</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SMART_OUTPUT</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isUseSmartOutput</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.clear</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isUseSmartOutput</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getLocale"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.LOCALE</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setStringPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.getLocale</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.LOCALE</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setStringPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.getLocale</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isBlank</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getLocalesystemProp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.System.setProperty</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.getLocale</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.LOCALE</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setStringPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.getLocale</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isBlank</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.System.clearProperty</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getStartupModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.STARTUP_MODULE</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setStringPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.getStartupModule</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.STARTUP_MODULE</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setStringPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.getStartupModule</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isBlank</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getDefaultWorkingPath"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.WORKING_PATH</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setStringPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.getDefaultWorkingPath</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.WORKING_PATH</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setStringPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.getDefaultWorkingPath</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isBlank</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getDefaultWorkspacePath"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.WORKSPACE_PATH</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setStringPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.getDefaultWorkspacePath</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.WORKSPACE_PATH</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setStringPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.getDefaultWorkspacePath</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isBlank</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getNumberOfLogRows"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.getNumberOfLogRows</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="get_static">org.pdfsam.context.IntUserPreference.LOGVIEW_ROWS_NUMBER</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setIntegerPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.getNumberOfLogRows</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getDefaultPrefix"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setDefaultPrefix</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.getDefaultPrefix</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.getDefaultPrefix</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setDefaultPrefix</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.getDefaultPrefix</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getDefaultPrefixEmptyModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.getDefaultPrefix</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getDefaultPrefixNullModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.getDefaultPrefix</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DefaultUserContext"><!--Package: org.pdfsam.context; name: org.pdfsam.context.DefaultUserContext; file: org.pdfsam.context.DefaultUserContext-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">CHECK_FOR_UPDATES_PROP</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">CHECK_FOR_NEWS_PROP</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">DONATE_NOTIFICATION_PROP</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">PLAY_SOUNDS_PROP</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">FETCH_PREMIUM_MODULES_PROP</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">LOCALE_PROP</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/prefs/Preferences">prefs</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.initNode</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="initNode"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="put">prefs</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getDefaultWorkspacePath"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">prefs</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.WORKSPACE_PATH</op>
                     <op code="call">org.pdfsam.context.StringUserPreference.toString</op>
                     <op code="call">java.util.prefs.Preferences.get</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getDefaultWorkingPath"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">prefs</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.WORKING_PATH</op>
                     <op code="call">org.pdfsam.context.StringUserPreference.toString</op>
                     <op code="call">java.util.prefs.Preferences.get</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isPlaySounds"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">prefs</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.PLAY_SOUNDS</op>
                     <op code="call">org.pdfsam.context.BooleanUserPreference.toString</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.lang.System.getProperty</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">java.util.prefs.Preferences.getBoolean</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isDonationNotification"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">prefs</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.DONATION_NOTIFICATION</op>
                     <op code="call">org.pdfsam.context.BooleanUserPreference.toString</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.lang.System.getProperty</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">java.util.prefs.Preferences.getBoolean</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isFetchPremiumModules"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">prefs</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.PREMIUM_MODULES</op>
                     <op code="call">org.pdfsam.context.BooleanUserPreference.toString</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.lang.System.getProperty</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">java.util.prefs.Preferences.getBoolean</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isUseSmartOutput"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">prefs</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SMART_OUTPUT</op>
                     <op code="call">org.pdfsam.context.BooleanUserPreference.toString</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">java.util.prefs.Preferences.getBoolean</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isSaveWorkspaceOnExit"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">prefs</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SAVE_WORKSPACE_ON_EXIT</op>
                     <op code="call">org.pdfsam.context.BooleanUserPreference.toString</op>
                     <op code="get_static">java.lang.Boolean.FALSE</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">java.util.prefs.Preferences.getBoolean</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="getNumberOfLogRows"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="get">prefs</op>
                     <op code="get_static">org.pdfsam.context.IntUserPreference.LOGVIEW_ROWS_NUMBER</op>
                     <op code="call">org.pdfsam.context.IntUserPreference.toString</op>
                     <op code="call">java.util.prefs.Preferences.getInt</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getStartupModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">prefs</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.STARTUP_MODULE</op>
                     <op code="call">org.pdfsam.context.StringUserPreference.toString</op>
                     <op code="call">java.util.prefs.Preferences.get</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isCheckForUpdates"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">prefs</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.CHECK_UPDATES</op>
                     <op code="call">org.pdfsam.context.BooleanUserPreference.toString</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.lang.System.getProperty</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">java.util.prefs.Preferences.getBoolean</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isCheckForNews"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">prefs</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.CHECK_FOR_NEWS</op>
                     <op code="call">org.pdfsam.context.BooleanUserPreference.toString</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.lang.System.getProperty</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">java.util.prefs.Preferences.getBoolean</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isCompressionEnabled"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">prefs</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.PDF_COMPRESSION_ENABLED</op>
                     <op code="call">org.pdfsam.context.BooleanUserPreference.toString</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">java.util.prefs.Preferences.getBoolean</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isSavePwdInWorkspaceFile"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">prefs</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SAVE_PWD_IN_WORKSPACE</op>
                     <op code="call">org.pdfsam.context.BooleanUserPreference.toString</op>
                     <op code="get_static">java.lang.Boolean.FALSE</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">java.util.prefs.Preferences.getBoolean</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getLocale"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">prefs</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.LOCALE</op>
                     <op code="call">org.pdfsam.context.StringUserPreference.toString</op>
                     <op code="call">java.lang.System.getProperty</op>
                     <op code="call">java.util.prefs.Preferences.get</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Ljava/lang/String;"
                       name="getDefaultPrefix"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="get">prefs</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.DEFAULT_PREFIX</op>
                     <op code="call">org.pdfsam.context.StringUserPreference.toString</op>
                     <op code="call">java.util.prefs.Preferences.get</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljava/lang/String;)V"
                       name="setDefaultPrefix"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="get">prefs</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.DEFAULT_PREFIX</op>
                     <op code="call">org.pdfsam.context.StringUserPreference.toString</op>
                     <op code="call">java.util.prefs.Preferences.put</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">prefs</op>
                     <op code="call">java.util.prefs.Preferences.removeNode</op>
                     <op code="get">prefs</op>
                     <op code="call">java.util.prefs.Preferences.flush</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.initNode</op>
                     <op code="get_static">org.pdfsam.context.DefaultUserContext.LOG</op>
                     <op code="call">org.slf4j.Logger.error</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/BooleanUserPreference;Z)V"
                       name="setBooleanPreference"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/BooleanUserPreference">?</arg>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">prefs</op>
                     <op code="call">org.pdfsam.context.BooleanUserPreference.toString</op>
                     <op code="call">java.util.prefs.Preferences.putBoolean</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/IntUserPreference;I)V"
                       name="setIntegerPreference"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/IntUserPreference">?</arg>
                     <arg type="I">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">prefs</op>
                     <op code="call">org.pdfsam.context.IntUserPreference.toString</op>
                     <op code="call">java.util.prefs.Preferences.putInt</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/StringUserPreference;Ljava/lang/String;)V"
                       name="setStringPreference"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/StringUserPreference">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">prefs</op>
                     <op code="call">org.pdfsam.context.StringUserPreference.toString</op>
                     <op code="call">java.util.prefs.Preferences.put</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.context.DefaultUserContext.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.alternatemix">
         <class id="AlternateMixSelectionPane"><!--Package: org.pdfsam.alternatemix; name: org.pdfsam.alternatemix.AlternateMixSelectionPane; file: org.pdfsam.alternatemix.AlternateMixSelectionPane-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.multiple.LoadingColumn.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.FileColumn.NAME</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.LongColumn.SIZE</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.IntColumn.PAGES</op>
                     <op code="get_static">org.pdfsam.ui.selection.multiple.LongColumn.LAST_MODIFIED</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.PageRangesColumn.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.PaceColumn.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.ReverseColumn.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.MultipleSelectionPane.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/alternatemix/AlternateMixParametersBuilder;Ljava/util/function/Consumer;)V"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/alternatemix/AlternateMixParametersBuilder">?</arg>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixSelectionPane.table</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.isEmpty</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixSelectionPane.table</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.iterator</op>
                     <op code="call">java.util.Iterator.hasNext</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="get">pace</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.get</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultIfBlank</op>
                     <op code="call">java.lang.String.trim</op>
                     <op code="call">java.lang.String.matches</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.descriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.toPdfFileSource</op>
                     <op code="get">reverse</op>
                     <op code="call">javafx.beans.property.SimpleBooleanProperty.get</op>
                     <op code="call">java.lang.Integer.parseInt</op>
                     <op code="call">org.sejda.model.input.PdfMixInput.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTableRowData.toPageRangeSet</op>
                     <op code="call">org.sejda.model.input.PdfMixInput.addAllPageRanges</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixParametersBuilder.addInput</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="AlternateMixModule"><!--Package: org.pdfsam.alternatemix; name: org.pdfsam.alternatemix.AlternateMixModule; file: org.pdfsam.alternatemix.AlternateMixModule-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE_ID</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/alternatemix/AlternateMixSelectionPane">selectionPane</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/BrowsablePdfOutputField">destinationFileField</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/PdfDestinationPane">destinationPane</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/ModuleDescriptor">descriptor</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/io/BrowsablePdfOutputField;Lorg/pdfsam/ui/io/PdfDestinationPane;Lorg/pdfsam/ui/module/Footer;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/BrowsablePdfOutputField">?</arg>
                     <arg type="Lorg/pdfsam/ui/io/PdfDestinationPane">?</arg>
                     <arg type="Lorg/pdfsam/ui/module/Footer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.BaseTaskExecutionModule.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixSelectionPane.&lt;init&gt;</op>
                     <op code="put">selectionPane</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.builder</op>
                     <op code="get_static">org.pdfsam.module.ModuleCategory.MERGE</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.category</op>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.MULTIPLE_PDF</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.inputTypes</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.name</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.description</op>
                     <op code="get_static">org.pdfsam.module.ModulePriority.DEFAULT</op>
                     <op code="call">org.pdfsam.module.ModulePriority.getPriority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.priority</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.supportURL</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptorBuilder.build</op>
                     <op code="put">descriptor</op>
                     <op code="put">destinationFileField</op>
                     <op code="put">destinationPane</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixModule.settingPanel</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixModule.initModuleSettingsPanel</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/ModuleDescriptor;"
                       name="descriptor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/ModuleDescriptor</return>
                  <ops>
                     <op code="get">descriptor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="onSaveWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixSelectionPane.saveStateTo</op>
                     <op code="get">destinationFileField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfOutputField.saveStateTo</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.saveStateTo</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="onLoadWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Map.containsKey</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.containsKey</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixSelectionPane.restoreStateFrom</op>
                     <op code="get">destinationFileField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfOutputField.restoreStateFrom</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.restoreStateFrom</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/VBox;"
                       name="settingPanel"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Ljavafx/scene/layout/VBox</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="get_static">javafx.geometry.Pos.TOP_CENTER</op>
                     <op code="call">javafx.scene.layout.VBox.setAlignment</op>
                     <op code="get">selectionPane</op>
                     <op code="get_static">javafx.scene.layout.Priority.ALWAYS</op>
                     <op code="call">javafx.scene.layout.VBox.setVgrow</op>
                     <op code="call">javafx.scene.layout.VBox.getChildren</op>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.support.Views.titledPane</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="id"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/ClearModuleEvent;)V"
                       name="onClearModule"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/ClearModuleEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">clearEverything</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.resetView</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/Node;"
                       name="graphic"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/Node</return>
                  <ops>
                     <op code="call">javafx.scene.image.ImageView.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/function/Consumer;)Lorg/pdfsam/alternatemix/AlternateMixParametersBuilder;"
                       name="getBuilder"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>Lorg/pdfsam/alternatemix/AlternateMixParametersBuilder</return>
                  <ops>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixParametersBuilder.&lt;init&gt;</op>
                     <op code="get">selectionPane</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixSelectionPane.apply</op>
                     <op code="get">destinationFileField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfOutputField.apply</op>
                     <op code="get">destinationPane</op>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.apply</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="AlternateMixModule$ModuleConfig"><!--Package: org.pdfsam.alternatemix; name: org.pdfsam.alternatemix.AlternateMixModule$ModuleConfig; file: org.pdfsam.alternatemix.AlternateMixModule$ModuleConfig-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/io/BrowsablePdfOutputField;"
                       name="destinationFileField"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/io/BrowsablePdfOutputField</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsablePdfOutputField.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/io/BrowsablePdfOutputField;Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/io/PdfDestinationPane;"
                       name="destinationPane"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/io/BrowsablePdfOutputField">?</arg>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/io/PdfDestinationPane</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.PdfDestinationPane.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/module/RunButton;Lorg/pdfsam/ui/module/OpenButton;)Lorg/pdfsam/ui/module/Footer;"
                       name="footer"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/module/RunButton">?</arg>
                     <arg type="Lorg/pdfsam/ui/module/OpenButton">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/module/Footer</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.Footer.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/module/OpenButton;"
                       name="openButton"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/module/OpenButton</return>
                  <ops>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.SINGLE_PDF</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="AlternateMixParametersBuilder"><!--Package: org.pdfsam.alternatemix; name: org.pdfsam.alternatemix.AlternateMixParametersBuilder; file: org.pdfsam.alternatemix.AlternateMixParametersBuilder-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/sejda/model/output/FileTaskOutput">output</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Set">inputs</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.support.params.AbstractPdfOutputParametersBuilder.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.collection.NullSafeSet.&lt;init&gt;</op>
                     <op code="put">inputs</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/output/FileTaskOutput;)V"
                       name="output"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/output/FileTaskOutput">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">output</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/input/PdfMixInput;)V"
                       name="addInput"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/sejda/model/input/PdfMixInput">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">inputs</op>
                     <op code="call">java.util.Set.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="hasInput"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">inputs</op>
                     <op code="call">java.util.Set.isEmpty</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/sejda/model/parameter/AlternateMixMultipleInputParameters;"
                       name="build"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/sejda/model/parameter/AlternateMixMultipleInputParameters</return>
                  <ops>
                     <op code="call">org.sejda.model.parameter.AlternateMixMultipleInputParameters.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixParametersBuilder.isCompress</op>
                     <op code="call">org.sejda.model.parameter.AlternateMixMultipleInputParameters.setCompress</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixParametersBuilder.existingOutput</op>
                     <op code="call">org.sejda.model.parameter.AlternateMixMultipleInputParameters.setExistingOutputPolicy</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixParametersBuilder.getVersion</op>
                     <op code="call">org.sejda.model.parameter.AlternateMixMultipleInputParameters.setVersion</op>
                     <op code="get">output</op>
                     <op code="call">org.sejda.model.parameter.AlternateMixMultipleInputParameters.setOutput</op>
                     <op code="get">inputs</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.Set.forEach</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="AlternateMixSelectionPaneTest"><!--Package: org.pdfsam.alternatemix; name: org.pdfsam.alternatemix.AlternateMixSelectionPaneTest; file: org.pdfsam.alternatemix.AlternateMixSelectionPaneTest-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clear</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">javaFxThread</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/alternatemix/AlternateMixParametersBuilder">builder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">onError</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/alternatemix/AlternateMixSelectionPane">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clear</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">builder</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">onError</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixSelectionPane.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="empty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixSelectionPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixParametersBuilder.addInput</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidPace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixSelectionPaneTest.populate</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixSelectionPane.table</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.get</op>
                     <op code="get">pace</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.set</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixSelectionPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixParametersBuilder.addInput</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="zeroPace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixSelectionPaneTest.populate</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixSelectionPane.table</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.get</op>
                     <op code="get">pace</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.set</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixSelectionPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixParametersBuilder.addInput</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validInput"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixSelectionPaneTest.populate</op>
                     <op code="get">builder</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixParametersBuilder.hasInput</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixSelectionPane.table</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.get</op>
                     <op code="get">reverse</op>
                     <op code="call">javafx.beans.property.SimpleBooleanProperty.set</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixSelectionPane.table</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.get</op>
                     <op code="get">pace</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.set</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixSelectionPane.table</op>
                     <op code="call">org.pdfsam.ui.selection.multiple.SelectionTable.getItems</op>
                     <op code="call">javafx.collections.ObservableList.get</op>
                     <op code="get">pageSelection</op>
                     <op code="call">javafx.beans.property.SimpleStringProperty.set</op>
                     <op code="get">victim</op>
                     <op code="get">builder</op>
                     <op code="get">onError</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixSelectionPane.apply</op>
                     <op code="get">onError</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyString</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="get">builder</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixParametersBuilder.addInput</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.sejda.model.input.PdfMixInput.getStep</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.sejda.model.input.PdfMixInput.isReverse</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.sejda.model.input.PdfMixInput.getPages</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">java.lang.Integer.valueOf</op>
                     <op code="call">org.hamcrest.Matchers.contains</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="populate"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.newDescriptorNoPassword</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.add</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="AlternateMixParametersBuilderTest"><!--Package: org.pdfsam.alternatemix; name: org.pdfsam.alternatemix.AlternateMixParametersBuilderTest; file: org.pdfsam.alternatemix.AlternateMixParametersBuilderTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="build"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixParametersBuilder.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixParametersBuilder.compress</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.sejda.model.input.PdfFileSource.newInstanceNoPassword</op>
                     <op code="call">org.sejda.model.input.PdfMixInput.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixParametersBuilder.addInput</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixParametersBuilder.output</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixParametersBuilder.existingOutput</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.sejda.model.input.PdfFileSource.newInstanceNoPassword</op>
                     <op code="call">org.sejda.model.input.PdfMixInput.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixParametersBuilder.addInput</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.sejda.model.input.PdfFileSource.newInstanceNoPassword</op>
                     <op code="call">org.sejda.model.input.PdfMixInput.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixParametersBuilder.addInput</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixParametersBuilder.version</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixParametersBuilder.hasInput</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.alternatemix.AlternateMixParametersBuilder.build</op>
                     <op code="call">org.sejda.model.parameter.AlternateMixMultipleInputParameters.isCompress</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">org.sejda.model.output.ExistingOutputPolicy.OVERWRITE</op>
                     <op code="call">org.sejda.model.parameter.AlternateMixMultipleInputParameters.getExistingOutputPolicy</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get_static">org.sejda.model.pdf.PdfVersion.VERSION_1_7</op>
                     <op code="call">org.sejda.model.parameter.AlternateMixMultipleInputParameters.getVersion</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.AlternateMixMultipleInputParameters.getInputList</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.AlternateMixMultipleInputParameters.getInputList</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.AlternateMixMultipleInputParameters.getInputList</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.AlternateMixMultipleInputParameters.getInputList</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.AlternateMixMultipleInputParameters.getInputList</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.sejda.model.input.PdfMixInput.isReverse</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.sejda.model.parameter.AlternateMixMultipleInputParameters.getInputList</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.sejda.model.input.PdfMixInput.isReverse</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.sejda.model.parameter.AlternateMixMultipleInputParameters.getInputList</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.sejda.model.input.PdfMixInput.isReverse</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.sejda.model.parameter.AlternateMixMultipleInputParameters.getInputList</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.sejda.model.input.PdfMixInput.getStep</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.AlternateMixMultipleInputParameters.getInputList</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.sejda.model.input.PdfMixInput.getStep</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.AlternateMixMultipleInputParameters.getInputList</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.sejda.model.input.PdfMixInput.getStep</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.sejda.model.parameter.AlternateMixMultipleInputParameters.getOutput</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui">
         <class id="ContentPaneTest"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.ContentPaneTest; file: org.pdfsam.ui.ContentPaneTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">javaFxThread</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/injector/Injector">injector</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.ContentPaneTest$Config.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.start</op>
                     <op code="put">injector</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onSetActiveModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.activeteCurrentModule</op>
                     <op code="call">org.pdfsam.ui.ContentPane.onSetActiveModule</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.workarea.WorkArea.isVisible</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.dashboard.Dashboard.isVisible</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onSetActiveDashboardItem"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.event.SetActiveDashboardItemRequest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.ContentPane.onSetActiveDashboardItem</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.dashboard.Dashboard.isVisible</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.workarea.WorkArea.isVisible</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferencesRecentWorkspacesService"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.PreferencesRecentWorkspacesService; file: org.pdfsam.ui.PreferencesRecentWorkspacesService-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="true" public="false" static="true" type="I">MAX_CAPACITY</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">WORKSPACES_PATH</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Map">cache</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.collection.LRUMap.&lt;init&gt;</op>
                     <op code="put">cache</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.populateCache</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="populateCache"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.keys</op>
                     <op code="call">java.util.Arrays.stream</op>
                     <op code="call">java.util.stream.Stream.sorted</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="get_static">org.pdfsam.ui.PreferencesRecentWorkspacesService.LOG</op>
                     <op code="call">org.slf4j.Logger.error</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/File;)V"
                       name="addWorkspaceLastUsed"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="get">cache</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">java.time.Instant.now</op>
                     <op code="call">java.time.Instant.toEpochMilli</op>
                     <op code="call">java.lang.Long.toString</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get_static">org.pdfsam.ui.PreferencesRecentWorkspacesService.LOG</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/util/List;"
                       name="getRecentlyUsedWorkspaces"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/util/List</return>
                  <ops>
                     <op code="get">cache</op>
                     <op code="call">java.util.Map.keySet</op>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="call">java.util.Collections.reverse</op>
                     <op code="call">java.util.Collections.unmodifiableList</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="get">cache</op>
                     <op code="call">java.util.Map.clear</op>
                     <op code="call">java.util.prefs.Preferences.removeNode</op>
                     <op code="call">java.util.prefs.Preferences.flush</op>
                     <op code="get_static">org.pdfsam.ui.PreferencesRecentWorkspacesService.LOG</op>
                     <op code="call">org.slf4j.Logger.error</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="flush"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="get_static">org.pdfsam.ui.PreferencesRecentWorkspacesService.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="call">java.util.prefs.Preferences.clear</op>
                     <op code="get">cache</op>
                     <op code="call">java.util.Map.entrySet</op>
                     <op code="call">java.util.Set.iterator</op>
                     <op code="call">java.util.Iterator.hasNext</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="call">java.util.Map$Entry.getValue</op>
                     <op code="call">java.util.Map$Entry.getKey</op>
                     <op code="call">java.util.prefs.Preferences.put</op>
                     <op code="call">java.util.prefs.Preferences.flush</op>
                     <op code="get_static">org.pdfsam.ui.PreferencesRecentWorkspacesService.LOG</op>
                     <op code="call">org.slf4j.Logger.error</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ShutdownEvent;)V"
                       name="onShutdown"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ShutdownEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.flush</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.ui.PreferencesRecentWorkspacesService.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="StageServiceController"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.StageServiceController; file: org.pdfsam.ui.StageServiceController-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/StageService">service</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/StageService;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/StageService">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">service</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/SetLatestStageStatusRequest;)V"
                       name="requestStageStatus"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/SetLatestStageStatusRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.StageServiceController.LOG</op>
                     <op code="call">org.pdfsam.ui.SetLatestStageStatusRequest.getStatus</op>
                     <op code="call">org.slf4j.Logger.debug</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.ui.SetLatestStageStatusRequest.getStatus</op>
                     <op code="call">org.pdfsam.ui.StageService.save</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.ui.StageServiceController.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="StageModeTest"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.StageModeTest; file: org.pdfsam.ui.StageModeTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">javaFxThread</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="valueForMaximized"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.stage.Stage.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.setMaximized</op>
                     <op code="get_static">org.pdfsam.ui.StageMode.MAXIMIZED</op>
                     <op code="call">org.pdfsam.ui.StageMode.valueFor</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="valueForDefault"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.stage.Stage.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.setMaximized</op>
                     <op code="call">javafx.stage.Stage.setIconified</op>
                     <op code="get_static">org.pdfsam.ui.StageMode.DEFAULT</op>
                     <op code="call">org.pdfsam.ui.StageMode.valueFor</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreDefault"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.stage.Stage.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="get_static">org.pdfsam.ui.StageMode.DEFAULT</op>
                     <op code="call">org.pdfsam.ui.StageMode.restore</op>
                     <op code="call">javafx.stage.Stage.isIconified</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">javafx.stage.Stage.isMaximized</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreMaximized"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.stage.Stage.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="get_static">org.pdfsam.ui.StageMode.MAXIMIZED</op>
                     <op code="call">org.pdfsam.ui.StageMode.restore</op>
                     <op code="call">javafx.stage.Stage.isIconified</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">javafx.stage.Stage.isMaximized</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferencesRecentWorkspacesServiceTest"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.PreferencesRecentWorkspacesServiceTest; file: org.pdfsam.ui.PreferencesRecentWorkspacesServiceTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/PreferencesRecentWorkspacesService">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.clear</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="maxCapacity"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesServiceTest.populate</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.getRecentlyUsedWorkspaces</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testClear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.addWorkspaceLastUsed</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.flush</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.getRecentlyUsedWorkspaces</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.clear</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.getRecentlyUsedWorkspaces</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="noDuplicate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.addWorkspaceLastUsed</op>
                     <op code="call">java.lang.Thread.sleep</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.addWorkspaceLastUsed</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.getRecentlyUsedWorkspaces</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="noDuplicateIsPushedTop"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.addWorkspaceLastUsed</op>
                     <op code="call">java.lang.Thread.sleep</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.addWorkspaceLastUsed</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.getRecentlyUsedWorkspaces</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.getRecentlyUsedWorkspaces</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.addWorkspaceLastUsed</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.getRecentlyUsedWorkspaces</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.getRecentlyUsedWorkspaces</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="flush"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.addWorkspaceLastUsed</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.flush</op>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.keys</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="addWorkspace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.addWorkspaceLastUsed</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.getRecentlyUsedWorkspaces</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">java.util.List.contains</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="isPopulated"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesServiceTest.populate</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.flush</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.getRecentlyUsedWorkspaces</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullWorkspace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.addWorkspaceLastUsed</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="isSorted"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.put</op>
                     <op code="call">java.util.prefs.Preferences.put</op>
                     <op code="call">java.util.prefs.Preferences.put</op>
                     <op code="call">java.util.prefs.Preferences.flush</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.getRecentlyUsedWorkspaces</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.List.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="blankIsNotLoaded"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.put</op>
                     <op code="call">java.util.prefs.Preferences.flush</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.getRecentlyUsedWorkspaces</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="populate"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.addWorkspaceLastUsed</op>
                     <op code="call">java.lang.Thread.sleep</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SetLatestStageStatusRequestTest"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.SetLatestStageStatusRequestTest; file: org.pdfsam.ui.SetLatestStageStatusRequestTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.SetLatestStageStatusRequest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="notNullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.StageStatus.NULL</op>
                     <op code="call">org.pdfsam.ui.SetLatestStageStatusRequest.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.StageStatus.NULL</op>
                     <op code="call">org.pdfsam.ui.SetLatestStageStatusRequest.getStatus</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SetLatestStageStatusRequest"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.SetLatestStageStatusRequest; file: org.pdfsam.ui.SetLatestStageStatusRequest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/StageStatus">status</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/StageStatus;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/StageStatus">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">status</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/StageStatus;"
                       name="getStatus"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/StageStatus</return>
                  <ops>
                     <op code="get">status</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="StageStatus"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.StageStatus; file: org.pdfsam.ui.StageStatus-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Lorg/pdfsam/ui/StageStatus">NULL</attribute>
               <attribute final="false" public="false" static="false" type="D">x</attribute>
               <attribute final="false" public="false" static="false" type="D">y</attribute>
               <attribute final="false" public="false" static="false" type="D">width</attribute>
               <attribute final="false" public="false" static="false" type="D">height</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/StageMode">mode</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(DDDD)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="D">?</arg>
                     <arg type="D">?</arg>
                     <arg type="D">?</arg>
                     <arg type="D">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">x</op>
                     <op code="put">y</op>
                     <op code="put">width</op>
                     <op code="put">height</op>
                     <op code="get_static">org.pdfsam.ui.StageMode.DEFAULT</op>
                     <op code="put">mode</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="getX"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
                  <ops>
                     <op code="get">x</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(D)V"
                       name="setX"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="D">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">x</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="getY"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
                  <ops>
                     <op code="get">y</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(D)V"
                       name="setY"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="D">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">y</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="getWidth"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
                  <ops>
                     <op code="get">width</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(D)V"
                       name="setWidth"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="D">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">width</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()D"
                       name="getHeight"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>D</return>
                  <ops>
                     <op code="get">height</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(D)V"
                       name="setHeight"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="D">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">height</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/StageMode;)V"
                       name="setMode"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/StageMode">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">mode</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/StageMode;"
                       name="getMode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/StageMode</return>
                  <ops>
                     <op code="get">mode</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="toString"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.builder.ReflectionToStringBuilder.toString</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()I"
                       name="hashCode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>I</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.&lt;init&gt;</op>
                     <op code="get">x</op>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.append</op>
                     <op code="get">y</op>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.append</op>
                     <op code="get">width</op>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.append</op>
                     <op code="get">height</op>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.append</op>
                     <op code="get">mode</op>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.append</op>
                     <op code="call">org.apache.commons.lang3.builder.HashCodeBuilder.toHashCode</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;)Z"
                       name="equals"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.&lt;init&gt;</op>
                     <op code="get">x</op>
                     <op code="call">org.pdfsam.ui.StageStatus.getX</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.append</op>
                     <op code="get">y</op>
                     <op code="call">org.pdfsam.ui.StageStatus.getY</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.append</op>
                     <op code="get">width</op>
                     <op code="call">org.pdfsam.ui.StageStatus.getWidth</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.append</op>
                     <op code="get">height</op>
                     <op code="call">org.pdfsam.ui.StageStatus.getHeight</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.append</op>
                     <op code="get">mode</op>
                     <op code="call">org.pdfsam.ui.StageStatus.getMode</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.append</op>
                     <op code="call">org.apache.commons.lang3.builder.EqualsBuilder.isEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.StageStatus$1.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.ui.StageStatus.NULL</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="WorkspaceController"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.WorkspaceController; file: org.pdfsam.ui.WorkspaceController-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/List">modules</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/WorkspaceService">service</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/RecentWorkspacesService">recentWorkspace</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/util/List;Lorg/pdfsam/ui/WorkspaceService;Lorg/pdfsam/ui/RecentWorkspacesService;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                     <arg type="Lorg/pdfsam/ui/WorkspaceService">?</arg>
                     <arg type="Lorg/pdfsam/ui/RecentWorkspacesService">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">modules</op>
                     <op code="put">service</op>
                     <op code="put">recentWorkspace</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/workspace/SaveWorkspaceEvent;)V"
                       name="saveWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/workspace/SaveWorkspaceEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.WorkspaceController.LOG</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.slf4j.Logger.debug</op>
                     <op code="get">modules</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Stream.toArray</op>
                     <op code="call">java.util.concurrent.CompletableFuture.allOf</op>
                     <op code="call">java.util.concurrent.CompletableFuture.thenRun</op>
                     <op code="call">java.util.concurrent.CompletableFuture.whenComplete</op>
                     <op code="get">awaitCompletion</op>
                     <op code="call">java.util.concurrent.CompletableFuture.get</op>
                     <op code="get_static">org.pdfsam.ui.WorkspaceController.LOG</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.workspace</op>
                     <op code="call">java.io.File.getName</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.slf4j.Logger.error</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/workspace/LoadWorkspaceEvent;)Ljava/util/concurrent/CompletableFuture;"
                       name="loadWorspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/workspace/LoadWorkspaceEvent">?</arg>
                  </args>
                  <return>Ljava/util/concurrent/CompletableFuture</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.WorkspaceController.LOG</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.ui.workspace.LoadWorkspaceEvent.workspace</op>
                     <op code="call">java.io.File.getName</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.slf4j.Logger.debug</op>
                     <op code="call">java.util.concurrent.CompletableFuture.supplyAsync</op>
                     <op code="call">java.util.concurrent.CompletableFuture.thenCompose</op>
                     <op code="call">java.util.concurrent.CompletableFuture.whenComplete</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.ui.WorkspaceController.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="WorkspaceControllerTest"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.WorkspaceControllerTest; file: org.pdfsam.ui.WorkspaceControllerTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/WorkspaceController">victim</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/WorkspaceService">service</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/RecentWorkspacesService">recentWorkspaces</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/io/File">file</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">file</op>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.DefaultPriorityTestModule.&lt;init&gt;</op>
                     <op code="call">java.util.List.add</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">service</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">recentWorkspaces</op>
                     <op code="get">service</op>
                     <op code="get">recentWorkspaces</op>
                     <op code="call">org.pdfsam.ui.WorkspaceController.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveWorkspace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="get">file</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.WorkspaceController.saveWorkspace</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyMap</op>
                     <op code="get">file</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">org.pdfsam.ui.WorkspaceService.saveWorkspace</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveWorkspaceWithException"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">file</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.&lt;init&gt;</op>
                     <op code="call">java.lang.RuntimeException.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.doThrow</op>
                     <op code="call">org.mockito.stubbing.Stubber.when</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.WorkspaceController.saveWorkspace</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="loadEmptyWorkspace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.ui.WorkspaceService.loadWorkspace</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.util.Collections.emptyMap</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">victim</op>
                     <op code="get">file</op>
                     <op code="call">org.pdfsam.ui.workspace.LoadWorkspaceEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.WorkspaceController.loadWorspace</op>
                     <op code="call">java.util.concurrent.CompletableFuture.get</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="loadWorkspaceWithException"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">service</op>
                     <op code="get">file</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">org.pdfsam.ui.WorkspaceService.loadWorkspace</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">java.lang.RuntimeException.&lt;init&gt;</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenThrow</op>
                     <op code="get">victim</op>
                     <op code="get">file</op>
                     <op code="call">org.pdfsam.ui.workspace.LoadWorkspaceEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.WorkspaceController.loadWorspace</op>
                     <op code="call">java.util.concurrent.CompletableFuture.get</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="loadWorkspace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.ui.WorkspaceService.loadWorkspace</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">victim</op>
                     <op code="get">file</op>
                     <op code="call">org.pdfsam.ui.workspace.LoadWorkspaceEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.WorkspaceController.loadWorspace</op>
                     <op code="call">java.util.concurrent.CompletableFuture.get</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">recentWorkspaces</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get">file</op>
                     <op code="call">org.pdfsam.ui.RecentWorkspacesService.addWorkspaceLastUsed</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="loadWorkspaceNoDataForModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.ui.WorkspaceService.loadWorkspace</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">victim</op>
                     <op code="get">file</op>
                     <op code="call">org.pdfsam.ui.workspace.LoadWorkspaceEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.WorkspaceController.loadWorspace</op>
                     <op code="call">java.util.concurrent.CompletableFuture.get</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">recentWorkspaces</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.ui.RecentWorkspacesService.addWorkspaceLastUsed</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="StageStatusTest"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.StageStatusTest; file: org.pdfsam.ui.StageStatusTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="requiredMode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.StageStatus.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.StageStatus.setMode</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testEquals"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.StageStatus.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.StageStatus.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.StageStatus.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.StageStatus.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.TestUtils.testEqualsAndHashCodes</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="immutableSetX"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.StageStatus.NULL</op>
                     <op code="call">org.pdfsam.ui.StageStatus.setX</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="immutableSetY"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.StageStatus.NULL</op>
                     <op code="call">org.pdfsam.ui.StageStatus.setY</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="immutableSetWisth"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.StageStatus.NULL</op>
                     <op code="call">org.pdfsam.ui.StageStatus.setWidth</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="immutableSetHeight"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.StageStatus.NULL</op>
                     <op code="call">org.pdfsam.ui.StageStatus.setHeight</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="immutableSetMode"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.StageStatus.NULL</op>
                     <op code="get_static">org.pdfsam.ui.StageMode.MAXIMIZED</op>
                     <op code="call">org.pdfsam.ui.StageStatus.setMode</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="UIServiceConfig"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.UIServiceConfig; file: org.pdfsam.ui.UIServiceConfig-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/RecentWorkspacesService;"
                       name="recentWorkspaces"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Lorg/pdfsam/ui/RecentWorkspacesService</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.PreferencesRecentWorkspacesService.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/WorkspaceService;"
                       name="workspaces"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Lorg/pdfsam/ui/WorkspaceService</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.JsonWorkspaceService.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/StageService;"
                       name="stage"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>Lorg/pdfsam/ui/StageService</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.DefaultStageService.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="InputPdfArgumentsLoadRequest"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.InputPdfArgumentsLoadRequest; file: org.pdfsam.ui.InputPdfArgumentsLoadRequest-->
            <attributes>
               <attribute final="true"
                          public="true"
                          static="false"
                          type="Ljava/util/List">pdfs</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="put">pdfs</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/ModuleInputOutputType;"
                       name="requiredInputTyle"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/ModuleInputOutputType</return>
                  <ops>
                     <op code="get">pdfs</op>
                     <op code="call">java.util.List.size</op>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.MULTIPLE_PDF</op>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.SINGLE_PDF</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="StageServiceControllerTest"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.StageServiceControllerTest; file: org.pdfsam.ui.StageServiceControllerTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/StageServiceController">victim</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/StageService">service</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">service</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.ui.StageServiceController.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="requestStageStatus"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.StageStatus.NULL</op>
                     <op code="call">org.pdfsam.ui.SetLatestStageStatusRequest.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.StageServiceController.requestStageStatus</op>
                     <op code="get">service</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.pdfsam.ui.StageStatus.NULL</op>
                     <op code="call">org.pdfsam.ui.StageService.save</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="JsonWorkspaceServiceTest"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.JsonWorkspaceServiceTest; file: org.pdfsam.ui.JsonWorkspaceServiceTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/JsonWorkspaceService">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                     <op code="call">org.pdfsam.ui.JsonWorkspaceService.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveNull"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">java.util.Collections.emptyMap</op>
                     <op code="call">org.pdfsam.ui.JsonWorkspaceService.saveWorkspace</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveWorkspace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="get_static">java.nio.charset.StandardCharsets.UTF_8</op>
                     <op code="call">org.apache.commons.io.FileUtils.readLines</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.JsonWorkspaceService.saveWorkspace</op>
                     <op code="get_static">java.nio.charset.StandardCharsets.UTF_8</op>
                     <op code="call">org.apache.commons.io.FileUtils.readLines</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveWorkspaceReadOnly"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.io.File.setReadOnly</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.JsonWorkspaceService.saveWorkspace</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="loadNull"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.JsonWorkspaceService.loadWorkspace</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="loadWorkspace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">org.apache.commons.io.FileUtils.copyInputStreamToFile</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.JsonWorkspaceService.loadWorkspace</op>
                     <op code="call">java.util.Map.isEmpty</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertNotNull</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Map.isEmpty</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="loadBrokenWorkspace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">org.apache.commons.io.FileUtils.copyInputStreamToFile</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.JsonWorkspaceService.loadWorkspace</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="cannotAccessWorkspace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResourceAsStream</op>
                     <op code="call">org.apache.commons.io.FileUtils.copyInputStreamToFile</op>
                     <op code="call">java.io.File.setReadable</op>
                     <op code="call">java.lang.RuntimeException.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.JsonWorkspaceService.loadWorkspace</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="loadNotExistent"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.JsonWorkspaceService.loadWorkspace</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="InputPdfArgumentsLoadRequestTest"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.InputPdfArgumentsLoadRequestTest; file: org.pdfsam.ui.InputPdfArgumentsLoadRequestTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/InputPdfArgumentsLoadRequest">victim</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.InputPdfArgumentsLoadRequest.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="requiredInputTyle"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="get">pdfs</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.io.File.toPath</op>
                     <op code="call">java.util.List.add</op>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.SINGLE_PDF</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.InputPdfArgumentsLoadRequest.requiredInputTyle</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="get">pdfs</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.io.File.toPath</op>
                     <op code="call">java.util.List.add</op>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.MULTIPLE_PDF</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.InputPdfArgumentsLoadRequest.requiredInputTyle</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="JsonWorkspaceService"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.JsonWorkspaceService; file: org.pdfsam.ui.JsonWorkspaceService-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;Ljava/io/File;)V"
                       name="saveWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="get_static">org.pdfsam.ui.JsonWorkspaceService.LOG</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.slf4j.Logger.debug</op>
                     <op code="get_static">com.fasterxml.jackson.jr.ob.JSON.std</op>
                     <op code="get_static">com.fasterxml.jackson.jr.ob.JSON$Feature.PRETTY_PRINT_OUTPUT</op>
                     <op code="call">com.fasterxml.jackson.jr.ob.JSON.with</op>
                     <op code="get_static">com.fasterxml.jackson.jr.ob.JSON$Feature.WRITE_NULL_PROPERTIES</op>
                     <op code="call">com.fasterxml.jackson.jr.ob.JSON.without</op>
                     <op code="call">com.fasterxml.jackson.jr.ob.JSON.write</op>
                     <op code="get_static">org.pdfsam.ui.JsonWorkspaceService.LOG</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.slf4j.Logger.info</op>
                     <op code="call">java.lang.RuntimeException.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/File;)Ljava/util/Map;"
                       name="loadWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>Ljava/util/Map</return>
                  <ops>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">java.util.Collections.emptyMap</op>
                     <op code="call">java.io.FileInputStream.&lt;init&gt;</op>
                     <op code="get_static">com.fasterxml.jackson.jr.ob.JSON.std</op>
                     <op code="call">com.fasterxml.jackson.jr.ob.JSON.mapFrom</op>
                     <op code="call">java.io.FileInputStream.close</op>
                     <op code="call">java.io.FileInputStream.close</op>
                     <op code="call">java.lang.Throwable.addSuppressed</op>
                     <op code="call">java.lang.RuntimeException.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.ui.JsonWorkspaceService.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DefaultStageService"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.DefaultStageService; file: org.pdfsam.ui.DefaultStageService-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">STAGE_PATH</attribute>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">STAGE_STATUS_KEY</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/StageStatus;)V"
                       name="save"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/StageStatus">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="get_static">com.fasterxml.jackson.jr.ob.JSON.std</op>
                     <op code="call">com.fasterxml.jackson.jr.ob.JSON.asString</op>
                     <op code="call">java.util.prefs.Preferences.put</op>
                     <op code="get_static">org.pdfsam.ui.DefaultStageService.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="get_static">org.pdfsam.ui.DefaultStageService.LOG</op>
                     <op code="call">org.slf4j.Logger.error</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/StageStatus;"
                       name="getLatestStatus"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/StageStatus</return>
                  <ops>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.get</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotBlank</op>
                     <op code="get_static">com.fasterxml.jackson.jr.ob.JSON.std</op>
                     <op code="call">com.fasterxml.jackson.jr.ob.JSON.beanFrom</op>
                     <op code="get_static">org.pdfsam.ui.DefaultStageService.LOG</op>
                     <op code="call">org.slf4j.Logger.error</op>
                     <op code="get_static">org.pdfsam.ui.StageStatus.NULL</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.removeNode</op>
                     <op code="call">java.util.prefs.Preferences.flush</op>
                     <op code="get_static">org.pdfsam.ui.DefaultStageService.LOG</op>
                     <op code="call">org.slf4j.Logger.error</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.ui.DefaultStageService.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="MainPane"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.MainPane; file: org.pdfsam.ui.MainPane-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/ContentPane;Lorg/pdfsam/ui/banner/BannerPane;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/ContentPane">?</arg>
                     <arg type="Lorg/pdfsam/ui/banner/BannerPane">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="get_static">javafx.scene.layout.Priority.ALWAYS</op>
                     <op code="call">javafx.scene.layout.VBox.setVgrow</op>
                     <op code="call">org.pdfsam.ui.MainPane.setId</op>
                     <op code="call">org.pdfsam.ui.MainPane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="DefaultStageServiceTest"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.DefaultStageServiceTest; file: org.pdfsam.ui.DefaultStageServiceTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/DefaultStageService">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.DefaultStageService.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.DefaultStageService.clear</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="save"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.StageStatus.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.DefaultStageService.save</op>
                     <op code="get_static">com.fasterxml.jackson.jr.ob.JSON.std</op>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.get</op>
                     <op code="call">com.fasterxml.jackson.jr.ob.JSON.beanFrom</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="testClear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.StageStatus.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.DefaultStageService.save</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.DefaultStageService.clear</op>
                     <op code="call">java.util.prefs.Preferences.userRoot</op>
                     <op code="call">java.util.prefs.Preferences.node</op>
                     <op code="call">java.util.prefs.Preferences.get</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isBlank</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullLatest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.StageStatus.NULL</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.DefaultStageService.getLatestStatus</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="getLatest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.StageStatus.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.DefaultStageService.save</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.DefaultStageService.getLatestStatus</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ContentPaneTest$Config"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.ContentPaneTest$Config; file: org.pdfsam.ui.ContentPaneTest$Config-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/UsageService;"
                       name="usageService"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/UsageService</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/Module;"
                       name="module"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/Module</return>
                  <ops>
                     <op code="call">org.pdfsam.test.DefaultPriorityTestModule.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/dashboard/DashboardItem;"
                       name="dashboardItem"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/dashboard/DashboardItem</return>
                  <ops>
                     <op code="call">org.pdfsam.test.DefaultPriorityDashboardItem.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="defaultItem"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
               </method>
            </methods>
         </class>
         <class id="ContentPane"><!--Package: org.pdfsam.ui; name: org.pdfsam.ui.ContentPane; file: org.pdfsam.ui.ContentPane-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/workarea/WorkArea">modules</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/dashboard/Dashboard">dashboard</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/layout/VBox">newsContainer</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/animation/FadeTransition">fadeIn</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/animation/FadeTransition">fadeOut</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/workarea/WorkArea;Lorg/pdfsam/ui/dashboard/Dashboard;Lorg/pdfsam/ui/news/NewsPanel;Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/workarea/WorkArea">?</arg>
                     <arg type="Lorg/pdfsam/ui/dashboard/Dashboard">?</arg>
                     <arg type="Lorg/pdfsam/ui/news/NewsPanel">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="put">modules</op>
                     <op code="put">dashboard</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="put">newsContainer</op>
                     <op code="get">newsContainer</op>
                     <op code="call">javafx.scene.layout.VBox.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.layout.StackPane.&lt;init&gt;</op>
                     <op code="get_static">javafx.scene.layout.Priority.ALWAYS</op>
                     <op code="call">org.pdfsam.ui.ContentPane.setHgrow</op>
                     <op code="get">newsContainer</op>
                     <op code="call">javafx.scene.layout.VBox.managedProperty</op>
                     <op code="get">newsContainer</op>
                     <op code="call">javafx.scene.layout.VBox.visibleProperty</op>
                     <op code="call">javafx.beans.property.BooleanProperty.bind</op>
                     <op code="get">newsContainer</op>
                     <op code="call">javafx.scene.layout.VBox.setVisible</op>
                     <op code="call">javafx.util.Duration.&lt;init&gt;</op>
                     <op code="get">newsContainer</op>
                     <op code="call">javafx.animation.FadeTransition.&lt;init&gt;</op>
                     <op code="put">fadeIn</op>
                     <op code="get">fadeIn</op>
                     <op code="call">javafx.animation.FadeTransition.setFromValue</op>
                     <op code="get">fadeIn</op>
                     <op code="call">javafx.animation.FadeTransition.setToValue</op>
                     <op code="call">javafx.util.Duration.&lt;init&gt;</op>
                     <op code="get">newsContainer</op>
                     <op code="call">javafx.animation.FadeTransition.&lt;init&gt;</op>
                     <op code="put">fadeOut</op>
                     <op code="get">fadeOut</op>
                     <op code="call">javafx.animation.FadeTransition.setFromValue</op>
                     <op code="get">fadeOut</op>
                     <op code="call">javafx.animation.FadeTransition.setToValue</op>
                     <op code="get">fadeOut</op>
                     <op code="call">javafx.animation.FadeTransition.setOnFinished</op>
                     <op code="call">org.pdfsam.ui.ContentPane.getChildren</op>
                     <op code="get">newsContainer</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.ui.event.SetActiveDashboardItemRequest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/SetActiveModuleRequest;)V"
                       name="onSetActiveModule"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/SetActiveModuleRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">dashboard</op>
                     <op code="call">org.pdfsam.ui.dashboard.Dashboard.setVisible</op>
                     <op code="get">modules</op>
                     <op code="call">org.pdfsam.ui.workarea.WorkArea.setVisible</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/event/SetActiveDashboardItemRequest;)V"
                       name="onSetActiveDashboardItem"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/event/SetActiveDashboardItemRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">dashboard</op>
                     <op code="call">org.pdfsam.ui.dashboard.Dashboard.setVisible</op>
                     <op code="get">modules</op>
                     <op code="call">org.pdfsam.ui.workarea.WorkArea.setVisible</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/news/ShowNewsPanelRequest;)V"
                       name="onShowNewsPanel"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/news/ShowNewsPanelRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">newsContainer</op>
                     <op code="call">javafx.scene.layout.VBox.isVisible</op>
                     <op code="get">newsContainer</op>
                     <op code="call">javafx.scene.layout.VBox.setVisible</op>
                     <op code="get">fadeIn</op>
                     <op code="call">javafx.animation.FadeTransition.play</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/news/HideNewsPanelRequest;)V"
                       name="onHideNewsPanel"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/news/HideNewsPanelRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">newsContainer</op>
                     <op code="call">javafx.scene.layout.VBox.isVisible</op>
                     <op code="get">fadeOut</op>
                     <op code="call">javafx.animation.FadeTransition.play</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.dashboard.about">
         <class id="AboutDashboardPane"><!--Package: org.pdfsam.ui.dashboard.about; name: org.pdfsam.ui.dashboard.about.AboutDashboardPane; file: org.pdfsam.ui.dashboard.about.AboutDashboardPane-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/Pdfsam;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/Pdfsam">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.Pdfsam.name</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.addSectionTitle</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.COPYRIGHT</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory.get</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.COPYRIGHT</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory.setIcon</op>
                     <op code="call">javafx.scene.layout.VBox.getChildren</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.VERSION</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">java.lang.String.format</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.LICENSE_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.LICENSE_NAME</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.addHyperlink</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.HOME</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.HOME_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.HOME_LABEL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.addHyperlink</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.RSS_SQUARE</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.FEED_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.addHyperlink</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.addSectionTitle</op>
                     <op code="call">java.lang.System.getProperty</op>
                     <op code="call">java.lang.System.getProperty</op>
                     <op code="call">java.lang.String.format</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.lang.System.getProperty</op>
                     <op code="call">java.lang.String.format</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.lang.System.getProperty</op>
                     <op code="call">java.lang.String.format</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.lang.System.getProperty</op>
                     <op code="call">java.lang.String.format</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">java.lang.Runtime.getRuntime</op>
                     <op code="call">java.lang.Runtime.maxMemory</op>
                     <op code="call">org.apache.commons.io.FileUtils.byteCountToDisplaySize</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory.get</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.COPY</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory.setIcon</op>
                     <op code="call">javafx.scene.control.Button.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.BUTTON</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.control.Button.setId</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">javafx.scene.layout.VBox.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.addSectionTitle</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.BUG</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.TRACKER_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.addHyperlink</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.QUESTION_CIRCLE</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.SUPPORT_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.addHyperlink</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.BOOK</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.DOCUMENTATION_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.addHyperlink</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.addSectionTitle</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.GITHUB</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.SCM_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.addHyperlink</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.FLAG_ALT</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.TRANSLATE_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.addHyperlink</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.DOLLAR</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.DONATE_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.addHyperlink</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.addSectionTitle</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.TWITTER_SQUARE</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.TWITTER_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.addHyperlink</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.FACEBOOK_SQUARE</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.FACEBOOK_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.addHyperlink</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljavafx/scene/layout/Pane;)V"
                       name="addSectionTitle"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljavafx/scene/layout/Pane">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.layout.Pane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lde/jensd/fx/glyphs/fontawesome/FontAwesomeIcon;Ljava/lang/String;Ljava/lang/String;Ljavafx/scene/layout/Pane;)V"
                       name="addHyperlink"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lde/jensd/fx/glyphs/fontawesome/FontAwesomeIcon">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljavafx/scene/layout/Pane">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.UrlButton.styledUrlButton</op>
                     <op code="call">org.pdfsam.ui.commons.UrlButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.setAll</op>
                     <op code="call">javafx.scene.layout.Pane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="AboutDashboardPaneTest"><!--Package: org.pdfsam.ui.dashboard.about; name: org.pdfsam.ui.dashboard.about.AboutDashboardPaneTest; file: org.pdfsam.ui.dashboard.about.AboutDashboardPaneTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">cleanStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/eventstudio/Listener">listener</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/mockito/ArgumentCaptor">captor</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">cleanStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">listener</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">listener</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="put">captor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.Pdfsam.name</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.VERSION</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.HOME_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.HOME_LABEL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.FEED_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.DOCUMENTATION_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.SUPPORT_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.SCM_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.TRANSLATE_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.TWITTER_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.DONATE_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.FACEBOOK_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.LICENSE_NAME</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.LICENSE_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.TRACKER_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.THANKS_URL</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPane.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clickHome"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPaneTest.clickOn</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get">captor</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">captor</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.commons.OpenUrlRequest.getUrl</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clickFeed"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPaneTest.clickOn</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get">captor</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">captor</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.commons.OpenUrlRequest.getUrl</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clickBugs"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPaneTest.clickOn</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get">captor</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">captor</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.commons.OpenUrlRequest.getUrl</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clickLicense"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPaneTest.clickOn</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.atLeastOnce</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get">captor</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">captor</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.commons.OpenUrlRequest.getUrl</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clickDocumentation"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPaneTest.clickOn</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.atLeastOnce</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get">captor</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">captor</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.commons.OpenUrlRequest.getUrl</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clickScm"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPaneTest.clickOn</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.atLeastOnce</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get">captor</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">captor</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.commons.OpenUrlRequest.getUrl</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clickTranslate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPaneTest.clickOn</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.atLeastOnce</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get">captor</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">captor</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.commons.OpenUrlRequest.getUrl</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clickDonate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPaneTest.clickOn</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.atLeastOnce</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get">captor</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">captor</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.commons.OpenUrlRequest.getUrl</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clickTwitter"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPaneTest.clickOn</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.atLeastOnce</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get">captor</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">captor</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.commons.OpenUrlRequest.getUrl</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clickFacebook"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPaneTest.clickOn</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.atLeastOnce</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get">captor</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="get">captor</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.commons.OpenUrlRequest.getUrl</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clickCopy"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.pdfsam.ui.dashboard.about.AboutDashboardPaneTest.clickOn</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam">
         <class id="Services"><!--Package: org.pdfsam; name: org.pdfsam.Services; file: org.pdfsam.Services-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="initServices"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.update.UpdateServiceConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.UIServiceConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.task.TaskExecutionServiceConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.pdf.PdfServiceConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.news.NewsServiceConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.module.ModuleServiceConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.premium.PremiumServiceConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.addConfig</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="InputPdfArgumentsController"><!--Package: org.pdfsam; name: org.pdfsam.InputPdfArgumentsController; file: org.pdfsam.InputPdfArgumentsController-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/List;)V"
                       name="accept"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="call">java.util.List.isEmpty</op>
                     <op code="call">org.pdfsam.ui.InputPdfArgumentsLoadRequest.&lt;init&gt;</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="get_static">org.pdfsam.support.io.FileType.PDF</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="get">pdfs</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="get">pdfs</op>
                     <op code="call">java.util.List.isEmpty</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="TestUtils"><!--Package: org.pdfsam; name: org.pdfsam.TestUtils; file: org.pdfsam.TestUtils-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/pdfsam/TestUtils$NotInstanceOf">NOT_INSTANCE_OF</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V"
                       name="testEqualsAndHashCodes"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                     <arg type="Ljava/lang/Object">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.TestUtils.NOT_INSTANCE_OF</op>
                     <op code="call">java.lang.Object.equals</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">java.lang.Object.equals</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.Object.hashCode</op>
                     <op code="call">java.lang.Object.hashCode</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.Object.equals</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.Object.equals</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.Object.hashCode</op>
                     <op code="call">java.lang.Object.hashCode</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.Object.equals</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">java.lang.Object.equals</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">java.lang.Object.hashCode</op>
                     <op code="call">java.lang.Object.hashCode</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">java.lang.Object.equals</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.Object.equals</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.Object.equals</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.Object.hashCode</op>
                     <op code="call">java.lang.Object.hashCode</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.Object.hashCode</op>
                     <op code="call">java.lang.Object.hashCode</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.lang.Object.hashCode</op>
                     <op code="call">java.lang.Object.hashCode</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.TestUtils$NotInstanceOf.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.TestUtils.NOT_INSTANCE_OF</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="TestUtils$NotInstanceOf"><!--Package: org.pdfsam; name: org.pdfsam.TestUtils$NotInstanceOf; file: org.pdfsam.TestUtils$NotInstanceOf-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="NoHeadless"><!--Package: org.pdfsam; name: org.pdfsam.NoHeadless; file: org.pdfsam.NoHeadless-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="InputPdfArgumentsControllerTest"><!--Package: org.pdfsam; name: org.pdfsam.InputPdfArgumentsControllerTest; file: org.pdfsam.InputPdfArgumentsControllerTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">eventStudioRule</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/eventstudio/Listener">listener</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">eventStudioRule</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">listener</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">listener</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onNull"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.InputPdfArgumentsController.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.InputPdfArgumentsController.accept</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onEmpty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.InputPdfArgumentsController.&lt;init&gt;</op>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.InputPdfArgumentsController.accept</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onOtherArgs"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.InputPdfArgumentsController.&lt;init&gt;</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.InputPdfArgumentsController.accept</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onNonExisting"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.InputPdfArgumentsController.&lt;init&gt;</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.InputPdfArgumentsController.accept</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onNonPdf"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.InputPdfArgumentsController.&lt;init&gt;</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.InputPdfArgumentsController.accept</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onPdf"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.InputPdfArgumentsController.&lt;init&gt;</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.InputPdfArgumentsController.accept</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="get">listener</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="get">pdfs</op>
                     <op code="call">java.util.List.size</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ShutdownEvent"><!--Package: org.pdfsam; name: org.pdfsam.ShutdownEvent; file: org.pdfsam.ShutdownEvent-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="WindowStatusController"><!--Package: org.pdfsam; name: org.pdfsam.WindowStatusController; file: org.pdfsam.WindowStatusController-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="true"
                          public="true"
                          static="true"
                          type="Ljava/lang/String">PDFSAM_DISABLE_UI_RESTORE</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/stage/Stage">stage</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/StageService">service</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/StageService;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/ui/StageService">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">service</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="setStage"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">stage</op>
                     <op code="call">org.pdfsam.WindowStatusController.initUi</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="initUi"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.ui.StageService.getLatestStatus</op>
                     <op code="call">java.lang.Boolean.getBoolean</op>
                     <op code="get_static">org.pdfsam.ui.StageStatus.NULL</op>
                     <op code="call">org.pdfsam.ui.StageStatus.equals</op>
                     <op code="call">org.pdfsam.WindowStatusController.hasAvailableScreen</op>
                     <op code="call">org.pdfsam.WindowStatusController.restore</op>
                     <op code="get_static">org.pdfsam.WindowStatusController.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="call">org.pdfsam.WindowStatusController.defaultStageStatus</op>
                     <op code="get_static">org.pdfsam.WindowStatusController.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="defaultStageStatus"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.stage.Screen.getPrimary</op>
                     <op code="call">javafx.stage.Screen.getVisualBounds</op>
                     <op code="get">stage</op>
                     <op code="call">javafx.geometry.Rectangle2D.getWidth</op>
                     <op code="get">stage</op>
                     <op code="call">javafx.stage.Stage.getWidth</op>
                     <op code="call">javafx.stage.Stage.setX</op>
                     <op code="get">stage</op>
                     <op code="call">javafx.geometry.Rectangle2D.getHeight</op>
                     <op code="get">stage</op>
                     <op code="call">javafx.stage.Stage.getHeight</op>
                     <op code="call">javafx.stage.Stage.setY</op>
                     <op code="get">stage</op>
                     <op code="call">javafx.stage.Stage.setMaximized</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/StageStatus;)V"
                       name="restore"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/ui/StageStatus">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">stage</op>
                     <op code="call">org.pdfsam.ui.StageStatus.getX</op>
                     <op code="call">javafx.stage.Stage.setX</op>
                     <op code="get">stage</op>
                     <op code="call">org.pdfsam.ui.StageStatus.getY</op>
                     <op code="call">javafx.stage.Stage.setY</op>
                     <op code="get">stage</op>
                     <op code="call">org.pdfsam.ui.StageStatus.getWidth</op>
                     <op code="call">javafx.stage.Stage.setWidth</op>
                     <op code="get">stage</op>
                     <op code="call">org.pdfsam.ui.StageStatus.getHeight</op>
                     <op code="call">javafx.stage.Stage.setHeight</op>
                     <op code="call">org.pdfsam.WindowStatusController.isNotMac</op>
                     <op code="call">org.pdfsam.ui.StageStatus.getMode</op>
                     <op code="get">stage</op>
                     <op code="call">org.pdfsam.ui.StageMode.restore</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isNotMac"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="call">java.lang.System.getProperty</op>
                     <op code="call">java.util.Optional.of</op>
                     <op code="call">java.util.Optional.orElse</op>
                     <op code="call">java.lang.String.toLowerCase</op>
                     <op code="call">java.lang.String.contains</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/StageStatus;)Z"
                       name="hasAvailableScreen"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/ui/StageStatus">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.StageStatus.getX</op>
                     <op code="call">org.pdfsam.ui.StageStatus.getY</op>
                     <op code="call">org.pdfsam.ui.StageStatus.getWidth</op>
                     <op code="call">org.pdfsam.ui.StageStatus.getHeight</op>
                     <op code="call">javafx.stage.Screen.getScreensForRectangle</op>
                     <op code="call">javafx.collections.ObservableList.isEmpty</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.WindowStatusController.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfsamApp"><!--Package: org.pdfsam; name: org.pdfsam.PdfsamApp; file: org.pdfsam.PdfsamApp-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="true"
                          type="Lorg/apache/commons/lang3/time/StopWatch">STOPWATCH</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/stage/Stage">primaryStage</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/UserContext">userContext</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/List">rawParameters</attribute>
               <attribute final="false" public="false" static="false" type="Z">clean</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/injector/Injector">injector</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/log/LogMessageBroadcaster">broadcaster</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.application.Application.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.&lt;init&gt;</op>
                     <op code="put">userContext</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="init"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.PdfsamApp.STOPWATCH</op>
                     <op code="call">org.apache.commons.lang3.time.StopWatch.start</op>
                     <op code="call">org.pdfsam.PdfsamApp.getParameters</op>
                     <op code="call">javafx.application.Application$Parameters.getRaw</op>
                     <op code="put">rawParameters</op>
                     <op code="call">org.pdfsam.PdfsamApp.verboseIfRequired</op>
                     <op code="call">org.pdfsam.PdfsamApp.startLogAppender</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.lang.System.setProperty</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.lang.System.setProperty</op>
                     <op code="get_static">org.pdfsam.PdfsamApp.LOG</op>
                     <op code="call">org.slf4j.Logger.info</op>
                     <op code="get">rawParameters</op>
                     <op code="call">java.util.List.contains</op>
                     <op code="get">rawParameters</op>
                     <op code="call">java.util.List.contains</op>
                     <op code="get">rawParameters</op>
                     <op code="call">java.util.List.contains</op>
                     <op code="put">clean</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.PdfsamApp.cleanUserContextIfNeeded</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.context.UserContext.getLocale</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotBlank</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.i18n.SetLocaleEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.context.UserContext.getDefaultWorkingPath</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotBlank</op>
                     <op code="call">java.nio.file.Paths.get</op>
                     <op code="call">java.nio.file.Files.isDirectory</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.io.SetLatestDirectoryEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get_static">org.pdfsam.PdfsamApp.LOG</op>
                     <op code="call">org.slf4j.Logger.warn</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="verboseIfRequired"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">rawParameters</op>
                     <op code="call">java.util.List.contains</op>
                     <op code="get">rawParameters</op>
                     <op code="call">java.util.List.contains</op>
                     <op code="get">rawParameters</op>
                     <op code="call">java.util.List.contains</op>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="get_static">ch.qos.logback.classic.Level.DEBUG</op>
                     <op code="call">ch.qos.logback.classic.Logger.setLevel</op>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="get_static">ch.qos.logback.classic.Level.DEBUG</op>
                     <op code="call">ch.qos.logback.classic.Logger.setLevel</op>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="get_static">ch.qos.logback.classic.Level.DEBUG</op>
                     <op code="call">ch.qos.logback.classic.Logger.setLevel</op>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="get_static">ch.qos.logback.classic.Level.INFO</op>
                     <op code="call">ch.qos.logback.classic.Logger.setLevel</op>
                     <op code="get_static">org.pdfsam.PdfsamApp.LOG</op>
                     <op code="call">org.slf4j.Logger.info</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/UserContext;)V"
                       name="cleanUserContextIfNeeded"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">clean</op>
                     <op code="call">org.pdfsam.context.UserContext.clear</op>
                     <op code="get_static">org.pdfsam.PdfsamApp.LOG</op>
                     <op code="call">org.slf4j.Logger.info</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">primaryStage</op>
                     <op code="call">org.pdfsam.PdfsamApp.initInjector</op>
                     <op code="put">injector</op>
                     <op code="call">org.pdfsam.UncaughtExceptionLogger.&lt;init&gt;</op>
                     <op code="call">java.lang.Thread.setDefaultUncaughtExceptionHandler</op>
                     <op code="call">org.pdfsam.PdfsamApp.initSejda</op>
                     <op code="call">org.pdfsam.PdfsamApp.cleanIfRequired</op>
                     <op code="call">org.pdfsam.PdfsamApp.initScene</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.getIcons</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instancesOfType</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.Pdfsam.name</op>
                     <op code="call">javafx.stage.Stage.setTitle</op>
                     <op code="call">javafx.stage.Stage.setOnCloseRequest</op>
                     <op code="call">org.pdfsam.PdfsamApp.requestPremiumModulesDescriptionIfRequired</op>
                     <op code="call">org.pdfsam.PdfsamApp.initWindowsStatusController</op>
                     <op code="call">org.pdfsam.PdfsamApp.initDialogsOwner</op>
                     <op code="call">org.pdfsam.PdfsamApp.initActiveModule</op>
                     <op code="call">org.pdfsam.PdfsamApp.loadWorkspaceIfRequired</op>
                     <op code="call">org.pdfsam.PdfsamApp.initOpenButtons</op>
                     <op code="call">javafx.stage.Stage.show</op>
                     <op code="call">org.pdfsam.PdfsamApp.requestCheckForUpdateIfRequired</op>
                     <op code="call">org.pdfsam.PdfsamApp.requestLatestNewsIfRequired</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                     <op code="call">org.pdfsam.PdfsamApp.closeSplash</op>
                     <op code="get_static">org.pdfsam.PdfsamApp.STOPWATCH</op>
                     <op code="call">org.apache.commons.lang3.time.StopWatch.stop</op>
                     <op code="get_static">org.pdfsam.PdfsamApp.LOG</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="get_static">org.pdfsam.PdfsamApp.STOPWATCH</op>
                     <op code="call">org.apache.commons.lang3.time.StopWatch.getTime</op>
                     <op code="call">org.apache.commons.lang3.time.DurationFormatUtils.formatDurationWords</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.slf4j.Logger.info</op>
                     <op code="call">org.pdfsam.InputPdfArgumentsController.&lt;init&gt;</op>
                     <op code="get">rawParameters</op>
                     <op code="call">org.pdfsam.InputPdfArgumentsController.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/injector/Injector;"
                       name="initInjector"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Lorg/pdfsam/injector/Injector</return>
                  <ops>
                     <op code="call">org.pdfsam.PdfsamConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.log.LoggerConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.DashboardConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.addConfig</op>
                     <op code="call">org.pdfsam.Services.initServices</op>
                     <op code="call">org.pdfsam.injector.Injector.start</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="initSejda"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.Pdfsam.shortName</op>
                     <op code="get_static">org.pdfsam.ConfigurableProperty.VERSION</op>
                     <op code="call">org.pdfsam.Pdfsam.property</op>
                     <op code="put_static">org.sejda.core.Sejda.CREATOR</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="startLogAppender"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">ch.qos.logback.classic.encoder.PatternLayoutEncoder.&lt;init&gt;</op>
                     <op code="call">ch.qos.logback.classic.encoder.PatternLayoutEncoder.setPattern</op>
                     <op code="call">org.pdfsam.ui.log.LogMessageBroadcaster.&lt;init&gt;</op>
                     <op code="put">broadcaster</op>
                     <op code="get">broadcaster</op>
                     <op code="call">org.pdfsam.ui.log.LogMessageBroadcaster.start</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="closeSplash"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.awt.SplashScreen.getSplashScreen</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/Scene;"
                       name="initScene"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>Ljavafx/scene/Scene</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">javafx.scene.layout.StackPane.&lt;init&gt;</op>
                     <op code="get_static">javafx.geometry.Pos.BOTTOM_RIGHT</op>
                     <op code="call">javafx.scene.layout.StackPane.setAlignment</op>
                     <op code="get_static">javafx.geometry.Pos.TOP_LEFT</op>
                     <op code="call">javafx.scene.layout.StackPane.setAlignment</op>
                     <op code="call">javafx.scene.layout.StackPane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.getStylesheets</op>
                     <op code="call">org.pdfsam.configuration.StylesConfig.styles</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.Scene.getAccelerators</op>
                     <op code="get_static">javafx.scene.input.KeyCode.L</op>
                     <op code="get_static">javafx.scene.input.KeyCombination.SHORTCUT_DOWN</op>
                     <op code="call">javafx.scene.input.KeyCodeCombination.&lt;init&gt;</op>
                     <op code="call">javafx.collections.ObservableMap.put</op>
                     <op code="call">javafx.scene.Scene.getAccelerators</op>
                     <op code="get_static">javafx.scene.input.KeyCode.Q</op>
                     <op code="get_static">javafx.scene.input.KeyCombination.SHORTCUT_DOWN</op>
                     <op code="call">javafx.scene.input.KeyCodeCombination.&lt;init&gt;</op>
                     <op code="call">javafx.collections.ObservableMap.put</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="stop"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.PdfsamApp.LOG</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.slf4j.Logger.info</op>
                     <op code="get">primaryStage</op>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="get">primaryStage</op>
                     <op code="call">javafx.stage.Stage.getX</op>
                     <op code="get">primaryStage</op>
                     <op code="call">javafx.stage.Stage.getY</op>
                     <op code="get">primaryStage</op>
                     <op code="call">javafx.stage.Stage.getWidth</op>
                     <op code="get">primaryStage</op>
                     <op code="call">javafx.stage.Stage.getHeight</op>
                     <op code="call">org.pdfsam.ui.StageStatus.&lt;init&gt;</op>
                     <op code="get">primaryStage</op>
                     <op code="call">org.pdfsam.ui.StageMode.valueFor</op>
                     <op code="call">org.pdfsam.ui.StageStatus.setMode</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.ui.SetLatestStageStatusRequest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="call">org.pdfsam.PdfsamApp.saveWorkspaceIfRequired</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.ShutdownEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.close</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="requestCheckForUpdateIfRequired"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.context.UserContext.isCheckForUpdates</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">org.pdfsam.update.UpdateCheckRequest.INSTANCE</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="cleanIfRequired"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">clean</op>
                     <op code="get_static">org.pdfsam.PdfsamApp.LOG</op>
                     <op code="call">org.slf4j.Logger.debug</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.news.NewsService.clear</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.StageService.clear</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="requestLatestNewsIfRequired"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.context.UserContext.isCheckForNews</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">org.pdfsam.news.FetchLatestNewsRequest.INSTANCE</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/OpenUrlRequest;)V"
                       name="openUrl"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/OpenUrlRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.PdfsamApp.getHostServices</op>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="call">org.pdfsam.ui.commons.OpenUrlRequest.getUrl</op>
                     <op code="call">javafx.application.HostServices.showDocument</op>
                     <op code="get_static">org.pdfsam.PdfsamApp.LOG</op>
                     <op code="call">org.slf4j.Logger.info</op>
                     <op code="call">java.lang.Runtime.getRuntime</op>
                     <op code="call">org.pdfsam.ui.commons.OpenUrlRequest.getUrl</op>
                     <op code="call">org.pdfsam.PdfsamApp.getOpenCmd</op>
                     <op code="call">java.lang.Runtime.exec</op>
                     <op code="get_static">org.pdfsam.PdfsamApp.LOG</op>
                     <op code="call">org.slf4j.Logger.warn</op>
                     <op code="get_static">org.pdfsam.PdfsamApp.LOG</op>
                     <op code="call">org.pdfsam.ui.commons.OpenUrlRequest.getUrl</op>
                     <op code="call">org.slf4j.Logger.warn</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="initDialogsOwner"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instancesOfType</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.dialog.OpenWithDialog.setOwner</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="initWindowsStatusController"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.WindowStatusController.setStage</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="initActiveModule"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.context.UserContext.getStartupModule</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotBlank</op>
                     <op code="get_static">org.pdfsam.PdfsamApp.LOG</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.ui.commons.SetActiveModuleRequest.activeteModule</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="initOpenButtons"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instancesOfType</op>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instancesOfType</op>
                     <op code="call">java.util.List.iterator</op>
                     <op code="call">java.util.Iterator.hasNext</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.initModules</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="requestPremiumModulesDescriptionIfRequired"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.context.UserContext.isFetchPremiumModules</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">org.pdfsam.premium.FetchPremiumModulesRequest.INSTANCE</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="loadWorkspaceIfRequired"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.PdfsamApp.getParameters</op>
                     <op code="call">javafx.application.Application$Parameters.getNamed</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.filter</op>
                     <op code="get">userContext</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.Optional.orElseGet</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotBlank</op>
                     <op code="call">java.nio.file.Paths.get</op>
                     <op code="call">java.nio.file.Files.exists</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.workspace.LoadWorkspaceEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="saveWorkspaceIfRequired"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.context.UserContext.isSaveWorkspaceOnExit</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.context.UserContext.getDefaultWorkspacePath</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isNotBlank</op>
                     <op code="call">java.nio.file.Paths.get</op>
                     <op code="call">java.nio.file.Files.exists</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">java.io.File.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)Ljava/lang/String;"
                       name="getOpenCmd"
                       static="true"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">java.lang.System.getProperty</op>
                     <op code="call">java.lang.String.toLowerCase</op>
                     <op code="call">java.lang.String.indexOf</op>
                     <op code="call">java.lang.String.format</op>
                     <op code="call">java.lang.String.indexOf</op>
                     <op code="call">java.lang.String.format</op>
                     <op code="call">java.lang.String.indexOf</op>
                     <op code="call">java.lang.String.indexOf</op>
                     <op code="call">java.lang.String.indexOf</op>
                     <op code="call">java.lang.String.format</op>
                     <op code="call">java.io.IOException.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.PdfsamApp.LOG</op>
                     <op code="call">org.apache.commons.lang3.time.StopWatch.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.PdfsamApp.STOPWATCH</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="NoWindows"><!--Package: org.pdfsam; name: org.pdfsam.NoWindows; file: org.pdfsam.NoWindows-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PdfsamConfig"><!--Package: org.pdfsam; name: org.pdfsam.PdfsamConfig; file: org.pdfsam.PdfsamConfig-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="error"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResource</op>
                     <op code="call">java.net.URL.toExternalForm</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="ok"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResource</op>
                     <op code="call">java.net.URL.toExternalForm</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/image/ImageView;"
                       name="payoff"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/image/ImageView</return>
                  <ops>
                     <op code="call">java.lang.Object.getClass</op>
                     <op code="call">java.lang.Class.getResource</op>
                     <op code="call">java.net.URL.toExternalForm</op>
                     <op code="call">javafx.scene.image.ImageView.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/context/UserContext;"
                       name="userContext"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/context/UserContext</return>
                  <ops>
                     <op code="call">org.pdfsam.context.DefaultUserContext.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/configuration/StylesConfig;"
                       name="styles"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/configuration/StylesConfig</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.Theme.ROUNDISH</op>
                     <op code="call">org.pdfsam.configuration.StylesConfig.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="TestCycles"><!--Package: org.pdfsam; name: org.pdfsam.TestCycles; file: org.pdfsam.TestCycles-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljdepend/framework/JDepend">jdepend</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/Collection">packages</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">jdepend.framework.JDepend.&lt;init&gt;</op>
                     <op code="put">jdepend</op>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="put">packages</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">jdepend</op>
                     <op code="call">jdepend.framework.JDepend.addDirectory</op>
                     <op code="get">jdepend</op>
                     <op code="call">jdepend.framework.JDepend.analyze</op>
                     <op code="put">packages</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="cycleTest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">packages</op>
                     <op code="call">java.util.Collection.iterator</op>
                     <op code="call">java.util.Iterator.hasNext</op>
                     <op code="call">java.util.Iterator.next</op>
                     <op code="call">jdepend.framework.JavaPackage.getName</op>
                     <op code="call">jdepend.framework.JavaPackage.containsCycle</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get_static">org.pdfsam.TestCycles.LOG</op>
                     <op code="call">jdepend.framework.JavaPackage.getName</op>
                     <op code="call">java.lang.String.format</op>
                     <op code="call">org.slf4j.Logger.debug</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.TestCycles.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="WindowStatusControllerTest"><!--Package: org.pdfsam; name: org.pdfsam.WindowStatusControllerTest; file: org.pdfsam.WindowStatusControllerTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">eventStudioRule</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/StageService">service</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/WindowStatusController">victim</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/stage/Stage">victimStage</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">eventStudioRule</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.stage.Stage.&lt;init&gt;</op>
                     <op code="put">victimStage</op>
                     <op code="get">victimStage</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">service</op>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.WindowStatusController.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Button.setOnAction</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="defaultOnNullStatus"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.ui.StageService.getLatestStatus</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">org.pdfsam.ui.StageStatus.NULL</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get">victim</op>
                     <op code="get">victimStage</op>
                     <op code="call">org.pdfsam.WindowStatusController.setStage</op>
                     <op code="call">org.pdfsam.WindowStatusControllerTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.sleep</op>
                     <op code="get">victimStage</op>
                     <op code="call">javafx.stage.Stage.isMaximized</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="defaultOnDisableRestore"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">service</op>
                     <op code="call">org.pdfsam.ui.StageService.getLatestStatus</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.pdfsam.ui.StageStatus.&lt;init&gt;</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.lang.System.setProperty</op>
                     <op code="get">victim</op>
                     <op code="get">victimStage</op>
                     <op code="call">org.pdfsam.WindowStatusController.setStage</op>
                     <op code="call">org.pdfsam.WindowStatusControllerTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.sleep</op>
                     <op code="get">victimStage</op>
                     <op code="call">javafx.stage.Stage.isMaximized</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">java.lang.Boolean.FALSE</op>
                     <op code="call">java.lang.Boolean.toString</op>
                     <op code="call">java.lang.System.setProperty</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="UncaughtExceptionLogger"><!--Package: org.pdfsam; name: org.pdfsam.UncaughtExceptionLogger; file: org.pdfsam.UncaughtExceptionLogger-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/Thread;Ljava/lang/Throwable;)V"
                       name="uncaughtException"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/Thread">?</arg>
                     <arg type="Ljava/lang/Throwable">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.UncaughtExceptionLogger.LOG</op>
                     <op code="call">org.slf4j.Logger.error</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.UncaughtExceptionLogger.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Cycles"><!--Package: org.pdfsam; name: org.pdfsam.Cycles; file: org.pdfsam.Cycles-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.TestCycles.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OpenFileController"><!--Package: org.pdfsam; name: org.pdfsam.OpenFileController; file: org.pdfsam.OpenFileController-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/OpenFileRequest;)V"
                       name="openPath"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/OpenFileRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.awt.EventQueue.invokeLater</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/OpenFileRequest;)V"
                       name="doOpen"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/OpenFileRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.awt.Desktop.isDesktopSupported</op>
                     <op code="call">java.awt.Desktop.getDesktop</op>
                     <op code="call">org.pdfsam.ui.commons.OpenFileRequest.getFile</op>
                     <op code="call">java.awt.Desktop.open</op>
                     <op code="get_static">org.pdfsam.OpenFileController.LOG</op>
                     <op code="call">org.pdfsam.ui.commons.OpenFileRequest.getFile</op>
                     <op code="call">java.io.File.getAbsoluteFile</op>
                     <op code="call">java.lang.String.format</op>
                     <op code="call">org.slf4j.Logger.error</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.OpenFileController.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.selection.single">
         <class id="SingleSelectionPaneToolbar"><!--Package: org.pdfsam.ui.selection.single; name: org.pdfsam.ui.selection.single.SingleSelectionPaneToolbar; file: org.pdfsam.ui.selection.single.SingleSelectionPaneToolbar-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">ownerModule</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljavafx/scene/control/Button;Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/scene/control/Button">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.ToolBar.&lt;init&gt;</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneToolbar.getItems</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneToolbar$ClearButton.&lt;init&gt;</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneToolbar.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getOwnerModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">ownerModule</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SingleSelectionPaneToolbar$ClearButton"><!--Package: org.pdfsam.ui.selection.single; name: org.pdfsam.ui.selection.single.SingleSelectionPaneToolbar$ClearButton; file: org.pdfsam.ui.selection.single.SingleSelectionPaneToolbar$ClearButton-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.ToolbarButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneToolbar$ClearButton.setText</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Tooltip.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneToolbar$ClearButton.setTooltip</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneToolbar$ClearButton.setOnAction</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/event/ActionEvent;)V"
                       name="clearAll"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/event/ActionEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.ui.commons.ClearModuleEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneToolbar$ClearButton.getOwnerModule</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="TaskParametersBuilderSingleSelectionPane"><!--Package: org.pdfsam.ui.selection.single; name: org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane; file: org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/support/params/SinglePdfSourceTaskParametersBuilder;Ljava/util/function/Consumer;)V"
                       name="apply"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/support/params/SinglePdfSourceTaskParametersBuilder">?</arg>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane.getField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.validate</op>
                     <op code="call">org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane.getField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getValidationState</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="call">org.pdfsam.ui.selection.single.TaskParametersBuilderSingleSelectionPane.getPdfDocumentDescriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.toPdfFileSource</op>
                     <op code="call">org.pdfsam.support.params.SinglePdfSourceTaskParametersBuilder.source</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">java.util.function.Consumer.accept</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SingleSelectionPaneToolbar$SelectButton"><!--Package: org.pdfsam.ui.selection.single; name: org.pdfsam.ui.selection.single.SingleSelectionPaneToolbar$SelectButton; file: org.pdfsam.ui.selection.single.SingleSelectionPaneToolbar$SelectButton-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.ToolbarButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Tooltip.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneToolbar$SelectButton.setTooltip</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneToolbar$SelectButton.setText</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SingleSelectionPaneToolbarTest"><!--Package: org.pdfsam.ui.selection.single; name: org.pdfsam.ui.selection.single.SingleSelectionPaneToolbarTest; file: org.pdfsam.ui.selection.single.SingleSelectionPaneToolbarTest-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/single/SingleSelectionPaneToolbar">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneToolbar.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneToolbar.setId</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clear"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneToolbarTest.clickOn</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="get">clearEverything</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SingleSelectionPane"><!--Package: org.pdfsam.ui.selection.single; name: org.pdfsam.ui.selection.single.SingleSelectionPane; file: org.pdfsam.ui.selection.single.SingleSelectionPane-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">ownerModule</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/io/BrowsableFileField">field</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">details</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">descriptor</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/PasswordFieldPopup">passwordPopup</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">encryptionIndicator</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/MenuItem">removeSelected</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">onLoaded</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">detailsUpdate</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/function/Consumer">encryptionIndicatorUpdate</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/beans/value/ChangeListener">onLoadingStatusChange</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/commons/ToggleChangeListener">onValidState</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="put">ownerModule</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="put">details</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="put">encryptionIndicator</op>
                     <op code="put">onLoaded</op>
                     <op code="put">detailsUpdate</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane$1.&lt;init&gt;</op>
                     <op code="put">encryptionIndicatorUpdate</op>
                     <op code="put">onLoadingStatusChange</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane$2.&lt;init&gt;</op>
                     <op code="put">onValidState</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="put">ownerModule</op>
                     <op code="get">details</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.getOwnerModule</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneToolbar$SelectButton.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.support.io.FileType.PDF</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.OPEN</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.&lt;init&gt;</op>
                     <op code="put">field</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.enforceValidation</op>
                     <op code="get">ownerModule</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopup.&lt;init&gt;</op>
                     <op code="put">passwordPopup</op>
                     <op code="get">encryptionIndicator</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get">encryptionIndicator</op>
                     <op code="get_static">javafx.scene.input.MouseEvent.MOUSE_CLICKED</op>
                     <op code="call">javafx.scene.control.Label.addEventFilter</op>
                     <op code="get">encryptionIndicator</op>
                     <op code="call">javafx.geometry.Insets.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.setMargin</op>
                     <op code="get">field</op>
                     <op code="get">encryptionIndicator</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.setGraphic</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">field</op>
                     <op code="get_static">javafx.scene.layout.Priority.ALWAYS</op>
                     <op code="call">javafx.scene.layout.HBox.setHgrow</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.getChildren</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.getOwnerModule</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneToolbar.&lt;init&gt;</op>
                     <op code="get">field</op>
                     <op code="get">details</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.validProperty</op>
                     <op code="get">onValidState</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.addListener</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.initContextMenu</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/pdf/PdfDocumentDescriptor;)V"
                       name="initializeFor"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/pdf/PdfDocumentDescriptor">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.invalidateDescriptor</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.getOwnerModule</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.&lt;init&gt;</op>
                     <op code="put">descriptor</op>
                     <op code="get">descriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.loadingStatus</op>
                     <op code="get">onLoadingStatusChange</op>
                     <op code="call">javafx.beans.value.WeakChangeListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.support.ObservableAtomicReference.addListener</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.setContextMenuDisable</op>
                     <op code="get">descriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.add</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="reset"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.invalidateDescriptor</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.setContextMenuDisable</op>
                     <op code="get">encryptionIndicator</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                     <op code="get">details</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="disableRemoveMenuItemIfNeeded"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">removeSelected</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isEmpty</op>
                     <op code="call">javafx.scene.control.MenuItem.setDisable</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)V"
                       name="setContextMenuDisable"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getContextMenu</op>
                     <op code="call">javafx.scene.control.ContextMenu.getItems</op>
                     <op code="call">javafx.collections.ObservableList.forEach</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.disableRemoveMenuItemIfNeeded</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidateDescriptor"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">descriptor</op>
                     <op code="call">java.util.Objects.nonNull</op>
                     <op code="get">descriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.releaseAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="showPasswordFieldPopup"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.getScene</op>
                     <op code="call">javafx.scene.Scene.getWindow</op>
                     <op code="call">javafx.stage.Window.isShowing</op>
                     <op code="get">encryptionIndicator</op>
                     <op code="get">encryptionIndicator</op>
                     <op code="call">javafx.scene.control.Label.getWidth</op>
                     <op code="get">encryptionIndicator</op>
                     <op code="call">javafx.scene.control.Label.getHeight</op>
                     <op code="call">javafx.scene.control.Label.localToScene</op>
                     <op code="call">javafx.stage.Window.getX</op>
                     <op code="call">javafx.scene.Scene.getX</op>
                     <op code="call">javafx.geometry.Point2D.getX</op>
                     <op code="call">java.lang.Math.round</op>
                     <op code="call">javafx.stage.Window.getY</op>
                     <op code="call">javafx.scene.Scene.getY</op>
                     <op code="call">javafx.geometry.Point2D.getY</op>
                     <op code="call">java.lang.Math.round</op>
                     <op code="get">passwordPopup</op>
                     <op code="get">descriptor</op>
                     <op code="call">org.pdfsam.ui.selection.PasswordFieldPopup.showFor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/pdf/PdfDocumentDescriptor;"
                       name="getPdfDocumentDescriptor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/pdf/PdfDocumentDescriptor</return>
                  <ops>
                     <op code="get">descriptor</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/io/BrowsableFileField;"
                       name="getField"
                       static="false"
                       visibility="protected">
                  <args/>
                  <return>Lorg/pdfsam/ui/io/BrowsableFileField</return>
                  <ops>
                     <op code="get">field</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="saveStateTo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">descriptor</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.getId</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="get">descriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getFile</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.isSavePwdInWorkspaceFile</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.getId</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="get">descriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getPassword</op>
                     <op code="call">org.pdfsam.support.EncryptionUtils.encrypt</op>
                     <op code="call">java.util.Map.put</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Map;)V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Map">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.getField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.getId</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">java.util.Optional.ofNullable</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/function/Consumer;)V"
                       name="addOnLoaded"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">onLoaded</op>
                     <op code="call">java.util.function.Consumer.andThen</op>
                     <op code="put">onLoaded</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="initContextMenu"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.INFORMATION_OUTLINE</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.createMenuItem</op>
                     <op code="get_static">javafx.scene.input.KeyCode.P</op>
                     <op code="get_static">javafx.scene.input.KeyCombination.ALT_DOWN</op>
                     <op code="call">javafx.scene.input.KeyCodeCombination.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setAccelerator</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.MINUS</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.createMenuItem</op>
                     <op code="put">removeSelected</op>
                     <op code="get">removeSelected</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.AIRPLANE_LANDING</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.createMenuItem</op>
                     <op code="get_static">javafx.scene.input.KeyCode.O</op>
                     <op code="get_static">javafx.scene.input.KeyCombination.ALT_DOWN</op>
                     <op code="call">javafx.scene.input.KeyCodeCombination.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.MenuItem.setAccelerator</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.FILE_PDF_BOX</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.createMenuItem</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.FOLDER_OUTLINE</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.createMenuItem</op>
                     <op code="call">javafx.scene.control.MenuItem.setOnAction</op>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">javafx.scene.control.SeparatorMenuItem.&lt;init&gt;</op>
                     <op code="get">removeSelected</op>
                     <op code="call">javafx.scene.control.SeparatorMenuItem.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.ContextMenu.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setContextMenu</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/ClearModuleEvent;)V"
                       name="onClearSelected"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/ClearModuleEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.clear</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.disableRemoveMenuItemIfNeeded</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/pdf/PdfLoadRequestEvent;)V"
                       name="onLoadDocumentsRequest"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/pdf/PdfLoadRequestEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.pdf.PdfLoadRequestEvent.getDocuments</op>
                     <op code="call">java.util.Collection.stream</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.map</op>
                     <op code="get">field</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.Optional.ifPresent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Lde/jensd/fx/glyphs/materialdesignicons/MaterialDesignIcon;)Ljavafx/scene/control/MenuItem;"
                       name="createMenuItem"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lde/jensd/fx/glyphs/materialdesignicons/MaterialDesignIcon">?</arg>
                  </args>
                  <return>Ljavafx/scene/control/MenuItem</return>
                  <ops>
                     <op code="call">javafx.scene.control.MenuItem.&lt;init&gt;</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.get</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.setIcon</op>
                     <op code="call">javafx.scene.control.MenuItem.setDisable</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getOwnerModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">ownerModule</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="setPromptText"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">field</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setPromptText</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="SingleSelectionPaneTest"><!--Package: org.pdfsam.ui.selection.single; name: org.pdfsam.ui.selection.single.SingleSelectionPaneTest; file: org.pdfsam.ui.selection.single.SingleSelectionPaneTest-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">tmpFolder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/selection/single/SingleSelectionPane">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">tmpFolder</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">java.util.Locale.UK</op>
                     <op code="call">java.util.Locale.toLanguageTag</op>
                     <op code="call">org.pdfsam.i18n.SetLocaleEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="call">java.lang.System.setProperty</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.setId</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="loadEvent"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typePathAndValidate</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="infoMenuItem"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typePathAndValidate</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.rightClickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.clickOn</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setDestinationMenuItem"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest$1.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typePathAndValidate</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.rightClickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.clickOn</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest$1.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="openFileMenuItem"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest$2.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typePathAndValidate</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.rightClickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.clickOn</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest$2.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="openFolderMenuItem"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest$3.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typePathAndValidate</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.rightClickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.clickOn</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest$3.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="removeMenuItem"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typePathAndValidate</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.rightClickOn</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.clickOn</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.getField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="additionalOnLoadedConsumer"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.HitConsumer.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.addOnLoaded</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.moveToLoadedState</op>
                     <op code="call">org.pdfsam.test.HitConsumer.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="additionalOnLoadedConsumerNotHit"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.HitConsumer.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.addOnLoaded</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.moveToEncrytedState</op>
                     <op code="call">org.pdfsam.test.HitConsumer.isHit</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onLoadedChangedSelectedPdfVersionEvent"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.moveToLoadedState</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onDecryptedChangedSelectedPdfVersionEvent"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.moveToLoadedWithDecryption</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onLoadedSetDestinationRequest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.moveToLoadedState</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.commons.SetDestinationRequest.isFallback</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onDecryptedSetDestinationRequest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.moveToLoadedWithDecryption</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.ui.commons.SetDestinationRequest.isFallback</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="disableMenuOnInvalid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typePathAndValidate</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getContextMenu</op>
                     <op code="call">javafx.scene.control.ContextMenu.getItems</op>
                     <op code="call">javafx.collections.ObservableList.parallelStream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="disableMenuOnSwitchToInvalid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typePathAndValidate</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typePathAndValidate</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getContextMenu</op>
                     <op code="call">javafx.scene.control.ContextMenu.getItems</op>
                     <op code="call">javafx.collections.ObservableList.parallelStream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="loadingStateDetails"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typePathAndValidate</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="loadedDetails"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.moveToLoadedState</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onSaveWorkspace"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.moveToLoadedStateWithSpecialChars</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.saveStateTo</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertNull</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.hamcrest.Matchers.endsWith</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onSaveWorkspaceWithPwd"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.context.DefaultUserContext.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SAVE_PWD_IN_WORKSPACE</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.moveToLoadedWithDecryption</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.getPdfDocumentDescriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.setPassword</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.saveStateTo</op>
                     <op code="call">org.pdfsam.support.EncryptionUtils.encrypt</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.hamcrest.Matchers.endsWith</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onSaveWorkspaceWithoutPwd"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.context.DefaultUserContext.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SAVE_PWD_IN_WORKSPACE</op>
                     <op code="call">org.pdfsam.context.DefaultUserContext.setBooleanPreference</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.moveToLoadedWithDecryption</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.getPdfDocumentDescriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.setPassword</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.saveStateTo</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isBlank</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isBlank</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">java.util.Map.get</op>
                     <op code="call">org.hamcrest.Matchers.endsWith</op>
                     <op code="call">org.junit.Assert.assertThat</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onSaveWorkspaceEmptyDescriptor"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.saveStateTo</op>
                     <op code="call">java.util.Map.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreStateFromPwdBackwardCompatible"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.getField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.getPdfDocumentDescriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getPassword</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreStateFrom"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.pdfsam.support.EncryptionUtils.encrypt</op>
                     <op code="call">java.util.Map.put</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.getField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.getPdfDocumentDescriptor</op>
                     <op code="call">org.pdfsam.pdf.PdfDocumentDescriptor.getPassword</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="restoreStateFromEmpty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.moveToLoadedState</op>
                     <op code="call">java.util.HashMap.&lt;init&gt;</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPane.getField</op>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="decryptedDetails"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.moveToLoadedWithDecryption</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="loadedDetailsSpecialChars"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.moveToLoadedStateWithSpecialChars</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.tryQuery</op>
                     <op code="call">java.util.Optional.isPresent</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="emptyDetailsOnSwithToInvalid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.moveToLoadedWithDecryption</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typePathAndValidate</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryLabeled</op>
                     <op code="call">javafx.scene.control.Labeled.getText</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clickWithErrorsShowsLogStage"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typePathAndValidate</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.WARNING</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.unicode</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.clickOn</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clickEncryptedThrowsRequest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.moveToEncrytedState</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.LOCK</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.unicode</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.clickOn</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.write</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.testfx.api.FxRobot.clickOn</op>
                     <op code="call">org.mockito.Mockito.times</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="emptyStatusIndicatorOnSwithToInvalid"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.moveToLoadedWithDecryption</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typePathAndValidate</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryLabeled</op>
                     <op code="call">javafx.scene.control.Labeled.getText</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidatedDescriptorDoesntTriggerAnything"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typePathAndValidate</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typePathAndValidate</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryLabeled</op>
                     <op code="call">javafx.scene.control.Labeled.getText</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryLabeled</op>
                     <op code="call">javafx.scene.control.Labeled.getText</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.isEmpty</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getContextMenu</op>
                     <op code="call">javafx.scene.control.ContextMenu.getItems</op>
                     <op code="call">javafx.collections.ObservableList.parallelStream</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.filter</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/selection/single/SingleSelectionPane;)V"
                       name="moveToLoadedState"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/ui/selection/single/SingleSelectionPane">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typePathAndValidate</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/selection/single/SingleSelectionPane;)V"
                       name="moveToEncrytedState"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/ui/selection/single/SingleSelectionPane">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typePathAndValidate</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/selection/single/SingleSelectionPane;)V"
                       name="moveToLoadedWithDecryption"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/ui/selection/single/SingleSelectionPane">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typePathAndValidate</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/selection/single/SingleSelectionPane;)V"
                       name="moveToLoadedStateWithSpecialChars"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/ui/selection/single/SingleSelectionPane">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typeSpecialPathAndValidate</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="typeSpecialPathAndValidate"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">tmpFolder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typePathAndValidate</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="typePathAndValidate"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">tmpFolder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.typePathAndValidate</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="typePathAndValidate"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.selection.single.SingleSelectionPaneTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.TAB</op>
                     <op code="call">org.testfx.api.FxRobotInterface.type</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.sound">
         <class id="PlaySoundController"><!--Package: org.pdfsam.sound; name: org.pdfsam.sound.PlaySoundController; file: org.pdfsam.sound.PlaySoundController-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/UserContext">userContext</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">okSoundURI</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">errorSoundURI</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/context/UserContext;Ljava/lang/String;Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotBlank</op>
                     <op code="put">userContext</op>
                     <op code="put">okSoundURI</op>
                     <op code="put">errorSoundURI</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/notification/event/TaskExecutionFailedEvent;)V"
                       name="playFailed"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/notification/event/TaskExecutionFailedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">errorSoundURI</op>
                     <op code="call">org.pdfsam.sound.PlaySoundController.playSound</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/notification/event/TaskExecutionCompletedEvent;)V"
                       name="playCompleted"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/notification/event/TaskExecutionCompletedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">okSoundURI</op>
                     <op code="call">org.pdfsam.sound.PlaySoundController.playSound</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="playSound"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.context.UserContext.isPlaySounds</op>
                     <op code="call">javafx.scene.media.AudioClip.&lt;init&gt;</op>
                     <op code="call">javafx.scene.media.AudioClip.play</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PlaySoundControllerTest"><!--Package: org.pdfsam.sound; name: org.pdfsam.sound.PlaySoundControllerTest; file: org.pdfsam.sound.PlaySoundControllerTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/UserContext">userContext</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">userContext</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.context.UserContext.isPlaySounds</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.FALSE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="blankOk"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.sound.PlaySoundController.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="blankError"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.sound.PlaySoundController.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullOk"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.sound.PlaySoundController.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullError"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.sound.PlaySoundController.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="completeExecutionTriggersSound"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.sound.PlaySoundController.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionCompletedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.context.UserContext.isPlaySounds</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="failedExecutionTriggersSound"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.sound.PlaySoundController.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionFailedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.pdfsam.context.UserContext.isPlaySounds</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.quickbar">
         <class id="BaseQuickbarButtonsPane"><!--Package: org.pdfsam.ui.quickbar; name: org.pdfsam.ui.quickbar.BaseQuickbarButtonsPane; file: org.pdfsam.ui.quickbar.BaseQuickbarButtonsPane-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/beans/property/BooleanProperty">displayText</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.beans.property.SimpleBooleanProperty.&lt;init&gt;</op>
                     <op code="put">displayText</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButtonsPane.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)V"
                       name="setDisplayText"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButtonsPane.displayTextProperty</op>
                     <op code="call">javafx.beans.property.BooleanProperty.set</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isDisplayText"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">displayText</op>
                     <op code="call">javafx.beans.property.BooleanProperty.get</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/beans/property/BooleanProperty;"
                       name="displayTextProperty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/beans/property/BooleanProperty</return>
                  <ops>
                     <op code="get">displayText</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BaseQuickbarButtonTest"><!--Package: org.pdfsam.ui.quickbar; name: org.pdfsam.ui.quickbar.BaseQuickbarButtonTest; file: org.pdfsam.ui.quickbar.BaseQuickbarButtonTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">javaFxThread</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="contentDisplay"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.isDisplayText</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get_static">javafx.scene.control.ContentDisplay.GRAPHIC_ONLY</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.getContentDisplay</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.setDisplayText</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.isDisplayText</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get_static">javafx.scene.control.ContentDisplay.LEFT</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.getContentDisplay</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="selected"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.isSelected</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.isDisabled</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.setSelected</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.isSelected</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.isDisabled</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="graphicClass"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.contains</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.setGraphic</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.contains</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullProofGraphicListener"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.setGraphic</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ExpandButtonTest"><!--Package: org.pdfsam.ui.quickbar; name: org.pdfsam.ui.quickbar.ExpandButtonTest; file: org.pdfsam.ui.quickbar.ExpandButtonTest-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.quickbar.ExpandButton.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="changeGraphic"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.quickbar.ExpandButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">javafx.scene.control.ToggleButton.graphicProperty</op>
                     <op code="call">javafx.beans.property.ObjectProperty.addListener</op>
                     <op code="call">org.pdfsam.ui.quickbar.ExpandButtonTest.clickOn</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">javafx.beans.value.ChangeListener.changed</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BaseQuickbarButton"><!--Package: org.pdfsam.ui.quickbar; name: org.pdfsam.ui.quickbar.BaseQuickbarButton; file: org.pdfsam.ui.quickbar.BaseQuickbarButton-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljavafx/css/PseudoClass">SELECTED_PSEUDOCLASS_STATE</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/beans/property/BooleanProperty">displayText</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/beans/property/BooleanProperty">selected</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton$1.&lt;init&gt;</op>
                     <op code="put">displayText</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton$2.&lt;init&gt;</op>
                     <op code="put">selected</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.setMaxWidth</op>
                     <op code="get_static">javafx.scene.control.ContentDisplay.GRAPHIC_ONLY</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.setContentDisplay</op>
                     <op code="get_static">javafx.geometry.Pos.CENTER</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.setAlignment</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.graphicProperty</op>
                     <op code="call">javafx.beans.property.ObjectProperty.addListener</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/beans/property/BooleanProperty;"
                       name="displayTextProperty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/beans/property/BooleanProperty</return>
                  <ops>
                     <op code="get">displayText</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)V"
                       name="setDisplayText"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.displayTextProperty</op>
                     <op code="call">javafx.beans.property.BooleanProperty.set</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isDisplayText"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">displayText</op>
                     <op code="call">javafx.beans.property.BooleanProperty.get</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/beans/property/BooleanProperty;"
                       name="selectedProperty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/beans/property/BooleanProperty</return>
                  <ops>
                     <op code="get">selected</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Z)V"
                       name="setSelected"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Z">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButton.selectedProperty</op>
                     <op code="call">javafx.beans.property.BooleanProperty.set</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Z"
                       name="isSelected"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Z</return>
                  <ops>
                     <op code="get">selected</op>
                     <op code="call">javafx.beans.property.BooleanProperty.get</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.css.PseudoClass.getPseudoClass</op>
                     <op code="put_static">org.pdfsam.ui.quickbar.BaseQuickbarButton.SELECTED_PSEUDOCLASS_STATE</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="QuickbarPaneTest"><!--Package: org.pdfsam.ui.quickbar; name: org.pdfsam.ui.quickbar.QuickbarPaneTest; file: org.pdfsam.ui.quickbar.QuickbarPaneTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButtonsPane.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButtonsPane.setId</op>
                     <op code="call">org.pdfsam.ui.quickbar.QuickbarPane.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="click"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.quickbar.QuickbarPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButtonsPane.isDisplayText</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.ui.quickbar.QuickbarPaneTest.clickOn</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButtonsPane.isDisplayText</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="QuickbarPane"><!--Package: org.pdfsam.ui.quickbar; name: org.pdfsam.ui.quickbar.QuickbarPane; file: org.pdfsam.ui.quickbar.QuickbarPane-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/quickbar/BaseQuickbarButtonsPane;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/quickbar/BaseQuickbarButtonsPane">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.quickbar.ExpandButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.quickbar.QuickbarPane.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.ui.quickbar.BaseQuickbarButtonsPane.displayTextProperty</op>
                     <op code="call">org.pdfsam.ui.quickbar.ExpandButton.selectedProperty</op>
                     <op code="call">javafx.beans.property.BooleanProperty.bind</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.VBox.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get_static">javafx.scene.layout.Priority.ALWAYS</op>
                     <op code="call">org.pdfsam.ui.quickbar.QuickbarPane.setVgrow</op>
                     <op code="call">org.pdfsam.ui.quickbar.QuickbarPane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ExpandButton"><!--Package: org.pdfsam.ui.quickbar; name: org.pdfsam.ui.quickbar.ExpandButton; file: org.pdfsam.ui.quickbar.ExpandButton-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/ToggleButton">toggle</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/shape/SVGPath">expand</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/shape/SVGPath">collapse</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.ToggleButton.&lt;init&gt;</op>
                     <op code="put">toggle</op>
                     <op code="call">javafx.scene.shape.SVGPath.&lt;init&gt;</op>
                     <op code="put">expand</op>
                     <op code="call">javafx.scene.shape.SVGPath.&lt;init&gt;</op>
                     <op code="put">collapse</op>
                     <op code="call">org.pdfsam.ui.quickbar.ExpandButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">toggle</op>
                     <op code="call">javafx.scene.control.ToggleButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get">expand</op>
                     <op code="call">javafx.scene.shape.SVGPath.setContent</op>
                     <op code="get">expand</op>
                     <op code="call">javafx.scene.shape.SVGPath.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">collapse</op>
                     <op code="call">javafx.scene.shape.SVGPath.setContent</op>
                     <op code="get">collapse</op>
                     <op code="call">javafx.scene.shape.SVGPath.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">toggle</op>
                     <op code="get">expand</op>
                     <op code="call">javafx.scene.control.ToggleButton.setGraphic</op>
                     <op code="get">toggle</op>
                     <op code="call">javafx.scene.control.ToggleButton.selectedProperty</op>
                     <op code="call">javafx.beans.property.BooleanProperty.addListener</op>
                     <op code="get">toggle</op>
                     <op code="call">javafx.geometry.Insets.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.setMargin</op>
                     <op code="call">org.pdfsam.ui.quickbar.ExpandButton.getChildren</op>
                     <op code="get">toggle</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/beans/property/BooleanProperty;"
                       name="selectedProperty"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/beans/property/BooleanProperty</return>
                  <ops>
                     <op code="get">toggle</op>
                     <op code="call">javafx.scene.control.ToggleButton.selectedProperty</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.dashboard.preference">
         <class id="PreferencePaneTest"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferencePaneTest; file: org.pdfsam.ui.dashboard.preference.PreferencePaneTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="true"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">STUDIO_RULE</attribute>
               <attribute final="false"
                          public="true"
                          static="true"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">INIT_FX</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/injector/Injector">injector</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUpClass"
                       static="true"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">java.util.Locale.UK</op>
                     <op code="call">java.util.Locale.toLanguageTag</op>
                     <op code="call">org.pdfsam.i18n.SetLocaleEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferencePaneTest$Config.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceConfig.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.injector.Injector.start</op>
                     <op code="put">injector</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="configOnStartup"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">injector</op>
                     <op code="call">org.pdfsam.injector.Injector.instance</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferencePane.lookup</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferencePane.lookup</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.isSelected</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferencePane.lookup</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.isSelected</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferencePane.lookup</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.isSelected</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferencePane.lookup</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.isSelected</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferencePane.lookup</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.isSelected</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferencePane.lookup</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceRadioButton.isSelected</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferencePane.lookup</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferencePane.lookup</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.getSelectionModel</op>
                     <op code="call">javafx.scene.control.SingleSelectionModel.getSelectedItem</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.getValue</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.ui.dashboard.preference.PreferencePaneTest.STUDIO_RULE</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put_static">org.pdfsam.ui.dashboard.preference.PreferencePaneTest.INIT_FX</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceBrowsableFileField"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileField; file: org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileField-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/context/StringUserPreference;Lorg/pdfsam/support/io/FileType;Lorg/pdfsam/ui/io/RememberingLatestFileChooserWrapper$OpenType;Lorg/pdfsam/context/UserContext;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/context/StringUserPreference">?</arg>
                     <arg type="Lorg/pdfsam/support/io/FileType">?</arg>
                     <arg type="Lorg/pdfsam/ui/io/RememberingLatestFileChooserWrapper$OpenType">?</arg>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableFileField.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileField.enforceValidation</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.validProperty</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceSetterOnValidState.&lt;init&gt;</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.addListener</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceThumbnailsPane"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceThumbnailsPane; file: org.pdfsam.ui.dashboard.preference.PreferenceThumbnailsPane-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/dashboard/preference/PreferenceComboBox;Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox;Lorg/pdfsam/ui/dashboard/preference/PreferenceIntTextField;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceComboBox">?</arg>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox">?</arg>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceIntTextField">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Tooltip.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.setTooltip</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.HCONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.layout.HBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.VITEM</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Tooltip.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.setTooltip</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceThumbnailsPane.getChildren</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceThumbnailsPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceWorkspacePane"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceWorkspacePane; file: org.pdfsam.ui.dashboard.preference.PreferenceWorkspacePane-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/dashboard/preference/PreferenceBrowsableDirectoryField;Lorg/pdfsam/ui/dashboard/preference/PreferenceBrowsableFileField;Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox;Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceBrowsableDirectoryField">?</arg>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceBrowsableFileField">?</arg>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox">?</arg>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setPromptText</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryField.setBrowseWindowTitle</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="get_static">javafx.scene.layout.Priority.ALWAYS</op>
                     <op code="call">javafx.scene.layout.HBox.setHgrow</op>
                     <op code="call">javafx.scene.layout.HBox.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setPromptText</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileField.setBrowseWindowTitle</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="get_static">javafx.scene.layout.Priority.ALWAYS</op>
                     <op code="call">javafx.scene.layout.HBox.setHgrow</op>
                     <op code="call">javafx.scene.layout.HBox.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.validProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.addListener</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.validate</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceWorkspacePane.getChildren</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceWorkspacePane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceAppearencePane"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceAppearencePane; file: org.pdfsam.ui.dashboard.preference.PreferenceAppearencePane-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/dashboard/preference/PreferenceComboBox;Lorg/pdfsam/ui/dashboard/preference/PreferenceComboBox;Lorg/pdfsam/ui/dashboard/preference/ClearStatisticsButton;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceComboBox">?</arg>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceComboBox">?</arg>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/ClearStatisticsButton">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.GridPane.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceAppearencePane.add</op>
                     <op code="get_static">org.pdfsam.i18n.DefaultI18nContext.SUPPORTED_LOCALES</op>
                     <op code="call">java.util.Set.stream</op>
                     <op code="call">java.util.Comparator.comparing</op>
                     <op code="call">java.util.stream.Stream.sorted</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.getItems</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="call">java.util.Locale.getDefault</op>
                     <op code="call">org.pdfsam.support.LocaleKeyValueItem.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.setValue</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.valueProperty</op>
                     <op code="call">javafx.beans.property.ObjectProperty.addListener</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.setMaxWidth</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceAppearencePane.setFillWidth</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceAppearencePane.add</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceAppearencePane.add</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceAppearencePane.add</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.setMaxWidth</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceAppearencePane.setFillWidth</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceAppearencePane.add</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceAppearencePane.add</op>
                     <op code="call">javafx.scene.layout.GridPane.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">javafx.scene.layout.GridPane.add</op>
                     <op code="call">javafx.scene.layout.GridPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.GRID</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceAppearencePane.add</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceAppearencePane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceAppearencePane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.GRID</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ClearStatisticsButtonTest"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.ClearStatisticsButtonTest; file: org.pdfsam.ui.dashboard.preference.ClearStatisticsButtonTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.preference.ClearStatisticsButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.ClearStatisticsButton.setId</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="eventSent"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.ClearStatisticsButtonTest.clickOn</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceBehaviorPane"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceBehaviorPane; file: org.pdfsam.ui.dashboard.preference.PreferenceBehaviorPane-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox;Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox;Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox;Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox;Lorg/pdfsam/ui/dashboard/preference/CheckForUpdatesButton;Lorg/pdfsam/ui/dashboard/preference/PreferenceIntTextField;Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox">?</arg>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox">?</arg>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox">?</arg>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox">?</arg>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/CheckForUpdatesButton">?</arg>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceIntTextField">?</arg>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.GridPane.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBehaviorPane.add</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBehaviorPane.setFillWidth</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceIntTextField.setMaxWidth</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBehaviorPane.add</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBehaviorPane.add</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBehaviorPane.add</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBehaviorPane.add</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBehaviorPane.add</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBehaviorPane.add</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBehaviorPane.add</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBehaviorPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBehaviorPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.GRID</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceRadioButtonTest"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceRadioButtonTest; file: org.pdfsam.ui.dashboard.preference.PreferenceRadioButtonTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/UserContext">userContext</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">userContext</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SMART_OUTPUT</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceRadioButton.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="preferenceSetOnClick"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceRadioButtonTest.clickOn</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SMART_OUTPUT</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">org.pdfsam.context.UserContext.setBooleanPreference</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceIntTextFieldTest"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceIntTextFieldTest; file: org.pdfsam.ui.dashboard.preference.PreferenceIntTextFieldTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/UserContext">userContext</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">userContext</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.IntUserPreference.THUMBNAILS_SIZE</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.support.validation.Validators.positiveInteger</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceIntTextField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceIntTextField.setId</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceIntTextFieldTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.pdfsam.context.IntUserPreference.THUMBNAILS_SIZE</op>
                     <op code="call">org.pdfsam.context.UserContext.setIntegerPreference</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceIntTextFieldTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyInt</op>
                     <op code="call">org.pdfsam.context.UserContext.setIntegerPreference</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="emptyValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceIntTextFieldTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.ENTER</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.mockito.ArgumentMatchers.anyInt</op>
                     <op code="call">org.pdfsam.context.UserContext.setIntegerPreference</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceComboBoxTest"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceComboBoxTest; file: org.pdfsam.ui.dashboard.preference.PreferenceComboBoxTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/UserContext">userContext</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">userContext</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.LOCALE</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.setId</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.getItems</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="preferenceSetOnClick"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBoxTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.LOCALE</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">org.pdfsam.context.UserContext.setStringPreference</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceIntTextField"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceIntTextField; file: org.pdfsam.ui.dashboard.preference.PreferenceIntTextField-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/context/IntUserPreference;Lorg/pdfsam/context/UserContext;Lorg/pdfsam/support/validation/Validator;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/context/IntUserPreference">?</arg>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                     <arg type="Lorg/pdfsam/support/validation/Validator">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceIntTextField.setValidator</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceIntTextField.setEnableInvalidStyle</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceIntTextField.setOnEnterValidation</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceIntTextField.validProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.addListener</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.ui.dashboard.preference.PreferenceIntTextField.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CheckForUpdatesButton"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.CheckForUpdatesButton; file: org.pdfsam.ui.dashboard.preference.CheckForUpdatesButton-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.CheckForUpdatesButton.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.BUTTON</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.CheckForUpdatesButton.setOnAction</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceRadioButton"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceRadioButton; file: org.pdfsam.ui.dashboard.preference.PreferenceRadioButton-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/BooleanUserPreference">preference</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/context/BooleanUserPreference;Ljava/lang/String;ZLorg/pdfsam/context/UserContext;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/context/BooleanUserPreference">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Z">?</arg>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.RadioButton.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceRadioButton.setSelected</op>
                     <op code="put">preference</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceRadioButton.selectedProperty</op>
                     <op code="call">javafx.beans.property.BooleanProperty.addListener</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.ui.dashboard.preference.PreferenceRadioButton.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceCheckBoxTest"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceCheckBoxTest; file: org.pdfsam.ui.dashboard.preference.PreferenceCheckBoxTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/UserContext">userContext</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">userContext</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.CHECK_UPDATES</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="preferenceSetOnClick"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBoxTest.clickOn</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.CHECK_UPDATES</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">java.lang.Boolean.booleanValue</op>
                     <op code="call">org.pdfsam.context.UserContext.setBooleanPreference</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceCheckBox"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceCheckBox; file: org.pdfsam.ui.dashboard.preference.PreferenceCheckBox-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/BooleanUserPreference">preference</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/context/BooleanUserPreference;Ljava/lang/String;ZLorg/pdfsam/context/UserContext;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/context/BooleanUserPreference">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Z">?</arg>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.CheckBox.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.setSelected</op>
                     <op code="put">preference</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.selectedProperty</op>
                     <op code="call">javafx.beans.property.BooleanProperty.addListener</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceOutputPane"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceOutputPane; file: org.pdfsam.ui.dashboard.preference.PreferenceOutputPane-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/dashboard/preference/PreferenceRadioButton;Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceRadioButton">?</arg>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">javafx.scene.control.ToggleGroup.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.RadioButton.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.RadioButton.setToggleGroup</op>
                     <op code="call">javafx.scene.control.RadioButton.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.VITEM</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.control.RadioButton.setId</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceRadioButton.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.VITEM</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceRadioButton.setToggleGroup</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceRadioButton.setGraphic</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceRadioButton.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.WITH_HELP</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.control.ToggleGroup.getSelectedToggle</op>
                     <op code="call">java.util.Objects.isNull</op>
                     <op code="call">javafx.scene.control.ToggleGroup.selectToggle</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceOutputPane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceOutputPane.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="CheckForUpdatesButtonTest"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.CheckForUpdatesButtonTest; file: org.pdfsam.ui.dashboard.preference.CheckForUpdatesButtonTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearStudio</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.preference.CheckForUpdatesButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.CheckForUpdatesButton.setId</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="eventSent"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.CheckForUpdatesButtonTest.clickOn</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ClearStatisticsButton"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.ClearStatisticsButton; file: org.pdfsam.ui.dashboard.preference.ClearStatisticsButton-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.ClearStatisticsButton.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.BUTTON</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.ClearStatisticsButton.setOnAction</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferencePane"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferencePane; file: org.pdfsam.ui.dashboard.preference.PreferencePane-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/dashboard/preference/PreferenceAppearencePane;Lorg/pdfsam/ui/dashboard/preference/PreferenceBehaviorPane;Lorg/pdfsam/ui/dashboard/preference/PreferenceWorkspacePane;Lorg/pdfsam/ui/dashboard/preference/PreferenceOutputPane;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceAppearencePane">?</arg>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceBehaviorPane">?</arg>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceWorkspacePane">?</arg>
                     <arg type="Lorg/pdfsam/ui/dashboard/preference/PreferenceOutputPane">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferencePane.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.VBox.setMinWidth</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferencePane.addSectionTitle</op>
                     <op code="call">javafx.scene.layout.VBox.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferencePane.addSectionTitle</op>
                     <op code="call">javafx.scene.layout.VBox.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="get_static">javafx.scene.layout.Priority.ALWAYS</op>
                     <op code="call">javafx.scene.layout.HBox.setHgrow</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferencePane.addSectionTitle</op>
                     <op code="call">javafx.scene.layout.VBox.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferencePane.addSectionTitle</op>
                     <op code="call">javafx.scene.layout.VBox.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferencePane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;Ljavafx/scene/layout/Pane;)V"
                       name="addSectionTitle"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Ljavafx/scene/layout/Pane">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">javafx.scene.layout.Pane.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceComboBox"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceComboBox; file: org.pdfsam.ui.dashboard.preference.PreferenceComboBox-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/StringUserPreference">preference</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/context/StringUserPreference;Lorg/pdfsam/context/UserContext;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/StringUserPreference">?</arg>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.ComboBox.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">preference</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.valueProperty</op>
                     <op code="call">javafx.beans.property.ObjectProperty.addListener</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceSetterOnValidState"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceSetterOnValidState; file: org.pdfsam.ui.dashboard.preference.PreferenceSetterOnValidState-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/StringUserPreference">preference</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/commons/ValidableTextField">textField</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/UserContext">userContext</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/context/StringUserPreference;Lorg/pdfsam/ui/commons/ValidableTextField;Lorg/pdfsam/context/UserContext;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/context/StringUserPreference">?</arg>
                     <arg type="Lorg/pdfsam/ui/commons/ValidableTextField">?</arg>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="put">textField</op>
                     <op code="put">preference</op>
                     <op code="put">userContext</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/beans/value/ObservableValue;Lorg/pdfsam/ui/support/FXValidationSupport$ValidationState;Lorg/pdfsam/ui/support/FXValidationSupport$ValidationState;)V"
                       name="changed"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/beans/value/ObservableValue">?</arg>
                     <arg type="Lorg/pdfsam/ui/support/FXValidationSupport$ValidationState">?</arg>
                     <arg type="Lorg/pdfsam/ui/support/FXValidationSupport$ValidationState">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="get">userContext</op>
                     <op code="get">preference</op>
                     <op code="get">textField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.pdfsam.context.UserContext.setStringPreference</op>
                     <op code="get_static">org.pdfsam.ui.dashboard.preference.PreferenceSetterOnValidState.LOG</op>
                     <op code="get">preference</op>
                     <op code="get">textField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.getText</op>
                     <op code="call">org.slf4j.Logger.trace</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.ui.dashboard.preference.PreferenceSetterOnValidState.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceOutputPaneTest"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceOutputPaneTest; file: org.pdfsam.ui.dashboard.preference.PreferenceOutputPaneTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/UserContext">userContext</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">userContext</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SMART_OUTPUT</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceRadioButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceRadioButton.setId</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.PDF_COMPRESSION_ENABLED</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.setId</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceOutputPane.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceOutputPane.setId</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="manualRadioIsSelected"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceOutputPaneTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="call">javafx.scene.control.RadioButton.isSelected</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clickCompression"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceOutputPaneTest.clickOn</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.PDF_COMPRESSION_ENABLED</op>
                     <op code="call">org.pdfsam.context.UserContext.setBooleanPreference</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="clickSmart"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceOutputPaneTest.clickOn</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SMART_OUTPUT</op>
                     <op code="call">org.pdfsam.context.UserContext.setBooleanPreference</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferencePaneTest$Config"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferencePaneTest$Config; file: org.pdfsam.ui.dashboard.preference.PreferencePaneTest$Config-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/context/UserContext;"
                       name="userContext"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/context/UserContext</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.context.UserContext.isCheckForUpdates</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.context.UserContext.isCheckForNews</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.context.UserContext.isPlaySounds</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.FALSE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.context.UserContext.isDonationNotification</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.context.UserContext.isFetchPremiumModules</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.context.UserContext.isUseSmartOutput</op>
                     <op code="call">java.lang.Boolean.valueOf</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="get_static">java.lang.Boolean.TRUE</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.context.UserContext.getDefaultWorkingPath</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.context.UserContext.getDefaultWorkspacePath</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.context.UserContext.getStartupModule</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/module/Module;"
                       name="aModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/module/Module</return>
                  <ops>
                     <op code="call">org.pdfsam.test.HighPriorityTestModule.&lt;init&gt;</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceConfig"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceConfig; file: org.pdfsam.ui.dashboard.preference.PreferenceConfig-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/dashboard/preference/PreferenceComboBox;"
                       name="localeCombo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/dashboard/preference/PreferenceComboBox</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.LOCALE</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.&lt;init&gt;</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/List;Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/dashboard/preference/PreferenceComboBox;"
                       name="startupModuleCombo"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/List">?</arg>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/dashboard/preference/PreferenceComboBox</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.STARTUP_MODULE</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.setId</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.getItems</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyValue</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">java.util.List.stream</op>
                     <op code="call">java.util.stream.Stream.map</op>
                     <op code="call">java.util.Comparator.comparing</op>
                     <op code="call">java.util.stream.Stream.sorted</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.getItems</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="call">java.util.stream.Stream.forEach</op>
                     <op code="call">org.pdfsam.context.UserContext.getStartupModule</op>
                     <op code="call">org.pdfsam.support.KeyStringValueItem.keyEmptyValue</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.setValue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox;"
                       name="checkForUpdates"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.CHECK_UPDATES</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.context.UserContext.isCheckForUpdates</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.setId</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.setGraphic</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.WITH_HELP</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox;"
                       name="checkForNews"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.CHECK_FOR_NEWS</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.context.UserContext.isCheckForNews</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.setId</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.setGraphic</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.WITH_HELP</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox;"
                       name="compressionEnabled"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.PDF_COMPRESSION_ENABLED</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.context.UserContext.isCompressionEnabled</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.setId</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.setGraphic</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.WITH_HELP</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox;"
                       name="playSounds"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.PLAY_SOUNDS</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.context.UserContext.isPlaySounds</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.setId</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.setGraphic</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.WITH_HELP</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox;"
                       name="savePwdInWorkspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SAVE_PWD_IN_WORKSPACE</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.context.UserContext.isSavePwdInWorkspaceFile</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.setId</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.setGraphic</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.WITH_HELP</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox;"
                       name="donationNotification"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.DONATION_NOTIFICATION</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.context.UserContext.isDonationNotification</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.setId</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.setGraphic</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.WITH_HELP</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox;"
                       name="fetchPremiumModules"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.PREMIUM_MODULES</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.context.UserContext.isFetchPremiumModules</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.setId</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.setGraphic</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.WITH_HELP</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/dashboard/preference/PreferenceRadioButton;"
                       name="smartRadio"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/dashboard/preference/PreferenceRadioButton</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SMART_OUTPUT</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.context.UserContext.isUseSmartOutput</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceRadioButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceRadioButton.setId</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/dashboard/preference/PreferenceBrowsableDirectoryField;"
                       name="workingDirectory"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/dashboard/preference/PreferenceBrowsableDirectoryField</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.WORKING_PATH</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.context.UserContext.getDefaultWorkingPath</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryField.setId</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryField.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/dashboard/preference/PreferenceBrowsableFileField;"
                       name="workspace"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/dashboard/preference/PreferenceBrowsableFileField</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.WORKSPACE_PATH</op>
                     <op code="get_static">org.pdfsam.support.io.FileType.JSON</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.OPEN</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileField.getTextField</op>
                     <op code="call">org.pdfsam.context.UserContext.getDefaultWorkspacePath</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setText</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileField.setId</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileField.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox;"
                       name="saveWorkspaceOnExit"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/dashboard/preference/PreferenceCheckBox</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.BooleanUserPreference.SAVE_WORKSPACE_ON_EXIT</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.context.UserContext.isSaveWorkspaceOnExit</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.setId</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.help.HelpUtils.helpIcon</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.setGraphic</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.WITH_HELP</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceCheckBox.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/context/UserContext;)Lorg/pdfsam/ui/dashboard/preference/PreferenceIntTextField;"
                       name="logViewRowsNumber"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>Lorg/pdfsam/ui/dashboard/preference/PreferenceIntTextField</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.IntUserPreference.LOGVIEW_ROWS_NUMBER</op>
                     <op code="call">org.pdfsam.support.validation.Validators.positiveInteger</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceIntTextField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.context.UserContext.getNumberOfLogRows</op>
                     <op code="call">java.lang.Integer.toString</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceIntTextField.setText</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceIntTextField.setErrorMessage</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceIntTextField.setId</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceIntTextField.validProperty</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.addListener</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceBrowsableDirectoryFieldTest"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryFieldTest; file: org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryFieldTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/UserContext">userContext</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">userContext</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.WORKING_PATH</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryField.setId</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFolder</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryFieldTest.typePathAndValidate</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.WORKING_PATH</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.context.UserContext.setStringPreference</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryFieldTest.typePathAndValidate</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.context.UserContext.setStringPreference</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="emptyValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryFieldTest.typePathAndValidate</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.WORKING_PATH</op>
                     <op code="call">org.pdfsam.context.UserContext.setStringPreference</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="blankValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryFieldTest.typePathAndValidate</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.context.UserContext.setStringPreference</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="typePathAndValidate"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryFieldTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.TAB</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceBrowsableDirectoryField"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryField; file: org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryField-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/context/StringUserPreference;Lorg/pdfsam/context/UserContext;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="default">
                  <args>
                     <arg type="Lorg/pdfsam/context/StringUserPreference">?</arg>
                     <arg type="Lorg/pdfsam/context/UserContext">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.io.BrowsableDirectoryField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.support.validation.Validators.existingDirectory</op>
                     <op code="call">org.pdfsam.support.validation.Validators.validEmpty</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.setValidator</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">org.sejda.commons.util.RequireUtils.requireNotNullArg</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.validProperty</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableDirectoryField.getTextField</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceSetterOnValidState.&lt;init&gt;</op>
                     <op code="call">javafx.beans.property.ReadOnlyObjectProperty.addListener</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceBrowsableFileFieldTest"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileFieldTest; file: org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileFieldTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">folder</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/UserContext">userContext</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">folder</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">userContext</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.WORKING_PATH</op>
                     <op code="get_static">org.pdfsam.support.io.FileType.PDF</op>
                     <op code="get_static">org.pdfsam.ui.io.RememberingLatestFileChooserWrapper$OpenType.OPEN</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileField.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileField.setId</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="validValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileFieldTest.typePathAndValidate</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.WORKING_PATH</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.context.UserContext.setStringPreference</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="invalidValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">folder</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.io.File.getAbsolutePath</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileFieldTest.typePathAndValidate</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.context.UserContext.setStringPreference</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="emptyValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileFieldTest.typePathAndValidate</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.WORKING_PATH</op>
                     <op code="call">org.pdfsam.context.UserContext.setStringPreference</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="blankValue"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileFieldTest.typePathAndValidate</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.never</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.mockito.ArgumentMatchers.any</op>
                     <op code="call">org.pdfsam.context.UserContext.setStringPreference</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="typePathAndValidate"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceBrowsableFileFieldTest.clickOn</op>
                     <op code="call">org.testfx.api.FxRobotInterface.write</op>
                     <op code="get_static">javafx.scene.input.KeyCode.TAB</op>
                     <op code="call">org.testfx.api.FxRobotInterface.push</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceSetterOnValidStateTest"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceSetterOnValidStateTest; file: org.pdfsam.ui.dashboard.preference.PreferenceSetterOnValidStateTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">javaFxThread</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/UserContext">userContext</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">javaFxThread</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">userContext</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="changed"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.STARTUP_MODULE</op>
                     <op code="call">org.pdfsam.ui.commons.ValidableTextField.&lt;init&gt;</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceSetterOnValidState.&lt;init&gt;</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.NOT_VALIDATED</op>
                     <op code="get_static">org.pdfsam.ui.support.FXValidationSupport$ValidationState.VALID</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceSetterOnValidState.changed</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.STARTUP_MODULE</op>
                     <op code="call">org.pdfsam.context.UserContext.setStringPreference</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="PreferenceAppearencePaneTest"><!--Package: org.pdfsam.ui.dashboard.preference; name: org.pdfsam.ui.dashboard.preference.PreferenceAppearencePaneTest; file: org.pdfsam.ui.dashboard.preference.PreferenceAppearencePaneTest-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/context/UserContext">userContext</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="put">userContext</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">java.util.Locale.ENGLISH</op>
                     <op code="call">java.util.Locale.setDefault</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.LOCALE</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.setId</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.STARTUP_MODULE</op>
                     <op code="get">userContext</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceComboBox.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.ClearStatisticsButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceAppearencePane.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceAppearencePane.setId</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="eventSentOnLocaleChange"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="get_static">org.pdfsam.i18n.DefaultI18nContext.SUPPORTED_LOCALES</op>
                     <op code="call">java.util.Set.stream</op>
                     <op code="call">java.util.stream.Stream.findFirst</op>
                     <op code="call">java.util.Optional.get</op>
                     <op code="call">org.pdfsam.ui.dashboard.preference.PreferenceAppearencePaneTest.clickOn</op>
                     <op code="call">java.util.Locale.getDisplayName</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.capitalize</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.mockito.ArgumentCaptor.forClass</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.ArgumentCaptor.capture</op>
                     <op code="call">org.pdfsam.eventstudio.Listener.onEvent</op>
                     <op code="call">java.util.Locale.toLanguageTag</op>
                     <op code="call">org.mockito.ArgumentCaptor.getValue</op>
                     <op code="call">org.pdfsam.i18n.SetLocaleEvent.getLocaleString</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">userContext</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="get_static">org.pdfsam.context.StringUserPreference.LOCALE</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">java.util.Locale.toLanguageTag</op>
                     <op code="call">org.mockito.ArgumentMatchers.eq</op>
                     <op code="call">org.pdfsam.context.UserContext.setStringPreference</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
      <package id="org.pdfsam.ui.module">
         <class id="BaseTaskExecutionModule"><!--Package: org.pdfsam.ui.module; name: org.pdfsam.ui.module.BaseTaskExecutionModule; file: org.pdfsam.ui.module.BaseTaskExecutionModule-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/layout/BorderPane">modulePanel</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/module/Footer">footer</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/module/Footer;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/module/Footer">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.BorderPane.&lt;init&gt;</op>
                     <op code="put">modulePanel</op>
                     <op code="put">footer</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/scene/layout/VBox;)V"
                       name="initModuleSettingsPanel"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljavafx/scene/layout/VBox">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.VBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.DEAULT_CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.layout.VBox.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.MODULE_CONTAINER</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">javafx.scene.layout.VBox.getChildren</op>
                     <op code="get">footer</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">footer</op>
                     <op code="call">org.pdfsam.ui.module.Footer.runButton</op>
                     <op code="call">org.pdfsam.ui.module.RunButton.setOnAction</op>
                     <op code="get">modulePanel</op>
                     <op code="call">javafx.scene.layout.BorderPane.setCenter</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/workspace/SaveWorkspaceEvent;)V"
                       name="saveStateData"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/workspace/SaveWorkspaceEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.BaseTaskExecutionModule.id</op>
                     <op code="call">org.pdfsam.ui.workspace.SaveWorkspaceEvent.getDataForModule</op>
                     <op code="call">org.pdfsam.ui.module.BaseTaskExecutionModule.onSaveWorkspace</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/workspace/LoadWorkspaceEvent;)V"
                       name="restoreState"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/workspace/LoadWorkspaceEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.application.Platform.runLater</op>
                  </ops>
               </method>
               <method abstract="true"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/function/Consumer;)Lorg/apache/commons/lang3/builder/Builder;"
                       name="getBuilder"
                       static="false"
                       visibility="protected">
                  <args>
                     <arg type="Ljava/util/function/Consumer">?</arg>
                  </args>
                  <return>Lorg/apache/commons/lang3/builder/Builder</return>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljavafx/scene/layout/Pane;"
                       name="modulePanel"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljavafx/scene/layout/Pane</return>
                  <ops>
                     <op code="get">modulePanel</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="BaseTaskExecutionModule$ErrorTracker"><!--Package: org.pdfsam.ui.module; name: org.pdfsam.ui.module.BaseTaskExecutionModule$ErrorTracker; file: org.pdfsam.ui.module.BaseTaskExecutionModule$ErrorTracker-->
            <attributes>
               <attribute final="false" public="false" static="false" type="Z">errorOnBuild</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="put">errorOnBuild</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/lang/String;)V"
                       name="accept"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">errorOnBuild</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ModuleOwnedButton"><!--Package: org.pdfsam.ui.module; name: org.pdfsam.ui.module.ModuleOwnedButton; file: org.pdfsam.ui.module.ModuleOwnedButton-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">ownerModule</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.pdfsam.ui.module.ModuleOwnedButton.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.BUTTON</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getOwnerModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">ownerModule</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="ModuleOwnedButtonTest"><!--Package: org.pdfsam.ui.module; name: org.pdfsam.ui.module.ModuleOwnedButtonTest; file: org.pdfsam.ui.module.ModuleOwnedButtonTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">rule</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">rule</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="nullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.ModuleOwnedButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.module.ModuleOwnedButton.getOwnerModule</op>
                     <op code="call">org.junit.Assert.assertNotNull</op>
                     <op code="call">org.pdfsam.ui.module.ModuleOwnedButton.getOwnerModule</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="notNullArg"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.ModuleOwnedButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.module.ModuleOwnedButton.getOwnerModule</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="Footer"><!--Package: org.pdfsam.ui.module; name: org.pdfsam.ui.module.Footer; file: org.pdfsam.ui.module.Footer-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/ProgressBar">bar</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljavafx/scene/control/Label">statusLabel</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/module/TaskFailedButton">failed</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/module/OpenButton">openButton</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/module/RunButton">runButton</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">ownerModule</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/module/RunButton;Lorg/pdfsam/ui/module/OpenButton;Ljava/lang/String;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/module/RunButton">?</arg>
                     <arg type="Lorg/pdfsam/ui/module/OpenButton">?</arg>
                     <arg type="Ljava/lang/String">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.control.ProgressBar.&lt;init&gt;</op>
                     <op code="put">bar</op>
                     <op code="call">javafx.scene.control.Label.&lt;init&gt;</op>
                     <op code="put">statusLabel</op>
                     <op code="call">org.pdfsam.ui.module.TaskFailedButton.&lt;init&gt;</op>
                     <op code="put">failed</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="put">ownerModule</op>
                     <op code="put">openButton</op>
                     <op code="put">runButton</op>
                     <op code="call">org.pdfsam.ui.module.Footer.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="get">statusLabel</op>
                     <op code="call">javafx.scene.control.Label.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">statusLabel</op>
                     <op code="call">javafx.scene.control.Label.setVisible</op>
                     <op code="get">bar</op>
                     <op code="call">javafx.scene.control.ProgressBar.setMaxWidth</op>
                     <op code="get">bar</op>
                     <op code="call">javafx.scene.control.ProgressBar.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">statusLabel</op>
                     <op code="call">javafx.scene.control.Label.setMaxHeight</op>
                     <op code="get">statusLabel</op>
                     <op code="get">bar</op>
                     <op code="call">javafx.scene.layout.VBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.layout.VBox.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="get">statusLabel</op>
                     <op code="get_static">javafx.scene.layout.Priority.ALWAYS</op>
                     <op code="call">javafx.scene.layout.VBox.setVgrow</op>
                     <op code="get">bar</op>
                     <op code="get_static">javafx.scene.layout.Priority.ALWAYS</op>
                     <op code="call">javafx.scene.layout.HBox.setHgrow</op>
                     <op code="get_static">javafx.scene.layout.Priority.ALWAYS</op>
                     <op code="call">javafx.scene.layout.HBox.setHgrow</op>
                     <op code="get">failed</op>
                     <op code="call">org.pdfsam.ui.module.TaskFailedButton.setVisible</op>
                     <op code="get">failed</op>
                     <op code="call">javafx.scene.layout.StackPane.&lt;init&gt;</op>
                     <op code="get_static">javafx.geometry.Pos.CENTER_LEFT</op>
                     <op code="call">javafx.scene.layout.StackPane.setAlignment</op>
                     <op code="call">org.pdfsam.ui.module.Footer.getChildren</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/module/OpenButton;"
                       name="openButton"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/module/OpenButton</return>
                  <ops>
                     <op code="get">openButton</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Lorg/pdfsam/ui/module/RunButton;"
                       name="runButton"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Lorg/pdfsam/ui/module/RunButton</return>
                  <ops>
                     <op code="get">runButton</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getOwnerModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">ownerModule</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/notification/event/TaskExecutionCompletedEvent;)V"
                       name="onTaskCompleted"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/notification/event/TaskExecutionCompletedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">failed</op>
                     <op code="call">org.pdfsam.ui.module.TaskFailedButton.setVisible</op>
                     <op code="get">openButton</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.setVisible</op>
                     <op code="get">statusLabel</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                     <op code="get">bar</op>
                     <op code="call">javafx.scene.control.ProgressBar.setProgress</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/notification/event/TaskExecutionFailedEvent;)V"
                       name="onTaskFailed"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/notification/event/TaskExecutionFailedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">openButton</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.setVisible</op>
                     <op code="get">failed</op>
                     <op code="call">org.pdfsam.ui.module.TaskFailedButton.setVisible</op>
                     <op code="get">statusLabel</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/notification/event/PercentageOfWorkDoneChangedEvent;)V"
                       name="onProgress"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/notification/event/PercentageOfWorkDoneChangedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">statusLabel</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                     <op code="call">org.sejda.model.notification.event.PercentageOfWorkDoneChangedEvent.isUndetermined</op>
                     <op code="get">bar</op>
                     <op code="call">javafx.scene.control.ProgressBar.setProgress</op>
                     <op code="get">bar</op>
                     <op code="call">org.sejda.model.notification.event.PercentageOfWorkDoneChangedEvent.getPercentage</op>
                     <op code="call">java.math.BigDecimal.&lt;init&gt;</op>
                     <op code="call">java.math.BigDecimal.divide</op>
                     <op code="call">java.math.BigDecimal.doubleValue</op>
                     <op code="call">javafx.scene.control.ProgressBar.setProgress</op>
                     <op code="get">statusLabel</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.sejda.model.notification.event.PercentageOfWorkDoneChangedEvent.getPercentage</op>
                     <op code="call">java.math.BigDecimal.intValue</op>
                     <op code="call">java.lang.Integer.toString</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">javafx.scene.control.Label.setText</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="TaskFailedButton"><!--Package: org.pdfsam.ui.module; name: org.pdfsam.ui.module.TaskFailedButton; file: org.pdfsam.ui.module.TaskFailedButton-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.module.TaskFailedButton.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.FOOTER_BUTTON</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.module.TaskFailedButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.add</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.module.TaskFailedButton.setText</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory.get</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.TIMES_CIRCLE</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory.setIcon</op>
                     <op code="call">org.pdfsam.ui.module.TaskFailedButton.setMaxHeight</op>
                     <op code="call">org.pdfsam.ui.module.TaskFailedButton.setPrefHeight</op>
                     <op code="call">org.pdfsam.ui.module.TaskFailedButton.setOnAction</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OpenButton$OpenWithMenuItem"><!--Package: org.pdfsam.ui.module; name: org.pdfsam.ui.module.OpenButton$OpenWithMenuItem; file: org.pdfsam.ui.module.OpenButton$OpenWithMenuItem-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/module/OpenButton">this$0</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Lorg/pdfsam/ui/module/OpenButton;Lorg/pdfsam/module/Module;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Lorg/pdfsam/ui/module/OpenButton">?</arg>
                     <arg type="Lorg/pdfsam/module/Module">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="put">this$0</op>
                     <op code="call">javafx.scene.control.MenuItem.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.module.Module.descriptor</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.getName</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton$OpenWithMenuItem.setText</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton$OpenWithMenuItem.setOnAction</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RunButtonTest"><!--Package: org.pdfsam.ui.module; name: org.pdfsam.ui.module.RunButtonTest; file: org.pdfsam.ui.module.RunButtonTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">fxThread</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">cearEventStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/module/RunButton">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">fxThread</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">cearEventStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.RunButton.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="isDefault"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.RunButton.isDefaultButton</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="disableOnRequest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.RunButton.setDisable</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.RunButton.isDisabled</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="disableOnFail"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.RunButton.setDisable</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionFailedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.RunButton.isDisabled</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="enableOnComplete"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.RunButton.setDisable</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionCompletedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.RunButton.isDisabled</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OpenButtonTest$TestListener"><!--Package: org.pdfsam.ui.module; name: org.pdfsam.ui.module.OpenButtonTest$TestListener; file: org.pdfsam.ui.module.OpenButtonTest$TestListener-->
            <attributes>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/io/File">destination</attribute>
               <attribute final="false" public="false" static="false" type="Z">equal</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/io/File;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="put">equal</op>
                     <op code="put">destination</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/ui/commons/OpenFileRequest;)V"
                       name="onEvent"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/ui/commons/OpenFileRequest">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.HitTestListener.onEvent</op>
                     <op code="get">destination</op>
                     <op code="call">org.pdfsam.ui.commons.OpenFileRequest.getFile</op>
                     <op code="call">java.io.File.equals</op>
                     <op code="put">equal</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="TaskFailedButtonTest"><!--Package: org.pdfsam.ui.module; name: org.pdfsam.ui.module.TaskFailedButtonTest; file: org.pdfsam.ui.module.TaskFailedButtonTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearEventStudio</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearEventStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.TaskFailedButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.module.TaskFailedButton.setMaxHeight</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="failButtonVisibleOnFailure"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.ui.module.TaskFailedButtonTest.clickOn</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="FooterTest"><!--Package: org.pdfsam.ui.module; name: org.pdfsam.ui.module.FooterTest; file: org.pdfsam.ui.module.FooterTest-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Ljava/lang/String">MODULE_ID</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/InitializeAndApplyJavaFxThreadRule">fxThread</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">clearEventStudio</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/module/Footer">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">java.lang.Object.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.InitializeAndApplyJavaFxThreadRule.&lt;init&gt;</op>
                     <op code="put">fxThread</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">clearEventStudio</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="setUp"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">java.util.Locale.UK</op>
                     <op code="call">java.util.Locale.toLanguageTag</op>
                     <op code="call">org.pdfsam.i18n.SetLocaleEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.SINGLE_PDF</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.module.RunButton.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.module.Footer.&lt;init&gt;</op>
                     <op code="put">victim</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="hideOnInit"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.Node.isVisible</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.Node.isVisible</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.Node.isVisible</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onTaskCompleted"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.onTaskCompleted</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.Node.isVisible</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.Node.isVisible</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.control.Labeled.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.control.ProgressBar.getProgress</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onTaskFailed"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.onTaskFailed</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.Node.isVisible</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.Node.isVisible</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.control.Labeled.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.control.ProgressBar.getProgress</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onProgress"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">java.math.BigDecimal.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.notification.event.PercentageOfWorkDoneChangedEvent.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.onProgress</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.Node.isVisible</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.Node.isVisible</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.control.Labeled.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.control.ProgressBar.getProgress</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onProgressIndeterminate"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="get_static">org.sejda.model.notification.event.PercentageOfWorkDoneChangedEvent.UNDETERMINED</op>
                     <op code="call">org.sejda.model.notification.event.PercentageOfWorkDoneChangedEvent.&lt;init&gt;</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.onProgress</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.Node.isVisible</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.Node.isVisible</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.control.Labeled.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.control.ProgressBar.isIndeterminate</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onTaskExecutionRequest"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.sejda.model.parameter.base.AbstractParameters.getOutput</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.Node.isVisible</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.Node.isVisible</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.Node.isVisible</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.control.Labeled.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.control.ProgressBar.getProgress</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.mockito.Matchers.any</op>
                     <op code="call">org.sejda.model.output.TaskOutput.accept</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="onTaskExecutionRequestDifferentModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.pdfsam.module.TaskExecutionRequestEvent.&lt;init&gt;</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.sejda.model.parameter.base.AbstractParameters.getOutput</op>
                     <op code="call">org.mockito.Mockito.when</op>
                     <op code="call">org.mockito.stubbing.OngoingStubbing.thenReturn</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.Footer.lookup</op>
                     <op code="call">javafx.scene.Node.isVisible</op>
                     <op code="call">org.junit.Assert.assertFalse</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="RunButton"><!--Package: org.pdfsam.ui.module; name: org.pdfsam.ui.module.RunButton; file: org.pdfsam.ui.module.RunButton-->
            <attributes/>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.Button.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.module.RunButton.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.FOOTER_BUTTON</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.module.RunButton.setText</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.get</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.PLAY</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.setIcon</op>
                     <op code="call">org.pdfsam.ui.module.RunButton.setMaxHeight</op>
                     <op code="call">org.pdfsam.ui.module.RunButton.setPrefHeight</op>
                     <op code="call">org.pdfsam.ui.module.RunButton.setDefaultButton</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/pdfsam/module/TaskExecutionRequestEvent;)V"
                       name="disableRunButtonIfTaskRequested"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/pdfsam/module/TaskExecutionRequestEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.RunButton.setDisable</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/notification/event/TaskExecutionCompletedEvent;)V"
                       name="enableRunButtonOnTaskCompletion"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/notification/event/TaskExecutionCompletedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.RunButton.setDisable</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/notification/event/TaskExecutionFailedEvent;)V"
                       name="enableRunButtonOnTaskFailure"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/notification/event/TaskExecutionFailedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.pdfsam.ui.module.RunButton.setDisable</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OpenButton"><!--Package: org.pdfsam.ui.module; name: org.pdfsam.ui.module.OpenButton; file: org.pdfsam.ui.module.OpenButton-->
            <attributes>
               <attribute final="true"
                          public="false"
                          static="true"
                          type="Lorg/slf4j/Logger">LOG</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/lang/String">ownerModule</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/io/File">destination</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Ljava/util/List">latestOutput</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/ModuleInputOutputType">outputType</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="(Ljava/lang/String;Lorg/pdfsam/module/ModuleInputOutputType;)V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/lang/String">?</arg>
                     <arg type="Lorg/pdfsam/module/ModuleInputOutputType">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">javafx.scene.control.SplitMenuButton.&lt;init&gt;</op>
                     <op code="put">ownerModule</op>
                     <op code="call">java.util.ArrayList.&lt;init&gt;</op>
                     <op code="put">latestOutput</op>
                     <op code="call">java.util.Objects.requireNonNull</op>
                     <op code="put">outputType</op>
                     <op code="call">org.apache.commons.lang3.StringUtils.defaultString</op>
                     <op code="put">ownerModule</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.setId</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.getStyleClass</op>
                     <op code="get_static">org.pdfsam.ui.support.Style.BUTTON</op>
                     <op code="call">org.pdfsam.ui.support.Style.css</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.getStyleClass</op>
                     <op code="call">javafx.collections.ObservableList.addAll</op>
                     <op code="call">org.pdfsam.i18n.DefaultI18nContext.getInstance</op>
                     <op code="call">org.pdfsam.i18n.I18nContext.i18n</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.setText</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.setMaxHeight</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.setPrefHeight</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.setVisible</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.setOnAction</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get_static">org.pdfsam.eventstudio.ReferenceStrength.STRONG</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.addAnnotatedListeners</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/io/File;)Z"
                       name="openFile"
                       static="false"
                       visibility="private">
                  <args>
                     <arg type="Ljava/io/File">?</arg>
                  </args>
                  <return>Z</return>
                  <ops>
                     <op code="call">java.io.File.exists</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.ui.commons.OpenFileRequest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljava/util/Collection;)V"
                       name="initModules"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljava/util/Collection">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">java.util.Collection.forEach</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()Ljava/lang/String;"
                       name="getOwnerModule"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>Ljava/lang/String</return>
                  <ops>
                     <op code="get">ownerModule</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/notification/event/TaskExecutionCompletedEvent;)V"
                       name="onTaskCompleted"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/notification/event/TaskExecutionCompletedEvent">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get">latestOutput</op>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionCompletedEvent.getNotifiableTaskMetadata</op>
                     <op code="call">org.sejda.model.task.NotifiableTaskMetadata.taskOutput</op>
                     <op code="call">java.util.List.addAll</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/output/FileTaskOutput;)V"
                       name="dispatch"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/output/FileTaskOutput">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.model.output.FileTaskOutput.getDestination</op>
                     <op code="put">destination</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory.get</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.FILE_PDF_ALT</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.utils.FontAwesomeIconFactory.createIcon</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.setGraphic</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/output/DirectoryTaskOutput;)V"
                       name="dispatch"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/output/DirectoryTaskOutput">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.model.output.DirectoryTaskOutput.getDestination</op>
                     <op code="put">destination</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.get</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.FOLDER_OUTLINE</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.createIcon</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.setGraphic</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Lorg/sejda/model/output/FileOrDirectoryTaskOutput;)V"
                       name="dispatch"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Lorg/sejda/model/output/FileOrDirectoryTaskOutput">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="call">org.sejda.model.output.FileOrDirectoryTaskOutput.getDestination</op>
                     <op code="put">destination</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.get</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.FOLDER_OUTLINE</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.utils.MaterialDesignIconFactory.createIcon</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.setGraphic</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;clinit&gt;"
                       static="true"
                       visibility="default">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.slf4j.LoggerFactory.getLogger</op>
                     <op code="put_static">org.pdfsam.ui.module.OpenButton.LOG</op>
                  </ops>
               </method>
            </methods>
         </class>
         <class id="OpenButtonTest"><!--Package: org.pdfsam.ui.module; name: org.pdfsam.ui.module.OpenButtonTest; file: org.pdfsam.ui.module.OpenButtonTest-->
            <attributes>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/pdfsam/test/ClearEventStudioRule">cearEventStudio</attribute>
               <attribute final="false"
                          public="true"
                          static="false"
                          type="Lorg/junit/rules/TemporaryFolder">temp</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/module/Module">module</attribute>
               <attribute final="false"
                          public="false"
                          static="false"
                          type="Lorg/pdfsam/ui/module/OpenButton">victim</attribute>
            </attributes>
            <methods>
               <method abstract="false"
                       bridge="false"
                       ctor="true"
                       desc="()V"
                       name="&lt;init&gt;"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.testfx.framework.junit.ApplicationTest.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.ClearEventStudioRule.&lt;init&gt;</op>
                     <op code="put">cearEventStudio</op>
                     <op code="call">org.junit.rules.TemporaryFolder.&lt;init&gt;</op>
                     <op code="put">temp</op>
                     <op code="call">org.pdfsam.test.DefaultPriorityTestModule.&lt;init&gt;</op>
                     <op code="put">module</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="(Ljavafx/stage/Stage;)V"
                       name="start"
                       static="false"
                       visibility="public">
                  <args>
                     <arg type="Ljavafx/stage/Stage">?</arg>
                  </args>
                  <return>V</return>
                  <ops>
                     <op code="get_static">org.pdfsam.module.ModuleInputOutputType.SINGLE_PDF</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.&lt;init&gt;</op>
                     <op code="put">victim</op>
                     <op code="get">victim</op>
                     <op code="get">module</op>
                     <op code="call">java.util.Arrays.asList</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.initModules</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.setMaxHeight</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.OpenButton.setVisible</op>
                     <op code="get">victim</op>
                     <op code="call">javafx.scene.layout.HBox.&lt;init&gt;</op>
                     <op code="call">javafx.scene.Scene.&lt;init&gt;</op>
                     <op code="call">javafx.stage.Stage.setScene</op>
                     <op code="call">javafx.stage.Stage.show</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="openFileClick"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">temp</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.sejda.model.output.FileTaskOutput.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.module.OpenButtonTest$TestListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.OpenButtonTest.clickOn</op>
                     <op code="call">org.pdfsam.ui.module.OpenButtonTest$TestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">equal</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="openDirectoryClick"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">temp</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFolder</op>
                     <op code="call">org.sejda.model.output.DirectoryTaskOutput.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.module.OpenButtonTest$TestListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.OpenButtonTest.clickOn</op>
                     <op code="call">org.pdfsam.ui.module.OpenButtonTest$TestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">equal</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="openSingleFileDirectoryDestinationClick"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">temp</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">java.io.File.getParentFile</op>
                     <op code="call">org.sejda.model.output.DirectoryTaskOutput.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.ui.module.OpenButtonTest$TestListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.sejda.model.task.NotifiableTaskMetadata.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.task.NotifiableTaskMetadata.addTaskOutput</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionCompletedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="get">victim</op>
                     <op code="call">org.pdfsam.ui.module.OpenButtonTest.clickOn</op>
                     <op code="call">org.pdfsam.ui.module.OpenButtonTest$TestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="get">equal</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="fileDestination"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.sejda.model.output.FileTaskOutput.getDestination</op>
                     <op code="call">org.pdfsam.ui.module.OpenButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get_static">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.FILE_PDF_ALT</op>
                     <op code="call">de.jensd.fx.glyphs.fontawesome.FontAwesomeIcon.unicode</op>
                     <op code="call">javafx.scene.text.Text.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="directoryDestination"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.sejda.model.output.DirectoryTaskOutput.getDestination</op>
                     <op code="call">org.pdfsam.ui.module.OpenButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.FOLDER_OUTLINE</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.unicode</op>
                     <op code="call">javafx.scene.text.Text.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="fileOrDirDestination"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.testfx.util.WaitForAsyncUtils.waitForAsyncFx</op>
                     <op code="call">org.mockito.Mockito.verify</op>
                     <op code="call">org.sejda.model.output.DirectoryTaskOutput.getDestination</op>
                     <op code="call">org.pdfsam.ui.module.OpenButtonTest.lookup</op>
                     <op code="call">org.testfx.service.query.NodeQuery.queryAs</op>
                     <op code="get_static">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.FOLDER_OUTLINE</op>
                     <op code="call">de.jensd.fx.glyphs.materialdesignicons.MaterialDesignIcon.unicode</op>
                     <op code="call">javafx.scene.text.Text.getText</op>
                     <op code="call">org.junit.Assert.assertEquals</op>
                  </ops>
               </method>
               <method abstract="false"
                       bridge="false"
                       ctor="false"
                       desc="()V"
                       name="sendToModuleClick"
                       static="false"
                       visibility="public">
                  <args/>
                  <return>V</return>
                  <ops>
                     <op code="get">temp</op>
                     <op code="call">org.junit.rules.TemporaryFolder.newFile</op>
                     <op code="call">org.mockito.Mockito.mock</op>
                     <op code="call">org.sejda.model.task.NotifiableTaskMetadata.&lt;init&gt;</op>
                     <op code="call">org.sejda.model.task.NotifiableTaskMetadata.addTaskOutput</op>
                     <op code="call">org.sejda.model.notification.event.TaskExecutionCompletedEvent.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">module</op>
                     <op code="call">org.pdfsam.module.Module.id</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="get">module</op>
                     <op code="call">org.pdfsam.module.Module.id</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.test.HitTestListener.&lt;init&gt;</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.add</op>
                     <op code="call">org.pdfsam.eventstudio.StaticStudio.eventStudio</op>
                     <op code="call">org.pdfsam.eventstudio.DefaultEventStudio.broadcast</op>
                     <op code="call">org.pdfsam.ui.module.OpenButtonTest.clickOn</op>
                     <op code="get">module</op>
                     <op code="call">org.pdfsam.module.Module.descriptor</op>
                     <op code="call">org.pdfsam.module.ModuleDescriptor.getName</op>
                     <op code="call">org.testfx.api.FxRobotInterface.clickOn</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                     <op code="call">org.pdfsam.test.HitTestListener.isHit</op>
                     <op code="call">org.junit.Assert.assertTrue</op>
                  </ops>
               </method>
            </methods>
         </class>
      </package>
   </app>
</skeleton>
